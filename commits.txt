commit e372d08502f113db8535cc8cae84c43d3f828d6a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 19 20:22:29 2010 +0200

    Added sympy.polys.domains to setup.py

commit 18dbd953626d348c71ac87648caf63bebc280884
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 19 10:45:25 2010 +0200

    Added support for Assume objects in inequality solver

    In [1]: solve([x**2 - 1 <= 0])
    Out[1]: -1 ≤ re(x) ∧ im(x) = 0 ∧ re(x) ≤ 1

    In [2]: solve([x**2 - 1 <= 0, Assume(x, Q.real)])
    Out[2]: -1 ≤ x ∧ x ≤ 1

commit d31b63908fd19cb6d1fa843238b10bc91b210759
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 19 08:35:34 2010 +0200

    Added support for True|False in inequalities solver

    In [1]: solve([x**2 > 0, False])
    Out[1]: False

commit f9898b7edfd042457f431d8de1511f915714aeda
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 18 13:18:38 2010 +0200

    Added lexicographic range syntax to symbols()

    In [1]: symbols('x:z')
    Out[1]: (x, y, z)

    In [2]: symbols('a:d,x:z')
    Out[2]: (a, b, c, d, x, y, z)

    In [3]: symbols(('a:d', 'x:z'))
    Out[3]: ((a, b, c, d), (x, y, z))

    In [4]: symbols('xx:zz')
    (...)
    ValueError: 'xx:zz' is not a valid symbol range specification

commit 57e6859f758f61146230e81ef8762e423cadcfb8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 18 12:41:41 2010 +0200

    Added support for complex symbols to inequalities solver

    solve() will compute results in terms of re() and im()
    if symbols are complex (this is the default):

    In [1]: solve(x**2 > 1)
    Out[1]: (re(x) < -1 ∨ 1 < re(x)) ∧ im(x) = 0

    In [2]: global_assumptions.add(Assume(x, Q.real))

    In [3]: solve(x**2 > 1)
    Out[3]: x < -1 ∨ 1 < x

    In [4]: global_assumptions.remove(Assume(x, Q.real))

    Also added support for trivial multivariate systems:

    In [5]: solve([x**2 > 1, y**2 > 2])
    Out[5]:
                               ⎛  ⎽⎽⎽                      ⎽⎽⎽⎞
    (re(x) < -1 ∨ 1 < re(x)) ∧ ⎝╲╱ 2  < re(y) ∨ re(y) < -╲╱ 2 ⎠ ∧ im(x) = 0 ∧ im(y) = 0

    In [6]: solve(x**2*y + x > 1)
    (...)
    NotImplementedError: only univariate inequalities are supported

commit 416fe22406a9fa59e77da22e9ae13bcf10dfed72
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 18 12:04:13 2010 +0200

    Allow non-real arguments to Interval.as_relational

commit e93092cf2a623eb8e2001423f051896c36052aa5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 17 21:02:14 2010 +0200

    Made tests in test_ode.py run again

commit e88c0d056cd896768cd74f015ada06e7af7a8945
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 17 20:18:21 2010 +0200

    Disallow non-commutative expressions in polys

    In [1]: A, B = symbols('A,B', commutative=False)

    In [2]: sqf(A*B - B*A)
    (...)
    PolynomialError: non-commutative expressions are not supported

commit 3b997b76c150dfe9d84f235e1139f0ca4f57a9b0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 17 18:36:47 2010 +0200

    Disallow non-commutative generators

commit 3cf6d280890999c920bb5a05255e9b5838e99c07
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 17 18:36:01 2010 +0200

    Use decompose_power() instead of _analyze_power()

commit 5219675f7a300e00c93133a6badb4ad37e875296
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 17 13:24:25 2010 +0200

    Simplified logic in _symbolic_factor()

    In [1]: factor(Eq(x**2 + 2*x + 1, x**3 + 1))
    Out[1]:
           2           ⎛         2⎞
    (1 + x)  = (1 + x)⋅⎝1 - x + x ⎠

commit 3523d6399cd6a09544b95962db21b8b0873b043a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 17 12:29:59 2010 +0200

    Improved together() and moved to a separate file (#1069)

    In [1]: apart(1/(x + 1)/(x + 5))
    Out[1]:
          1           1
    - ───────── + ─────────
      4⋅(5 + x)   4⋅(1 + x)

    In [2]: together(_)
    Out[2]:
           1
    ───────────────
    (1 + x)⋅(5 + x)

    In [3]: together(1+1/(x+1)**2)
    Out[3]:
               2
    1 + (1 + x)
    ────────────
             2
      (1 + x)

    In [4]: together(1+1/(x*(x+1)))
    Out[4]:
    1 + x⋅(1 + x)
    ─────────────
      x⋅(1 + x)

    In [5]: together(1/(x*(x+1))+1/(x*(x+2)))
    Out[5]:
         3 + 2⋅x
    ─────────────────
    x⋅(1 + x)⋅(2 + x)

commit ab7b9583b654ecc045ec7fd70df6a0cde946ea0b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 17 02:02:00 2010 +0200

    Moved _gcd_terms() to exprtools.py and improved

    _gcd_terms() now correctly handles non-primitive expressions:

    In [1]: from sympy.core.exprtools import _gcd_terms, gcd_terms

    In [2]: f = (2*(x + 1)*(x + 4)/(5*x**2 + 5) + \
                (2*x + 2)*(x + 5)/(x**2 + 1)/5 + \
                (2*x + 2)*(x + 6)/(5*x**2 + 5))

    In [3]: f
    Out[3]:
    (2 + 2⋅x)⋅(4 + x)   (2 + 2⋅x)⋅(6 + x)   (2 + 2⋅x)⋅(5 + x)
    ───────────────── + ───────────────── + ─────────────────
                2                   2             ⎛     2⎞
         5 + 5⋅x             5 + 5⋅x            5⋅⎝1 + x ⎠

    In [4]: _gcd_terms(f)
    Out[4]:
    ⎛6⋅(1 + x)           ⎞
    ⎜──────────, 5 + x, 1⎟
    ⎜  ⎛     2⎞          ⎟
    ⎝5⋅⎝1 + x ⎠          ⎠

    gcd_terms() was added for combining results from _gcd_terms():

    In [5]: gcd_terms(f)
    Out[5]:
    6⋅(1 + x)⋅(5 + x)
    ─────────────────
          ⎛     2⎞
        5⋅⎝1 + x ⎠

commit f14eba7e8dcdc5f4c509efa365bc65611d460912
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 16 22:27:46 2010 +0200

    Added a function for transforming parts of expressions

    If the user wants to apply a function to parts of an expression,
    which start from a specific level, then use() might be helpful:

    In [1]: f = (x**2 + 1)**2 - 1

    In [2]: use(f, factor, level=2, kwargs={'gaussian': True})
    Out[2]:
                2        2
    -1 + (x + ⅈ) ⋅(x - ⅈ)

    In [3]: factor(f, gaussian=True)
    Out[3]:
     2 ⎛     2⎞
    x ⋅⎝2 + x ⎠

commit bdc69eb4f0e0b2cb6f0c7eb0e6ad3658ae986d24
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 16 22:19:39 2010 +0200

    Added more symbolic capabilities to factor() (#1568)

    In [1]: f = x**2 + 2*x + 1

    In [2]: factor(f**20000*y**2 + f**20000*2*y + f**20000)
    Out[2]:
           40000        2
    (1 + x)     ⋅(1 + y)

    (previously hanged)

    In [1]: var('a')
    Out[1]: a

    In [2]: df=-(1 - x)**2*(4 + x)/((2 + x)*(a + x)**2) - \
    (1 - x)**2*(4 + x)/((2 + x)**2*(a + x)) - \
    (2 - 2*x)*(4 + x)/((2 + x)*(a + x)) + \
    (1 - x)**2/((2 + x)*(a + x))

    In [3]: df
    Out[3]:
             2                  2                                          2
      (1 - x) ⋅(4 + x)   (1 - x) ⋅(4 + x)   (2 - 2⋅x)⋅(4 + x)       (1 - x)
    - ──────────────── - ──────────────── - ───────────────── + ───────────────
                     2          2            (2 + x)⋅(a + x)    (2 + x)⋅(a + x)
      (2 + x)⋅(a + x)    (2 + x) ⋅(a + x)

    In [4]: %time factor(_)
    CPU times: user 0.08 s, sys: 0.00 s, total: 0.09 s
    Wall time: 0.10 s
    Out[5]:
             ⎛                              2        2    3⎞
    -(1 - x)⋅⎝8 + 16⋅x + 18⋅a + 10⋅a⋅x + 5⋅x  + 2⋅a⋅x  + x ⎠
    ────────────────────────────────────────────────────────
                              2        2
                       (2 + x) ⋅(a + x)

commit 42547547ecf067919ed6d5b6bb4d996c262c0cfb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 16 22:15:16 2010 +0200

    Fixed factor(expand(x**2*(x**2 + 2)), extension=I)

commit b5014a775d45a51db6fafe0c6d4e7f696d4b20be
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 16 22:11:51 2010 +0200

    Added tools for manipulating large commutative expressions

    In [1]: from sympy.core.exprtools import Term

    In [2]: var('t')
    Out[2]: t

    In [3]: a = Term(4*x*y**2/z/t**3)

    In [4]: b = Term(2*x**3*y**5/t**3)

    In [5]: a.mul(b)
    Out[5]: Term(8, Factors({x: 4, y: 7}), Factors({z: 1, t: 6}))

    In [6]: a.quo(b)
    Out[6]: Term(2, Factors({}), Factors({x: 2, y: 3, z: 1}))

    In [7]: a.gcd(b)
    Out[7]: Term(2, Factors({x: 1, y: 2}), Factors({t: 3}))

    In [8]: a.lcm(b)
    Out[8]: Term(4, Factors({x: 3, y: 5}), Factors({z: 1, t: 3}))

commit 56988ef3117206a3bfe8cf3a188dbbecfe147006
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 16 19:29:48 2010 +0200

    Added primitive() method to Add

    In [1]: (2*x + 4*y).primitive()
    Out[1]: (2, x + 2⋅y)

    In [2]: (2*x/3 + 4*y/9).primitive()
    Out[2]: (2/9, 2⋅y + 3⋅x)

commit 7aedf8e19b8966a3d81127e00ed42fa8704dc96f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 16 14:09:12 2010 +0200

    Added gcd(), lcm() and cofactors() methods to Rational

    In [1]: Rational(2,3).gcd(Rational(4,9))
    Out[1]: 2/9

    In [2]: Rational(2,3).lcm(Rational(4,9))
    Out[2]: 4/3

    In [3]: Rational(2,3).cofactors(Rational(4,9))
    Out[3]: (2/9, 3, 2)

commit 1b5cd192d863ed2f311160f73dc8b5983a9d2002
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 9 20:03:52 2010 +0200

    Added symbolic capabilities to factor()

    If the input expression to factor() is not an instance of Poly
    class and generators weren't specified, then factor won't expand
    the expression and will factor its components, e.g.:

    In [1]: factor((x**2 + 4*x + 4)**10000000/(x**2 + 1), extension=I)
    Out[1]:
           20000000
    (2 + x)
    ───────────────
    (x + ⅈ)⋅(x - ⅈ)

    (previously required frac=True and hanged anyway).

    This allows us to handle very large and symbolic exponents when the
    input expression is a product or fraction. Cases like the following:

     factor((x + y)**100*z**2 + 2*(x + y)**100*z + (x + y)**100)

    are still not supported (the above will be expanded(!) first).

commit 175084cd7997196bd2ee5978fa947fa9d6d567e7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Aug 8 21:58:25 2010 +0200

    Added {add,sub,mul,quo,exquo}_ground methods to Poly

commit 63053c2f7f781f6cbdc79195675c95175c7c639e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Aug 8 13:14:01 2010 +0200

    Disallow 'polys' flag in factor()

commit dd7f27905eb54c832b9852b26a137990dcc37936
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Aug 8 10:43:46 2010 +0200

    Fixed __eq__ and __ne__ in PolynomialRing and FractionField

commit 8158981fc00718bb1d0ac0b65f2128059b26ae6a
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Apr 2 17:56:06 2010 -0600

    Recoded dmp_zero_p to be non-recursive

    A simple cProfile.run('integrate(x**2*exp(x)*sin(x), x)', sort=1)
    reveals that most of the time is spent in dmp_zero_p for this integral.
    However, it was coded recursively, when it is trivial to code it
    non-recursively. This makes it faster:

    In [11]: def rec_dmp_zero_p(f, u): # this is the old version
        if not u:
            return not f
        else:
            if len(f) == 1:
                return rec_dmp_zero_p(f[0], u - 1)
            else:
       ....:             return False
       ....:
       ....:

    In [18]: def non_rec_dmp_zero_p(f, u): # this is the new version
       ....:     while u:
       ....:         if len(f) != 1:
       ....:             return False
       ....:         f = f[0]
       ....:         u -= 1
       ....:     return not f
       ....:

    In [19]: f = [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[-3
       ....: ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

    In [24]: u = 46

    In [25]: rec_dmp_zero_p(f, u)
    Out[25]: False

    In [26]: non_rec_dmp_zero_p(f, u)
    Out[26]: False

    In [27]: g = [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
       ....: ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

    In [28]: rec_dmp_zero_p(g, u)
    Out[28]: True

    In [29]: non_rec_dmp_zero_p(g, u)
    Out[29]: True

    In [30]: %timeit rec_dmp_zero_p(f, u)
    10000 loops, best of 3: 23.8 us per loop

    In [31]: %timeit non_rec_dmp_zero_p(f, u)
    100000 loops, best of 3: 14.3 us per loop

    In [32]: %timeit rec_dmp_zero_p(g, u)
    10000 loops, best of 3: 22.8 us per loop

    In [33]: %timeit non_rec_dmp_zero_p(g, u)
    100000 loops, best of 3: 15.1 us per loop

    And in the end, we find that the integral runs a little faster:

    Before:

    In [1]: %timeit integrate(x**2*exp(x)*sin(x), x)
    1 loops, best of 3: 7.49 s per loop

    After:

    In [1]: %timeit integrate(x**2*exp(x)*sin(x), x)
    1 loops, best of 3: 6.27 s per loop

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 0601dace37c581c452ab5b6c649a282222911a04
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Aug 7 18:03:32 2010 +0200

    Use terms_gcd() to simplify factorization procedure

    In [1]: %time a = factor(x**500 - 1)
    CPU times: user 1.66 s, sys: 0.01 s, total: 1.67 s
    Wall time: 1.87 s

    In [2]: %time a = factor(x**700 - x**200)
    CPU times: user 1.80 s, sys: 0.01 s, total: 1.81 s
    Wall time: 1.87 s

    Previously [2] was several times slower.

commit 9b2307fab06858a16661d5af317451f349364f47
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Aug 7 11:44:59 2010 +0200

    Fix flags issues in {gcd,lcm}_list(), reduced() and groebner()

commit 8be20e761478f448467efae1ddce404c47bdf328
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Aug 7 10:39:21 2010 +0200

    Added support for iterable containers in gcd() and lcm()

    In [1]: gcd([x**3 - 1, x**2 - 1, x**2 - 3*x + 2])
    Out[1]: x - 1

    In [2]: lcm([x**3 - 1, x**2 - 1, x**2 - 3*x + 2])
    Out[2]:
     5    4      3    2
    x  - x  - 2⋅x  - x  + x + 2

commit 1b02f241b33660af6f029da55afd299f908293db
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Aug 7 09:33:22 2010 +0200

    Pre-process (None,) gens to () in Gens.preprocess()

commit ba0f87a2f0c69311436b31876500800a8b8269a9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Aug 6 22:47:08 2010 +0200

    Removed gcd(), lcm() etc. from FiniteField

commit f4354d49a7df7c1ff0c08824a2372de522a50a31
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Aug 6 20:00:51 2010 +0200

    Allow customized GCD algorithm in content() and primitive()

commit b3bc57d3a85402271682a824d94b51214ba9361c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Aug 6 02:50:53 2010 +0200

    Be more strict about coefficient types in factortools.py

commit 282fa60468f365e2409a51af18dfd6a0ea0107ed
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Aug 6 00:15:05 2010 +0200

    Make ExactQuotientFailed exception more pretty at top-level

    In [1]: pquo(x**2 + 1, 2*x - 4)
    (...)
    ExactQuotientFailed: -4 + 2*x does not divide 1 + x**2

commit 3b63cedf3aba15d284430dc817391e0a45f8c951
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 21:39:41 2010 +0200

    Don't use AttributeError in sympy/polys/polytools.py

commit 660745e06cbdcf8da889a4ea64be8967cb6aa8c5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 20:50:21 2010 +0200

    Improved docstrings and doctests in sympy/polys/polytools.py

commit ed13b69b564f814140bd56a23f9c39eeae61bcf7
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 29 20:02:28 2010 -0600

    Add doctests to all user functions in sympy/polys/polytools.py

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 15721c17082e9d388bc581f494ea7168dbb33181
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 27 22:09:58 2010 -0600

    Cleaned up doctests in densebasic.py and galoistools.py

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit b0202be9a4a2ca311dbabcc83fbe216c4b943a55
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 27 22:09:58 2010 -0600

    Add doctests to all methods of Poly in sympy/polys/polytools.py

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 526ddf3b9072403052ca1fce95beb12492e82c93
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 13:06:08 2010 +0200

    Fixed syntax error in test_pickling.py

commit c2a0e2bd8ab691557f6edb81129f7b963c51a4b5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 13:05:11 2010 +0200

    Fixed domains for Python 2.4/2.5

commit 7a711d85002224ae491e22ee5174aaf554fbf48f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 12:46:08 2010 +0200

    Fixed problem with coefficient propagation in ratint()

    In [1]: from sympy.integrals.rationaltools import ratint

    In [2]: ratint(y/(1 - y**2), y)
    Out[2]:
        ⎛     2⎞
    -log⎝1 - y ⎠
    ────────────
         2

commit 7dab8c3de3b5204e140cbb5fcd7126271f0a881b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 10:43:19 2010 +0200

    Generalized a test in test_solvers.py

commit 2210fa60c30fe848def2142b8cdfa25cbde7f05f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 10:42:23 2010 +0200

    Fixed ratsimp() to work with new reduced()

commit ff40aef0ac1801740bcf5ee518f85db2b54c470b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 5 09:41:30 2010 +0200

    Fixed int(Rational(-1, 2))

    Previously

    In [1]: int(Rational(-1, 2))
    Out[1]: -1

    but

    In [1]: from fractions import Fraction

    In [2]: int(Fraction(-1, 2))
    Out[2]: 0

    In [3]: from gmpy import mpq

    In [4]: int(mpq(-1, 2))
    Out[4]: 0

    In [5]: int(-0.5)
    Out[5]: 0

    so now

    In [6]: int(Rational(-1, 2))
    Out[6]: 0

commit 5cd73c98cf2b867b7bfff4dbe47c533bee36ff99
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 4 15:54:39 2010 +0200

    Fixed any(), all() problems in polys

commit ec6b98a2c7a0ab3ce280c2ad9fd292ade1b45f3a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 4 15:28:44 2010 +0200

    Fixed and improved doctests in polyoptions.py

commit 136998fa4213037c37cc5af8461c3d441f4c157b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 4 15:17:35 2010 +0200

    Fixed and improved doctests in polyfuncs.py

commit 7cf570ca8d1a0e6d0392da1910fe6dc2b5128ced
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 4 13:31:03 2010 +0200

    Split densetools.py (added euclidtools.py and sqfreetools.py)

commit 0c51d03961a426bc5fb7a7445eaa34b4b281cafa
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 3 12:46:07 2010 +0200

    Moved dup_revert() to densetools.py

commit af238b0ad2ef9d215cb9df33c79ef060df3664e5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 3 10:15:33 2010 +0200

    Added functions for computing Euclidean and primitive PRS

commit 00c848cf0e99a014b86cd0af8b77a5195eb16354
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 31 23:18:22 2010 +0200

    Cleaned up docstrings in galoistools.py

commit f66b1b7f74ef2d4648a5c94b4dfb9dd36010b7ee
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 22 16:32:18 2010 -0600

    Added doctests to all functions in sympy/polys/galoistools.py

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 82509159a6da39c14e1325c1f9f14461cc9e6b7c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 24 13:57:21 2010 +0200

    Fixed and improved doctests in densebasic.py

commit dcbdb349b3c440959ce7ef117f12789ff2b78182
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 24 12:41:17 2010 +0200

    Refactored doctests in densearith.py

commit e53a7a1797271b4758885cbcb46438ed4954168b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 24 12:40:30 2010 +0200

    Use sstr() in ExactQuotientFailed exception

commit f1b959c18bc5ea34512bcb99ecaf5348b279bc87
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 21 22:28:45 2010 -0600

    Add doctests to all functions in sympy/polys/densearith.py

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 00d225d1af53858eb66bb616389ecfc8fef35228
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed May 26 21:54:55 2010 -0600

    Print the polys ground types when testing

    We need to be testing all three ground types (SYMPY_GROUND_TYPES={gmpy,
    python, sympy}), so this serves as a reminder, as well as helps to debug
    test failures.

    running test
    ============================= test process starts ==============================
    executable:   /sw/bin/python  (2.6.5-final-0)
    ground types: gmpy

    sympy/assumptions/tests/test_assumptions_2.py[6] ......                     [OK]

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit cdf939d691774c7754f79c161318c1e9917e6bcf
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 23 22:20:54 2010 +0200

    Add doctests to all functions in sympy/polys/densetools.py

    densetools.py now passes the ./bin/coverage_doctest test.
    Originally written by Aaron Meurer. Cleaned up, improved
    readability and added docstrings for new functions.

commit 741f046ab534fb9d95d338da0ff9af7843e8f648
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed May 19 00:23:14 2010 -0600

    Add doctests for all functions in sympy/polys/densebasic.py

    Now the file completely passes the coverage_doctest.py test.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit cc3110d4e1c80f7d4fcd5657e3fa4e236f3ac973
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 23 22:38:11 2010 +0200

    Added Domain.map to construct examples faster

commit 15fde60b8351efba913b390c49a1b2b4b212298a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 23 22:28:33 2010 +0200

    Added mpz and mpq types to str printer

commit 15b34371affef39dbcc10f2a14c3a3d2e6003e2f
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 20 15:15:43 2010 -0600

    Fix dmp_ff_ground_content([[]], 1, QQ) == QQ(0)

    Previously it was only testing if not f instead of if dmp_zero_p(f).
    But I believe that [[]], etc. should have 0 content over QQ. A test
    was added.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 9c595f19cc5272f377b9457b28cc5780b65562da
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed May 19 00:05:05 2010 -0600

    Small changes to polys/densebasic.py

    Take advantage of unused variables and reformat logic to read better.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit bd21f080deb464b609c337744eb6916c3dd30284
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue May 18 16:14:24 2010 -0600

    Write tests for untested functions dup_from_sympy and dmp_from_sympy

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit d5c81be130a3eaace7978a8da50971e3c30a38d8
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue May 18 16:12:51 2010 -0600

    Rewrite dmp_ground_p() to be non-recursive

    As before, this makes it faster:

    Recursive:
    In [23]: %timeit dmp_ground_p([[[[[[[[[[[[[[2]]]]]]]]]]]]]], 2, 13)
    100000 loops, best of 3: 14.8 us per loop

    Non-recursive:
    In [3]: %timeit dmp_ground_p([[[[[[[[[[[[[[2]]]]]]]]]]]]]], 2, 13)
    100000 loops, best of 3: 9.19 us per loop

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit c2e3ad7c862039041c47dd90f1e26f32ca7d6127
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon May 17 21:13:45 2010 -0600

    Make dmp_ground_LC and dmp_ground_TC non-recursive

    As with the changes in a previous commit, this makes the functions
    slightly faster, especially for highly nested polynomials, as well as
    the code easier to understand.  For example:

    Recursive version:
    In [12]: %timeit dmp_ground_LC([[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]], 15, ZZ)
    100000 loops, best of 3: 13.8 us per loop

    Non-recursive version:
    In [10]: %timeit dmp_ground_LC([[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]], 15, ZZ)
    100000 loops, best of 3: 10.3 us per loop

    dmp_ground_TC is exactly the same symmetrically as dmp_ground_LC.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit edcce30fa446b9eaa3486423afbc9c80f5d39afd
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Apr 2 20:10:43 2010 -0600

    Rewrite dmp_zero, dmp_ground, and dmp_nest to be non-recursive

    Looking closer at the file, I saw several other functions that were
    written recursively, but were easy to convert into non-recursive
    equivalents.  In particular, dmp_zero, dmp_ground, and dmp_nest were all
    easy to convert.  Other recursive ones that I did not change were
    dmp_from_dict, dmp_raise, dmp_apply_pairs because I couldn't figure out
    how to do it.  If you are clever enough to convert them, I am sure they
    will be faster, but I am not right now.

    Here is the full scoop.  The non-recursive versions run 2-3 times faster
    than their recursive variants (not to mention the fact that they are
    maximum recursion error proof):

    == dmp_zero ==

    In [1]: from sympy.polys.densebasic import dmp_zero

    In [2]: dmp_zero(4)
    Out[2]: [[[[[]]]]]

    In [3]: dmp_zero(0)
    Out[3]: []

    In [5]: def non_rec_dmp_zero(u):
       ...:     r = []
       ...:     for i in xrange(u):
       ...:         r = [r]
       ...:
       ...:     return r
       ...:

    In [6]: non_rec_dmp_zero(4)
    Out[6]: [[[[[]]]]]

    In [8]: non_rec_dmp_zero(0)
    Out[8]: []

    In [9]: %timeit dmp_zero(100)
    10000 loops, best of 3: 85.9 us per loop

    In [10]: %timeit non_rec_dmp_zero(100)
    10000 loops, best of 3: 58 us per loop

    == dmp_ground==

    In [2]: from sympy.polys.densebasic import dmp_ground

    In [4]: from sympy.polys.densebasic import dmp_zero

    In [11]: def non_rec_dmp_ground(c, u):
        if not c:
            return dmp_zero(u)
        for i in xrange(u + 1):
            c = [c]
        return c
       ....:

    In [17]: dmp_ground(1, 2)
    Out[17]: [[[1]]]

    In [18]: non_rec_dmp_ground(1, 2)
    Out[18]: [[[1]]]

    In [19]: dmp_ground(1, -2)
    Out[19]: 1

    In [20]: non_rec_dmp_ground(1, -2)
    Out[20]: 1

    In [21]: non_rec_dmp_ground(1, 0)
    Out[21]: [1]

    In [22]: dmp_ground(1, 0)
    Out[22]: [1]

    In [23]: %timeit dmp_ground(2, 100)
    10000 loops, best of 3: 75.8 us per loop

    In [24]: %timeit non_rec_dmp_ground(2, 100)
    10000 loops, best of 3: 35.4 us per loop

    == dmp_nest ==

    In [13]: dmp_nest(1, 2, ZZ)
    Out[13]: [[[1]]]

    In [14]: dmp_nest([1], 2, ZZ)
    Out[14]: [[[1]]]

    In [15]: dmp_nest([1, 2], 2, ZZ)
    Out[15]: [[[1, 2]]]

    In [23]: def non_rec_dmp_nest(f, l, K):
        if not isinstance(f, list):
            return dmp_ground(f, l)
        for i in xrange(l):
            f = [f]
        return f
       ....:

    In [15]: non_rec_dmp_nest(1, 2, ZZ)
    Out[15]: [[[1]]]

    In [21]: non_rec_dmp_nest([1], 2, ZZ)
    Out[21]: [[[1]]]

    In [22]: non_rec_dmp_nest([1, 2], 2, ZZ)
    Out[22]: [[[1, 2]]]

    In [13]: %timeit dmp_nest([1, 2, 3], 100, ZZ)
    10000 loops, best of 3: 103 us per loop

    In [14]: %timeit non_rec_dmp_nest([1, 2, 3], 100, ZZ)
    10000 loops, best of 3: 37.6 us per loop

    By the way, isinstance(i, list) is slightly faster than type(i) is list
    (which was used in the old recursive function), and recommended over it
    in PEP 8:

    In [1]: i = range(100)

    In [2]: %timeit isinstance(i, list)
    1000000 loops, best of 3: 405 ns per loop

    In [3]: %timeit type(i) is list
    1000000 loops, best of 3: 686 ns per loop

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 753a0970d69f3ebea28bd41e528af5e953d2ea9c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 23 12:43:35 2010 +0200

    Added a function for constructing interpolating polynomials

    In [1]: interpolate([1,4,9,16], x)
    Out[1]:
     2
    x

    In [2]: interpolate([1,4,9,17], x)
    Out[2]:
                 3
         11⋅x   x
    -1 + ──── + ──
          6     6

    In [3]: _2.subs(x, 1)
    Out[3]: 1

    In [4]: _2.subs(x, 2)
    Out[4]: 4

    In [5]: _2.subs(x, 3)
    Out[5]: 9

    In [6]: _2.subs(x, 4)
    Out[6]: 17

commit 367cec4732be964d717bfe9dc311bd8825021cb4
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 22 22:26:36 2010 +0200

    Moved symmetrize() and horner() to a separate file

commit 8cb1a9c1a3ae01140a7343cf2ad7cf58f87329bc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 22 22:13:56 2010 +0200

    Refactored polynomial initialization code

commit baf4eeac456427824e64612ea059bbb0bea0d569
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 21 21:05:24 2010 +0200

    Refactored polynomials manipulation functions (#1899)

    In [1]: factor(3 + x - x*(1 + x) + x**2)
    Out[1]: 3

    In [2]: factor(3 + x - x*(1 + x) + x**2, frac=True)
    Out[2]: 3

    In [3]: factor(3 + x - x*(1 + x) + x**2, xfrac=True)
    (...)
    OptionError: 'xfrac' is not a valid option

    In [4]: factor(3 + x - x*(1 + x) + x**2, all=True)
    (...)
    FlagError: 'all' flag is not allowed in this context

commit ff467bd37cd39b5c5e52ac4dcfa66ceed24a3aae
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 21 14:06:49 2010 +0200

    Implemented parallel constructor for polynomials

    As a side effect we can compute Groebner bases over finite fields:

    In [1]: F = [3*x**2 + y*z - 5*x - 1, 2*x + 3*x*y + y**2, x - 3*y + x*z - 2*z**2]

    In [2]: G = groebner(F, x, y, z, modulus=7, symmetric=False)

    In [3]: G
    Out[3]:
    ⎡                     2      3      4    5
    ⎣1 + x + y + 3⋅z + 2⋅z  + 2⋅z  + 6⋅z  + z ,

                2      2      3      4      5      6
     1 + 3⋅y + y  + 6⋅z  + 3⋅z  + 3⋅z  + 3⋅z  + 4⋅z ,

                              3    4    6
     1 + 4⋅y + 4⋅z + y⋅z + 4⋅z  + z  + z ,

                2      3      4      5      6    7⎤
     6 + 6⋅z + z  + 4⋅z  + 3⋅z  + 6⋅z  + 3⋅z  + z ⎦

commit 8c6b34eb368bef3dd098580db4acea431863a2db
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 21 01:34:42 2010 +0200

    Use options manager instead of keyword arguments

commit e90b8cff378ea8cad77b900a8449a0fd5777be75
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 20 21:56:06 2010 +0200

    Use options manager in _sort_gens()

commit e685c75b4c7b2c3bf1f68c76e18c09824c1f929e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 20 19:13:20 2010 +0200

    Added tests for __r*__ methods in Poly

commit be4ab2f7968218d8f83abcc2366689b54306f3df
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 20 16:44:13 2010 +0200

    Removed GFP and SDP representations

commit 3a1e2d278121938db1ae88071035220ec62459f1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 20 16:38:47 2010 +0200

    Don't use GFP representation in Poly

commit 461925a45c9775c561008599bcbbff6c3eb1a21b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 20 13:00:26 2010 +0200

    Make {dup,dmp}_{mul,sqr,diff,sqf*} aware of FiniteField

commit 0680155a22cfb764f5bc533f7f8ee0e6fd630591
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 20 09:20:12 2010 +0200

    Allow finite fields in dup_factor_list()

    In [1]: from sympy.polys.factortools import *

    In [2]: K = FF(2)

    In [3]: dup_factor_list([K(1), K(0), K(1)], K)
    Out[3]: (1 mod 2, [([1 mod 2, 1 mod 2], 2)])

commit 65c141712f407f29b9036992cc79f0a2c980abfc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 20 01:04:24 2010 +0200

    Cleaned up sympy.polys options manager

commit 05c84fd94f309767d5bce8660c93856c2d6d2063
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 20:54:08 2010 +0200

    Added pretty printer for FiniteField

commit 5744bcf2e952dd1b18b988d1c79f51437f536dbe
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 20:42:03 2010 +0200

    Preliminary implementation of FiniteField

commit d57006fdc6a688fa31140173f7b760f68e49f096
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 16:14:07 2010 +0200

    Cleaned up IntegerRings a little bit

commit 176d1ba022fbbdd7a73492c7f4b4b07bbef22d3d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 15:53:01 2010 +0200

    Implemented factorial() method in Integer class

commit 70ce3b69c8d453b7c5c5fd662bdb11ac262e2ae1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 15:46:29 2010 +0200

    Implemented sqrt() method in Integer class

commit e7de7602e65477077c74e3f76c86d249aa84f46a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 12:18:57 2010 +0200

    Pretty print domains, e.g. ZZ, QQ, ZZ[x, y] ...

    In [1]: ZZ
    Out[1]: ℤ

    In [2]: QQ
    Out[2]: ℚ

    In [3]: ZZ[x,y,z]
    Out[3]: ℤ[x, y, z]

    In [4]: ZZ[x,y,1/z]
    Out[4]:
     ⎡      1⎤
    ℤ⎢x, y, ─⎥
     ⎣      z⎦

commit a98d48615654b6a313f6acd901c7ee7e19c5c097
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 10:18:31 2010 +0200

    Fixed docstring in integerring.py

commit 76ef81b307aec43061e3adc57be6d726e492b75e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 10:16:30 2010 +0200

    Renamed dup_taylor() to dup_shift()

commit f13db68ad55060aac028e00fc9db05854059b5a2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 19 07:37:54 2010 +0200

    Sort properly indexed generators in polys

commit c65a7204510d1a120b582438cdfa9e0543b2496d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 18 22:27:28 2010 +0200

    Trivial implementation of modulus argument in expand()

    In [1]: expand((x + y)**11, modulus=11)
    Out[1]:
     11    11
    x   + y

    In [2]: expand((x + sqrt(2)*y)**11, modulus=11)
    Out[2]:
     11        ⎽⎽⎽  11
    x   + 10⋅╲╱ 2 ⋅y

commit 01f7d72d4e00dfe19ef34bdb722e1e662dfc7b68
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 18 18:08:30 2010 +0200

    Implemented function for constructing domains

    In [1]: construct_domain([1, 2, 3])
    Out[1]: (ZZ, [1, 2, 3])

    In [2]: construct_domain([1, 2, S(1)/3])
    Out[2]: (QQ, [1/1, 2/1, 1/3])

    In [3]: construct_domain([1, 2, x])
    Out[3]: (ZZ[x], [DMP([mpz(1)], ZZ),
                     DMP([mpz(2)], ZZ),
                     DMP([mpz(1), mpz(0)], ZZ)])

    In [4]: construct_domain([1, 2, x/2])
    Out[4]: (QQ[x], [DMP([mpq(1,1)], QQ),
                     DMP([mpq(2,1)], QQ),
                     DMP([mpq(1,2), mpq(0,1)], QQ)])

    In [5]: construct_domain([1, 2, 2/x])
    Out[5]: (ZZ(x), [DMF(([mpz(1)], [mpz(1)]), ZZ),
                     DMF(([mpz(2)], [mpz(1)]), ZZ),
                     DMF(([mpz(2)], [mpz(1), mpz(0)]), ZZ)])

    In [6]: construct_domain([1, 2, sqrt(2)])
    Out[6]: (EX, [EX(1), EX(2), EX(2**(1/2))])

    In [7]: construct_domain([1, 2, sqrt(2)], extension=True)
    Out[7]:
    (QQ<2**(1/2)>, [ANP([mpq(1,1)], [mpq(1,1), mpq(0,1), mpq(-2,1)], QQ),
                    ANP([mpq(2,1)], [mpq(1,1), mpq(0,1), mpq(-2,1)], QQ),
                    ANP([mpq(1,1), mpq(0,1)], [mpq(1,1), mpq(0,1), mpq(-2,1)], QQ)])

commit 0efae9b1b4bfb0c0d3999420d2da9c029c4c7592
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 18 17:49:09 2010 +0200

    Added a function for constructing polynomials in parallel

commit 069ea1b8ade3b02307005569454650abfed133bd
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 18 12:14:35 2010 +0200

    Added a function for horizontally slicing polynomials

    In [1]: f = Poly(x**4 + 2*x**3 + 3*x**2 + 4)

    In [2]: f
    Out[2]: Poly(x**4 + 2*x**3 + 3*x**2 + 4, x, domain='ZZ')

    In [3]: f.slice(0, 0)
    Out[3]: Poly(0, x, domain='ZZ')

    In [4]: f.slice(0, 1)
    Out[4]: Poly(4, x, domain='ZZ')

    In [5]: f.slice(0, 2)
    Out[5]: Poly(4, x, domain='ZZ')

    In [6]: f.slice(0, 3)
    Out[6]: Poly(3*x**2 + 4, x, domain='ZZ')

    In [7]: f.slice(0, 4)
    Out[7]: Poly(2*x**3 + 3*x**2 + 4, x, domain='ZZ')

    In [8]: f.slice(2, 4)
    Out[8]: Poly(2*x**3 + 3*x**2, x, domain='ZZ')

commit ce25e3042c875cc2c13920f7d16ec31648e7c2b3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 17 19:14:02 2010 +0200

    Implemented greatest factorial factorization

    Greatest factorial factorization is a unique decomposition of
    a monic polynomial into a product of falling factorials, e.g.:

    In [1]: f = x**5 + 2*x**4 - x**3 - 2*x**2

    In [2]: gff_list(f)
    Out[2]: [(x, 1), (2 + x, 4)]

    In [3]: Mul(*[ ff(g, k) for g, k in _ ])
    Out[3]:
      2
    -x ⋅(1 + x)⋅(1 - x)⋅(2 + x)

    In [4]: expand(_)
    Out[4]:
         2    3      4    5
    - 2⋅x  - x  + 2⋅x  + x

    In [5]: _ == f
    Out[5]: True

    GFF is very similar to square-free decomposition, but instead
    of working with differential operator it works with difference
    operator. GFF is mostly used in symbolic summation algorithms.

commit 438097b9004357bc2423e197818664b53c20c5cc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 17 10:44:46 2010 +0200

    Added a function computing f**(-1) mod x**n

    In [1]: series(cos(x), x, 0, 8)
    Out[1]:
         2    4     6
        x    x     x
    1 - ── + ── - ─── + O(x**8)
        2    24   720

    In [2]: _.removeO()
    Out[2]:
         2    4     6
        x    x     x
    1 - ── + ── - ───
        2    24   720

    In [3]: Poly(_).revert(8)
    Out[3]: Poly(61/720*x**6 + 5/24*x**4 + 1/2*x**2 + 1, x, domain='QQ')

    In [4]: _.as_basic() + O(x**8)
    Out[4]:
         2      4       6
        x    5⋅x    61⋅x
    1 + ── + ──── + ───── + O(x**8)
        2     24     720

    In [5]: series(1/cos(x), x, 0, 8)
    Out[5]:
         2      4       6
        x    5⋅x    61⋅x
    1 + ── + ──── + ───── + O(x**8)
        2     24     720

commit 6846b1e097559d8d79271b739ac5fca8341b002c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 17 10:34:20 2010 +0200

    Implemented Domain.revert() for computing elt**(-1)

commit c1ade65598c6fb511a5b761296b5c7e4e8d2274e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 23:56:28 2010 +0200

    Cleaned up threded() decorator (added xthreaded())

commit d9e2df25314f386bfa6286e0f68de986c9229bbe
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 23:53:37 2010 +0200

    Added a function for properly wrapping functions

commit 89221bdac1e5705fa5b78df3644f5319dd929898
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 03:55:21 2010 +0200

    Split algebratools.py into polys/domains

commit b14ef9819728b9b27bf84597e3246fa6ee481e28
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 19:16:32 2010 +0200

    Implemented ifactorial() in sympy.core.numbers

commit 8df0cb2631949f9ddf5cb79908429cb5a71563dc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 03:15:08 2010 +0200

    Fixed test in polys/tests/test_polyroots.py

commit 5f60c0489ae839ed23e5c19c060391352112bf37
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 03:08:19 2010 +0200

    Started cleaning domains by renaming Algebra to Domain

commit c3efc7ba0fcb63affe8ea8e2875f1fc079917574
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 01:57:46 2010 +0200

    Refactored partial fraction decomposition

    Now apart() is a part of polynomials manipulation module. The
    default decomposition method is undetermined coefficients and
    full partial fraction decomposition is a fallback (full=True).

commit f216ee93f0b4bdc03018f3d6eb77bf2f5d4836ee
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 15 23:54:59 2010 +0200

    Partial fractions via undetermined coefficients method

    In [1]: from sympy.polys.partfrac import *

    In [2]: f = (2*x - 3)/((x - 1)*(x**8 - x**5 - 2*x + 1))

    In [3]: p, q = map(Poly, f.as_numer_denom())

    In [4]: apart_undetermined_coeffs(p, q)
    Out[4]:
          5    6    7
     4 - x  - x  - x      1
    ───────────────── - ─────
               5    8   1 - x
    1 - 2⋅x - x  + x

commit 2ec5372201832b3689d105fba5e54f1eb2b41cb5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 16 02:46:29 2010 +0200

    Added __div__ and __rdiv__ methods to Poly

commit 978c19841562638ce47149601dddc8e68c0e87de
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 15 23:23:25 2010 +0200

    Added inject() method to Algebra

    In [1]: ZZ.inject(x, y, z)
    Out[1]: ZZ[x,y,z]

    In [2]: ZZ[x].inject(y, z)
    Out[2]: ZZ[x,y,z]

commit 072435032b78b69d151ab7cc9ce16150a2e6d480
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 15 17:45:36 2010 +0200

    Normalize sign of leading coefficients in cancel()

commit b90d05a78317d96b5effc725ab884d449214b406
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 15 17:30:27 2010 +0200

    Added take() function to sympy/utilities

    In [1]: X = numbered_symbols()

    In [2]: take(X, 5)
    Out[2]: [x₀, x₁, x₂, x₃, x₄]

    In [3]: take(X, 5)
    Out[3]: [x₅, x₆, x₇, x₈, x₉]

commit ef5eac83f6905de46ce7d4b340dd8071cec5ec3c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu May 13 17:29:13 2010 -0700

    Added a simple benchmark for Groebner bases

commit 3423a6b01501f84d667f286bae70eaf05740eaff
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 15 14:04:21 2010 +0200

    Added simple subs() function to Poly class (#1974)

    In [1]: Poly(x*y).subs(x, z)
    Out[1]: Poly(z*y, z, y, domain='ZZ')

    In [2]: Poly(x*y).subs(x, 1)
    Out[2]: Poly(y, y, domain='ZZ')

    In [3]: Poly(x*y, x).subs(y, x)
    Out[3]:
     2
    x

    In [4]: Poly(x*y, x).subs(x, y)
    Out[4]:
     2
    y

commit ecd1432ed4582fd99383ccd33e1a91ad0a57ba6e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 15 13:59:04 2010 +0200

    New Poly.eval() syntax (unified with other functions)

    In [1]: Poly(x*y).eval(1)
    Out[1]: Poly(y, y, domain='ZZ')

    In [2]: Poly(x*y).eval(x, 1)
    Out[2]: Poly(y, y, domain='ZZ')

    In [3]: Poly(x*y).eval(y, 1)
    Out[3]: Poly(x, x, domain='ZZ')

commit cea5ba379c4f5a2d7c1a2104619dec6984f92955
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 14 23:16:56 2010 +0200

    Improved exception for factor(x + y, modulus=3)

commit af4c122689a31a1e8546b9bb73bbcb03578c6ada
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 14 20:59:29 2010 +0200

    Fixed srepr() printer (#1348)

commit 693422ab5dc1a08d5b274121ed5700d25827ee85
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 14 18:00:13 2010 +0200

    Fixed var() to work with cls=Function

    In [1]: var('f', cls=Function)
    Out[1]: f

    In [2]: type(_)
    Out[2]: <class 'sympy.core.function.FunctionClass'>

    In [3]: var('f,g,h', cls=Function)
    Out[3]: (f, g, h)

commit 227e5f09ccc444505e9c113da67c537089ebbd5a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 14 16:08:39 2010 +0200

    Fixed example in sympy/solvers/ode.py

commit ab6ae9e1832fcdf04a82626b7ab3630a4ccaa9b9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 14 15:24:53 2010 +0200

    Dropped old-style symbols()

    Now symbols('xyz') means one symbol 'xyz', not three separate:

    In [1]: symbols('xyz')
    Out[1]: xyz

    In [2]: symbols('x,y,z')
    Out[2]: (x, y, z)

    In [3]: symbols('x y z')
    Out[3]: (x, y, z)

    In [4]: symbols('x')
    Out[4]: x

    In [5]: symbols('x,')
    Out[5]: (x,)

    In [6]: symbols(('x', 'y', 'z'))
    Out[6]: (x, y, z)

    In [7]: symbols(['x', 'y', 'z'])
    Out[7]: [x, y, z]

    In [8]: symbols(['x', 'y', 'z:5'])
    Out[8]: [x, y, (z₀, z₁, z₂, z₃, z₄)]

    In [9]: symbols('x,y,z:5')
    Out[9]: (x, y, z₀, z₁, z₂, z₃, z₄)

    In [10]: symbols('x', seq=True)
    Out[10]: (x,)

    In [11]: symbols('f', cls=Function)
    Out[11]: f

    In [12]: type(_)
    Out[12]: <class 'sympy.core.function.FunctionClass'>

commit 9799268ef23aa2ab9f04ac24d0b02693041a3710
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 3 22:36:35 2010 +0200

    Use only new-style symbols()

commit c036912cb1ce43aadfb3a28d6ceb8af97c34b17e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 5 17:10:29 2010 +0200

    Changed 'function' to 'cls' in numbered_symbols()

commit d6c7629601a672bbe7949fdf0426c18f9359b3c0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 3 21:03:26 2010 +0200

    Added range syntax to symbols() and var()

    To simplify creation of numbered symbols, a new syntax was added to
    symbols() and var() functions, e.g.:

    In [1]: var('x0:10')
    Out[1]: (x₀, x₁, x₂, x₃, x₄, x₅, x₆, x₇, x₈, x₉)

    In [2]: var('x5:10')
    Out[2]: (x₅, x₆, x₇, x₈, x₉)

    In [3]: var('x:5')
    Out[3]: (x₀, x₁, x₂, x₃, x₄)

    In [4]: var('x:5,y3:7')
    Out[4]: (x₀, x₁, x₂, x₃, x₄, y₃, y₄, y₅, y₆)

    Note this works only with new-style symbols(), i.e. each_char=False.

commit ec96655b02398b85f8da632e936e591ee8ac57d6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 6 15:59:24 2010 +0200

    Implemented sparse polynomial representation

commit 9e27f158dd7006636743d2c01401a56cdfc16ce4
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 4 00:17:58 2010 +0200

    Fix polys to work with options managers

commit e1717654aafef18de0d556411707c4f81494e479
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 30 16:22:29 2010 +0200

    Implemented option and context managers in polys

commit 7454fdc4ff4bbff2bfc263c1006b4bed41abb45e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jun 2 23:00:29 2010 +0200

    Implemented simple function for measuring execution time

commit 9da8fd930a7f6161f4cf0d9077239bb60facc30e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jun 2 23:07:10 2010 +0200

    Added a high-level function for generating random polynomials

commit b94d6734c2f9f08fff0513d0a90a7170ed1bfca9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri May 28 00:56:24 2010 +0200

    Fixed QQ.convert to work with epsilon numbers

commit 1ec4d80a32793a80cfdda1fd20af57b1175d35f1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed May 26 21:45:18 2010 +0200

    Added dict_merge, a simple function for combining dicts

commit 18d47ec1502e9ab7de3ad2cadca9a4a3ffc2177f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed May 26 21:44:35 2010 +0200

    Don't test DUP class anymore (was remove previously)

commit 291aa458e65ce42fddfe11f2ce8caaa32227fec9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue May 25 22:45:59 2010 +0200

    Fixed integer cache (Integer.__new__, #1946)

commit d810f4d0a1babf3ed8f5e46a264c5e8a233124cc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue May 11 16:22:08 2010 +0200

    Implemented LC(), LM() and LT() functions

commit a4221631aa309b7b10c45cc5e7d423358ef1175d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue May 11 16:19:26 2010 +0200

    Improved speed of Groebner bases algorithm

commit 47e9dccd763f85375139970416b53868bcc026a3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue May 11 16:13:19 2010 +0200

    Implemented split() function for containers

commit c5613dcedb82c54d828eed474eca49e03006f389
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue May 11 16:08:10 2010 +0200

    Extended Point with x, y attributes

commit 86bc930448e4ad5419422b53eaf7ed2b78d3967c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat May 1 20:46:41 2010 +0200

    Fixed trivial bug in Monomial.as_basic()

commit 5410bf0441fbf709af64042f2a29cea62e4a822c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Apr 25 21:07:59 2010 +0200

    Added support for passing multiple gens via 'wrt' keyword

    The 'wrt' keyword now supports multiple generators given
    by a list or tuple, or comma separated values in a string.

    Example:

    In [1]: var('x1,x2,i1,i2,i3')
    Out[1]: (x₁, x₂, i₁, i₂, i₃)

    In [2]: f1 = x1**2 + x2**2

    In [3]: f2 = x1**2*x2**2

    In [4]: f3 = x1**3*x2 - x1*x2**3

    In [5]: G = groebner([f1 - i1, f2 - i2, f3 - i3], wrt='x1,x2')

    In [6]: reduced(x1**7*x2 - x1*x2**7, G, wrt=[x1, x2])[1]
    Out[6]:
                  2
    -i₂⋅i₃ + i₃⋅i₁

    In [7]: _.subs({i1: f1, i2: f2, i3: f3}).expand()
    Out[7]:
       7        7
    x₂⋅x₁  - x₁⋅x₂

    (based on "Gröbner Bases: A Short Introduction for Systems
    Theorists", B. Buchberger, Springer, 2001).

commit ebe9deccd35fff03e19e41466952e8467d0ed33c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 24 01:12:52 2010 +0200

    Added support for term order to some of Poly methods

    In [1]: Poly(x**1*y**7 + 2*x**2*y**3).LC()
    Out[1]: 2

    In [2]: Poly(x**1*y**7 + 2*x**2*y**3).LC('lex')
    Out[2]: 2

    In [3]: Poly(x**1*y**7 + 2*x**2*y**3).LC('grlex')
    Out[3]: 1

commit 3d8eda228138a1237c37919068231ad3ccc3ac50
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 24 01:10:06 2010 +0200

    Implemented Monomial class (supporting monomial_*())

    In [1]: m, n = Monomial(3, 4, 1), Monomial(1, 2, 0)

    In [2]: m*n
    Out[2]: Monomial(4, 6, 1)

    In [3]: m/n
    Out[3]: Monomial(2, 2, 1)

    In [4]: m.gcd(n)
    Out[4]: Monomial(1, 2, 0)

    In [5]: m.lcm(n)
    Out[5]: Monomial(3, 4, 1)

commit 7e74f1d35eb19682de2f9c777170303f35bba823
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 20 18:20:43 2010 +0200

    Removed DUP (Dense Univariate Polynomial) wrappers

commit 41e6bba606d31d4acbf1b768371f84a3d7053e1e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 20 18:15:36 2010 +0200

    Added domain unification to Poly.__eq__, added tests

commit 734d2fa6cab264661205b64fe87cf25bbe2d3bfa
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Apr 18 16:00:01 2010 +0200

     Use pure symbol instead of dummy symbols in numberfields.py

commit b0e781aef0e890ed4d021fca9f28ed0102aa9e4b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 17 12:33:38 2010 +0200

    Use pure symbol instead of dummy symbols in solvers/ode.py

commit e85b44d7d87d0439312efbddec961ce75667c151
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 17 17:55:32 2010 +0200

    Added a singleton symbol different from all other symbols

    Often we can encounter functions, mostly concerning polynomial
    manipulation, that require a single symbol to be passed in their
    argument lists. It's convenient to not force user to pass that
    symbol in certain situations, e.g. to save typing or to simplify
    logic of coded that uses a function of this kind.

    If a symbol is not given explicitly then a function needs to
    construct a new one. For this purpose dummy symbols are used
    to assure that the introduced symbol won't overlap with other
    symbols in the context. This, however, leads to very unpleasant
    behavior, e.g.:

    In [1]: minpoly(sqrt(2)) == minpoly(sqrt(2))
    Out[1]: False

    To overcome this difficulty a commutiative singleton symbol, which
    is different from all other symbols, was introduced, S.Pure or pure
    for short.

    In [1]: pure == x
    Out[1]: False

    In [2]: x == pure
    Out[2]: False

    In [3]: pure**2 + sin(pure) - x*pure*I
    Out[3]:
                       2
    -ⅈ⋅x⋅℘ + sin(℘) + ℘

    In [4]: _.atoms(Symbol)
    Out[4]: set(x, ℘)

    In future, functions like minpoly() will return an expression
    with the pure symbol instead of dummy symbols. This will allow
    more effective experimentation on the user level and simplification
    of the interior of SymPy.

commit 64fa418b5f2812733224afde5f9766d6e8bb285a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 23:09:34 2010 +0200

    Use cancel() on rational part resulting from ratsimp()

commit 3aa151f3cdd9231f553941c97259dfa644a225b7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 22:28:18 2010 +0200

    Removed 'return' statement from integrals/tests/test_risch.py

commit 779bc50449b95c0dfe5340e854b3beb4820c4938
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 22:23:56 2010 +0200

    Added test for issue 1892 (sympy.integrals.rationaltools)

commit daa139ad7ff8d3a48d0765a27f54db4ad334da40
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 22:13:43 2010 +0200

    Allow coercion of elements of ZZ[X] to ZZ(Y)

commit 256bfe56ae778d006545061f631c5ba0360d27c2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 17:16:51 2010 +0200

    Added support for inequalities and systems in solve()

    In [1]: a = Symbol('a', real=True)

    In [2]: solve([Lt(a**2 - 2, 0), Gt(a**2 - 1, 0)], a)
    Out[2]:
    ⎡⎛   ⎽⎽⎽    ⎞  ⎛     ⎽⎽⎽⎞⎤
    ⎣⎝-╲╱ 2 , -1⎠, ⎝1, ╲╱ 2 ⎠⎦

    In [3]: solve([Lt(a**2 - 2, 0), Ne(a**2 - 1, 0)], a)
    Out[3]:
    ⎡⎛   ⎽⎽⎽    ⎞           ⎛     ⎽⎽⎽⎞⎤
    ⎣⎝-╲╱ 2 , -1⎠, (-1, 1), ⎝1, ╲╱ 2 ⎠⎦

commit dc5446e7e6a7b4eb9b49d945d9dfc6589915c1ee
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 17:12:07 2010 +0200

    Added support for solving systems of inequalities

commit 3558cbaae2e648a49e47b2122cb2a1a0cf3f0189
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 17:10:15 2010 +0200

    Added is_Relational and is_Equality to Basic

commit d90b7a9e7f4e1185bd3d3f9b2695183157ed66fc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 17:08:49 2010 +0200

    Allow Real("+/-inf") in Interval.is_{left,right}_unbounded

commit f3812438cefc7fd6d0f2be00a2a1413841caf88d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 11:40:18 2010 +0200

    Take advantage of real_roots() in solve_poly_inequality()

commit bf23537c9538ac3bf53e86270665241719ae4f30
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 11:07:09 2010 +0200

    Implemented function for computing real roots

    The new function, real_roots(), allows computing real
    roots of a univariate polynomial and utilizes RootOf's
    capabilities for finding roots.

    Example:

    In [1]: real_roots(x**3*(x**3 + x + 3))
    Out[1]:
    ⎡      ⎛ 3           ⎞         ⎤
    ⎣RootOf⎝x  + x + 3, 0⎠, 0, 0, 0⎦

    In [2]: real_roots(x**3*(x**3 + x + 3), multiple=False)
    Out[2]:
    ⎡⎛      ⎛ 3           ⎞   ⎞        ⎤
    ⎣⎝RootOf⎝x  + x + 3, 0⎠, 1⎠, (0, 3)⎦

commit eca4c9cc101781de81e557002069c161b7043111
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 11:02:09 2010 +0200

    Allow multiple indices in arguments to RootOf

    Now RootOf allows passing multiple indices to get a list of
    RootOfs for a single polynomial faster. It is also possible
    to set index to None, to get a list of real roots.

    Example:

    In [1]: RootOf(x**3 + x + 1, 0)
    Out[1]:
          ⎛ 3           ⎞
    RootOf⎝x  + x + 1, 0⎠

    In [2]: RootOf(x**3 + x + 1, (0,))
    Out[2]:
    ⎡      ⎛ 3           ⎞⎤
    ⎣RootOf⎝x  + x + 1, 0⎠⎦

    In [3]: RootOf(x**3 + x + 1, (0,1))
    Out[3]:
    ⎡      ⎛ 3           ⎞        ⎛ 3           ⎞⎤
    ⎣RootOf⎝x  + x + 1, 0⎠, RootOf⎝x  + x + 1, 1⎠⎦

    In [4]: RootOf(x**3 + x + 1, (0,1,2))
    Out[4]:
    ⎡      ⎛ 3           ⎞        ⎛ 3           ⎞        ⎛ 3           ⎞⎤
    ⎣RootOf⎝x  + x + 1, 0⎠, RootOf⎝x  + x + 1, 1⎠, RootOf⎝x  + x + 1, 2⎠⎦

    In [5]: RootOf(x**3 + x + 1)
    Out[5]:
    ⎡      ⎛ 3           ⎞⎤
    ⎣RootOf⎝x  + x + 1, 0⎠⎦

    In [6]: _[0].is_real
    Out[6]: True

commit c4c62b6aa43343dcd3bf860a0d6023d4c97d4752
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 13 10:43:43 2010 +0200

    Added a function for grouping elements of a list

    In [1]: group([1, 1, 1, 2, 2, 3])
    Out[1]: [[1, 1, 1], [2, 2], [3]]

    In [2]: group([1, 1, 1, 2, 2, 3], multiple=False)
    Out[2]: [(1, 3), (2, 2), (3, 1)]

commit 41f6d2f0cc4f5e0bdb22d51179b5bfc08c60d4d8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Apr 12 13:25:32 2010 +0200

    Added preliminary support for solving inequalities

    In [1]: from sympy.solvers.inequalities import *

    In [2]: a = Symbol('a', real=True)

    In [3]: solve_poly_inequality((a-2)**2*(a**2 - 1) > 0)
    Out[3]: [(-∞, -1), (1, 2), (2, ∞)]

    In [4]: solve_poly_inequality((a-2)**2*(a**2 - 1) > 0, relational=True)
    Out[4]: a < -1 ∨ 2 < a ∨ (1 < a ∧ a < 2)

commit 38f4df1ffbcf1ae12005a197ba8aaaf166865e09
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Apr 12 12:17:48 2010 +0200

    Added as_relational() method to Interval class

    The new method rewrites an interval as a conjunction of
    inequalities (or, in particular, as an inequality or an
    equation, or a boolean), e.g.:

    In [1]: a = Symbol('a', real=True)

    In [2]: Interval(-2, 3).as_relational(a)
    Out[2]: a ≤ 3 ∧ -2 ≤ a

    In [3]: Interval(-oo, 3).as_relational(a)
    Out[3]: a ≤ 3

    In [4]: Interval(3, 3).as_relational(a)
    Out[4]: a = 3

    In [5]: Interval(-oo, oo).as_relational(a)
    Out[5]: True

commit d0f58cfabd7591255bb9ada4bb653c3360d4eb67
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Apr 12 11:52:52 2010 +0200

    Relational and related classes now support evalf()

commit ceb3348c314d78b12dd341bf85ebd501d4426caa
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Apr 12 11:36:32 2010 +0200

    Added to_exact() method to Poly class

    The new method allows to convert the ground domain from an
    inexact one to an exact one (RR -> QQ), e.g.:

    In [1]: f = Poly(0.1*x)

    In [2]: f.to_exact()
    Out[2]: Poly(1/10*x, x, domain='QQ')

commit ed7c9e6f24116da32493c4a147bdd17448f6f3ea
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 9 11:53:50 2010 +0200

    Added handlers for logic classes in pretty printers

    In [1]: Equivalent(Implies(Or(Not(x), y, z), And(x, 1/y)), Ne(x, y))
    Out[1]:
            ⎛                  ⎛    1⎞⎞
    x ≠ y ≡ ⎜(x ∧ ¬ z ∧ ¬ y) ∨ ⎜x ∧ ─⎟⎟
            ⎝                  ⎝    y⎠⎠

commit 3e88137006a2103ed803d1a6d43378a6dcc68118
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Apr 8 18:14:44 2010 +0200

    Added 'monic' argument to sdp_groebner() (default True)

    By default sdp_groebner() (or top-level groebner()) returns a
    basis with monic polynomials. One can set 'monic' argument
    to False to override this behavior, e.g:

    In [1]: groebner([4*x**2*y**2 + 4*x*y + 1, x**2 + y**2 - 1], x, y)
    Out[1]:
    ⎡                                      2      4            ⎤
    ⎢             3      5      7         y    3⋅y       6    8⎥
    ⎢x + 3⋅y - 7⋅y  + 8⋅y  - 4⋅y , 1/16 - ── + ──── - 2⋅y  + y ⎥
    ⎣                                     2     2              ⎦

    In [2]: factor(_[-1])
    Out[2]:
              4
    ⎛       2⎞
    ⎝1 - 2⋅y ⎠
    ───────────
         16

    In [3]: groebner([4*x**2*y**2 + 4*x*y + 1, x**2 + y**2 - 1], x, y, monic=False)
    Out[3]:
    ⎡               3                                              ⎤
    ⎢  3⋅y   x   7⋅y       5    7         2       4       6       8⎥
    ⎢- ─── - ─ + ──── - 2⋅y  + y , 1 - 8⋅y  + 24⋅y  - 32⋅y  + 16⋅y ⎥
    ⎣   4    4    4                                                ⎦

    In [4]: factor(_[-1])
    Out[4]:
              4
    ⎛       2⎞
    ⎝1 - 2⋅y ⎠

commit 54a1832f5410c20cd55f6516321a5a59a641d72e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Apr 8 17:29:14 2010 +0200

    Use 'key' instead of 'cmp' in monomial- and groebnertools

commit d7606df42666aee9fc6dffc3af89f0d552368fb8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Apr 7 16:12:03 2010 +0200

    Fixed sympy.integrals.rationaltools to work with new RootSum

commit d216e226350ce0dc2c83493d1ddbf452e075a546
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Apr 7 16:10:15 2010 +0200

    Fixed sympy.simplify.rewrite to work with new RootSum

commit d68594e2758c17f1eaa46df86addde2de8b8d051
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Apr 7 15:42:04 2010 +0200

    Removed RootsOf and improved significantly RootSum

    RootsOf class was an artifact of previous design and is not
    needed any more. Its functionality will be provided by roots().

    RootSum now uses factorization to split the input polynomial
    into irreducibles and return a sum of instances of RootSum
    class, each with minimal arguments. Multiplicity of a root
    is transformed into a multiplicative coefficient.

    The order of arguments to RootSum was changed and now a
    polynomial comes first and then an expression which will
    be applied on each root. In case of an identity expression
    one case skip it at all, as RootSum will construct a trivial
    Lambda expression automatically.

    Also printing of RootSum was improved. Added a pretty printer.

    Example:

    In [1]: RootSum(x - 1)
    Out[1]: 1

    In [2]: RootSum(x**3 + x + 3)
    Out[2]:
           ⎛ 3        ⎞
    RootSum⎝x  + x + 3⎠

    In [3]: _.doit()
    Out[3]:
          ⎛ 3           ⎞         ⎛ 3           ⎞         ⎛ 3           ⎞
    RootOf⎝x  + x + 3, 0⎠ + RootOf⎝x  + x + 3, 1⎠ + RootOf⎝x  + x + 3, 2⎠

    In [4]: RootSum(x**3 + x + 3, formal=False)
    Out[4]:
          ⎛ 3           ⎞         ⎛ 3           ⎞         ⎛ 3           ⎞
    RootOf⎝x  + x + 3, 0⎠ + RootOf⎝x  + x + 3, 1⎠ + RootOf⎝x  + x + 3, 2⎠

    In [5]: RootSum((x - 7)*(x**3 + x + 3)**5, Lambda(x, x**2))
    Out[5]:
                  ⎛ 3           ⎛    2⎞⎞
    49 + 5⋅RootSum⎝x  + x + 3, Λ⎝x, x ⎠⎠

    In [6]: _.doit()
    Out[6]:
           ⎛                     2                        2                        2⎞
           ⎜      ⎛ 3           ⎞          ⎛ 3           ⎞          ⎛ 3           ⎞ ⎟
    49 + 5⋅⎝RootOf⎝x  + x + 3, 0⎠  + RootOf⎝x  + x + 3, 1⎠  + RootOf⎝x  + x + 3, 2⎠ ⎠

commit 8d079d3feba8a988cca656cd8af1e002497a9571
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Apr 7 15:52:18 2010 +0200

    Added is_identity property to Lambda class

    Lambda.is_identity exhibit the following behavior:

    In [1]: Lambda(x, x).is_identity
    Out[1]: True

    In [2]: Lambda(x, x**2).is_identity
    Out[2]: False

    In case of multivariate Lambdas, None is returned:

    In [3]: Lambda((x, y), x).is_identity

commit 5468daf2a423fbb0fe99ddc296bdafe1f452da11
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Apr 7 13:28:51 2010 +0200

    Implemented tools for counting real and complex roots

    By default only real roots are counted, e.g.:

    In [1]: count_roots(x**2 - 2)
    Out[1]: 2

    In [2]: count_roots(x**2 + 2)
    Out[2]: 0

    This is consistent with root isolation functions. One can also
    specify an interval on the real line in which root counting is
    performed, e.g.:

    In [3]: count_roots(x**2 - 2, 0, oo)
    Out[3]: 1

    To make count_roots() switch to complex root counting algorithm
    (Collins-Krandick), use a complex number for any of the lower
    or the upper bound values. In the following example roots will
    be counted in an interval [-2*I, 2*I] on the imaginary axis:

    In [4]: count_roots(x**2 + 2, -2*I, 2*I)
    Out[4]: 2

    In [5]: count_roots(x**2 + 2, -2*I, 0)
    Out[5]: 1

    In [6]: count_roots(x**2 + 2, 0, 2*I)
    Out[6]: 1

    In general rectangular areas are supported, where the lower bound is
    the south-western corner and the upper bound is the north-eastern
    corner of the bounding rectangle. Roots are always counted including
    the boundary.

commit 50839ec46da467342a999b6c1ad70f8684a1c69e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 18:42:17 2010 +0200

    Make SymPy's sum() implement built-in sum() protocol

    Now sum() works like built-in sum() if the first argument has
    __iter__ attribute. It's slower than the built-in counterpart,
    but at least working:

    In [1]: from __builtin__ import sum as builtin_sum

    In [2]: %timeit u = sum([1,2,3,4])
    100000 loops, best of 3: 3.04 us per loop

    In [3]: %timeit u = builtin_sum([1,2,3,4])
    1000000 loops, best of 3: 823 ns per loop

commit 13f774da3d99ef9ab518337160292f7cff0dbee8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 14:44:06 2010 +0200

    Fix solvers/tests/test_recurr.py to work with new RootOf

commit e2b43b5e852d7986d15bd0b8961617d4d3aeb307
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 14:17:30 2010 +0200

    Fix sympy.solvers.ode to work with new RootOf

commit 079a49a8abc6668d0e928912a926baa147672e93
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 14:16:32 2010 +0200

    Added special cases and radicals support to new RootOf

commit 128d9f6cbebd09afb5ab3db4a36514d800abdac1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 13:52:26 2010 +0200

    Sort roots in roots_binomial() if all are numerical

commit ea965dec029a9f7fb030a1573cc74cef7a9fb1e3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 13:26:21 2010 +0200

    Sort roots in roots_quadratic() if both are numerical

commit 3bdf38b9a0e3bf5e3514152fb2b6dd74a18daae7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 12:34:48 2010 +0200

    Take advantage of term order when printing RootOf

commit 4caf2f62de0ea8e80ad4f98836a26243cdf7ee9b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 12:33:47 2010 +0200

    Added 'order' argument to _print_Add in Str and Pretty printers

commit 712cc227c4ed90af673659707b8b564a95e5bf2b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 6 11:29:21 2010 +0200

    Improved caching in new RootOf, don't store interval

commit 94d996562f7325b9df4d41d23788b14d42560b80
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Apr 5 01:01:20 2010 +0200

    Implemented new RootOf class based on root isolation

commit de30370b91fac3a5c2a52bbde8d26aa7d20f79c7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 3 18:02:32 2010 +0200

    Implemented higher level classes for root refinement

commit 19b0192a599b611619e0a70b2b579b74b2d3416b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 3 17:18:56 2010 +0200

    Removed old and useless complex root isolation code

commit 4898d5edb153cb13829b06f5aad8f231975d4233
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 2 23:47:43 2010 +0200

    Moved real root isolation code to polys/rootisolation.py

commit 2925ac972bf2644c8d53fd79bbb57283d1fa7636
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 2 23:10:36 2010 +0200

    Exposed complex root isolation algorithm to the toplevel

    By default intervals() returns only isolating intervals for
    real roots. To get isolating intervals (rectangles) for all
    roots set 'all=True', e.g.:

    In [1]: f = (x**2 - 2)*(x - I/2 - 3)*(x + I/2 - 3)

    In [2]: intervals(f, sqf=True)
    Out[2]: [(-2, -1), (1, 2)]

    In [3]: intervals(f, all=True, sqf=True)
    Out[3]: ([(-2, -1), (1, 2)], [(0, 37 + 37⋅ⅈ), (-37⋅ⅈ, 37)])

    In [4]: intervals(f, all=True, eps=S(1)/100, sqf=True)
    Out[4]:
    ⎛⎡⎛  17    24⎞  ⎛24  17⎞⎤  ⎡⎛3071   2035⋅ⅈ  12321   259⋅ⅈ⎞  ⎛3071   259⋅ⅈ  12321   2035⋅ⅈ⎞⎤⎞
    ⎜⎢⎜- ──, - ──⎟, ⎜──, ──⎟⎥, ⎢⎜──── + ──────, ───── + ─────⎟, ⎜──── - ─────, ───── - ──────⎟⎥⎟
    ⎝⎣⎝  12    17⎠  ⎝17  12⎠⎦  ⎣⎝1024    4096    4096    512 ⎠  ⎝1024    512    4096    4096 ⎠⎦⎠

    Currently there is only limited support for non square-free
    polynomials. Nevertheless the 'sqf' argument can be set, in
    this trivial case, to False (the default).

commit 78105c6d1d70eb25f1813f038bdb381718163f28
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 2 22:49:59 2010 +0200

    Implemented Collins-Krandick root isolation algorithm

    Based on the infallible algorithm for counting roots in a
    rectangle in the complex plane, an algorithm for isolation
    of complex roots of polynomials with rational coefficients
    was implemented.

    The algorithm computes the number of roots in a sufficiently
    large initial rectangle (using Cauchy bound) and then performs
    vertical and horizontal bisections and root counting until only
    rectangles with exactly one root in each remain.

    The algorithm isolates roots only in the upper half plane, but
    excluding the real line, so real roots of the input polynomial
    are discarded immediately and can be isolated using much more
    efficient continued fraction approach. Conjugates are trivially
    added to the resulting rectangles list by symmetry.

    The problem of roots located on boundary of isolating rectangles
    is resolved by counting only roots that are located on northern
    and western edges, and on north-western corner. This implies
    the fact that the real line is not considered for root counting
    at all.

    Isolating rectangles are sorted by their real component and
    then by negated imaginary component, so that root and its
    conjugate are located together forming a pair.

    This is not the optimal implementation of Collins-Krandick
    algorithms and several significant improvements are possible.

commit e4908a5089a36fee9112328e6da44a385fed1fb9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 2 22:05:19 2010 +0200

    Added 'basis' argument to dup_isolate_real_roots{_list}()

commit 5e5a4130f4bc7dd7cbee015ef138a88371069205
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 2 21:13:36 2010 +0200

    Added 'disjoint' argument to dup_refine_real_root()

    This is useful when we have an isolation interval and we want
    to show that it is located on the left or on the right of some
    point on the real axis, when this point intersects with the
    input interval (disjointness will be non-strict).

commit a08e60e30ed7ce83536e9fb00c975a623ff35ccf
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 31 23:13:42 2010 +0200

    Better support for roots on boundary in dup_count_complex_roots()

commit 343451b06933b4f50ab68ea212b30de92eac0a9c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 23:51:01 2010 +0200

    Improved error message for non-zero dimensional systems

commit 1045fd764e1f6c05cdd8f9e0d1beed7feca0788c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 23:46:25 2010 +0200

    Fixed Poly.is_linear to treat x*y*z + 1 as non-linear

commit c97adedc30158338a97734ef6357c40fe4cfd7ed
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 22:39:55 2010 +0200

    Fixed Matrix.berkowitz_charpoly() to work with new polys

commit 12b0f87eda0b07cf1e3cd9836a22c74d543b5d5e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 18:18:36 2010 +0200

    roots() won't hang on large examples like in #1009

commit 545510bdf8f68ae1234c6667556e0633fc2eff3f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 17:44:42 2010 +0200

    Don't use square-free decomposition in _try_decompose()

    Square-free decomposition is completely unnecessary at this level
    because polynomials that are passed to _try_decompose() are factors
    resulting from previous multivariate factorization step.

commit 6e8bc28940c269d2c77a9b162e0079c047f89e83
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 15:47:29 2010 +0200

    terms_gcd() will now clear denominators and keep constant

    The new behaviour is more understandable than returning a monic
    polynomial when the ground domain is a field. Basically, when
    ground is at least a ring then terms_gcd() will clear denoms
    and compute content and primitive part of the polynomial. Also,
    terms_gcd() will now keep the constant as factor() does, e.g.:

    In [1]: terms_gcd(2*x + 4)
    Out[1]: 2⋅(2 + x)

    In [2]: terms_gcd(2*x**2 + 4*x)
    Out[2]: 2⋅x⋅(2 + x)

    In [3]: terms_gcd(2*x**2/3 + 4*x)
    Out[3]:
    2⋅x⋅(6 + x)
    ───────────
         3

commit d2aefca47f6ae1beab875a5bda1e712ec140a6ab
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 14:03:50 2010 +0200

    Implemented infallible complex root counting algorithm

    The implemented algorithm is the algorithm due to Collins
    and Krandick (1992) which is a purely rational (infallible)
    approach to counting complex roots of a polynomial with
    rational coefficients in a rectangle in the complex plane.

    The algorithm does not use Sturm sequences as other complex
    root counting algorithms and doesn't have problems with roots
    located on the boundary of a rectangle.

    Example:

    Consider a polynomial

     f = (z - 1)*(z + 1)*(z**2 - 2)*(z - I)*(z + I))

    in R = [-2 - I, 1 + I/2] rectangle. The polynomial has 6 six
    roots all together and 4 of them are in R (with 2 located on
    the boundary of R).

    Lets count the roots in R using the new algorithm:

    In [1]: from sympy.polys.rootisolation import *

    In [2]: f = Poly((z - 1)*(z + 1)*(z**2 - 2)*(z - I)*(z + I))

    In [3]: dup_count_complex_roots(f.rep.rep, (QQ(-2), QQ(-1)), (QQ(1), QQ(1,2)), ZZ)
    Out[3]: 4

commit 01bbb98425f8b4864adfcbd6a656a1879bce3325
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 13:48:28 2010 +0200

    Fixed intervals([...]) for the common factors case

    Previously intervals([...]) hanged when the input polynomials
    had common factors, but also had at least one other factor.

    For example this now works fine:

    In [1]: intervals([(x**2 - 2)*(x-1), x**2 - 2])
    Out[1]: [((-2, -1), {1: 1, 0: 1}), ((1, 1), {0: 1}), ((1, 2), {1: 1, 0: 1})]

commit 0a7814a48a344d7af9a4b956abb50f64be068221
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 13:29:33 2010 +0200

    Added 'strict' keyword argument to intervals([...])

    The new keyword, which currently is used only when intervals()
    is given a list of polynomials, makes the resulting isolation
    intervals strictly disjoin, e.g.:

    In [1]: intervals([2*x**2 - 1, x**2 - 2])
    Out[1]: [((-2, -1), {1: 1}), ((-1, 0), {0: 1}), ((0, 1), {0: 1}), ((1, 2), {1: 1})]

    In [2]: intervals([2*x**2 - 1, x**2 - 2], strict=True)
    Out[2]: [((-3/2, -4/3), {1: 1}), ((-1, -2/3), {0: 1}), ((2/3, 1), {0: 1}), ((4/3, 3/2), {1: 1})]

    Adding this functionality was necessary for implementing
    complex root counting, isolation and refinement algorithms.

commit 355997e0e396363596adc573503dd9654863bdfb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 30 13:04:26 2010 +0200

    Implemented function for generating random polynomials

commit de73e57c8514ffbc9130fa5063fdb10aea9c006a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 28 16:15:26 2010 +0200

    Added function for taking real and imag part of a polynomial

commit 9f68b80d602ace857bd37c35c72f9abf4ecd9222
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 28 15:52:20 2010 +0200

    Fixed isolation of negative roots of polynomials

commit f3eb3a0fecaf3de63ea27b3e3c00083a52f983c2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 26 19:19:41 2010 +0100

    Implemented function for isolating algebraic numbers

    Currently only real algebraic numbers are supported, e.g.:

    In [1]: isolate(sqrt(2))
    Out[1]: (1, 2)

    In [2]: isolate(sqrt(2), eps=S(1)/100000)
    Out[2]:
    ⎛816  577⎞
    ⎜───, ───⎟
    ⎝577  408⎠

    In [3]: _[0] < sqrt(2) < _[1]
    Out[3]: True

commit 577342f904f09571cba9b0759b80b37387593eec
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 26 18:15:17 2010 +0100

    Added 'printer' argument to lambdify() and lambdastr()

    One can now tell lamdify() to use a non-standard printer if
    needed. Consider the following example:

    In [1]: from sympy.printing.lambdarepr import LambdaPrinter

    In [2]: class IntervalPrinter(LambdaPrinter):
       ...: """Use ``lambda`` printer but print numbers as ``mpi`` intervals. """
       ...:
       ...:    def _print_Integer(self, expr):
       ...:        return "mpi('%s')" % super(IntervalPrinter, self)._print_Integer(expr)
       ...:
       ...:    def _print_Rational(self, expr):
       ...:        return "mpi('%s')" % super(IntervalPrinter, self)._print_Rational(expr)
       ...:

    In [3]: expr = sqrt(sqrt(2) + sqrt(3)) + S(1)/2

    We will find a numerical interval for the above expression:

    In [4]: func = lambdify((), expr, modules="mpmath", printer=IntervalPrinter())

    In [5]: func()
    Out[5]: [2.2737712281864230768, 2.2737712281864235209]

    In [6]: type(_)
    Out[6]: <class 'sympy.mpmath.ctx_iv.ivmpf'>

    A printer to lambdify() can be specified as a class (Printer) or
    its instance, or a function with will call doprint() on a printer.

commit 756dc02e379d9bdd0db4288a51c065faad9b9363
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 26 16:11:57 2010 +0100

    Added 'levels' flag to flatten()

    This is useful when one needs to denest only several levels of
    nested containers, e.g.:

    In [1]: (11 - 6*y**2, 13*y - y**3)
    Out[1]:
    ⎛        2          3⎞
    ⎝11 - 6⋅y , 13⋅y - y ⎠

    In [2]: [ intervals(h, inf=-2, sup=2, sqf=True) for h in _ ]
    Out[2]: [[(-2, -1), (1, 2)], [(0, 0)]]

    In [3]: flatten(_, levels=1)
    Out[3]: [(-2, -1), (1, 2), (0, 0)]

    In [4]: sorted(_)
    Out[4]: [(-2, -1), (0, 0), (1, 2)]

    In general we have the following behaviour:

    In [5]: flatten(_2, levels=0)
    Out[5]: [[(-2, -1), (1, 2)], [(0, 0)]]

    In [6]: flatten(_2, levels=1)
    Out[6]: [(-2, -1), (1, 2), (0, 0)]

    In [7]: flatten(_2, levels=2)
    Out[7]: [-2, -1, 1, 2, 0, 0]

commit b63fb9b8790f5867c1d402c7ed67523e3cd7855c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 25 15:47:10 2010 +0100

    Use non-greedy expression parser in nroots()

commit 7659989b75856d33a673e6930b84fb12a8ace561
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 25 11:33:02 2010 +0100

    Cleaned up functions.special.polynomials, use polys

commit 36dce2956313263ab884af955e412c31bd465235
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 25 11:13:00 2010 +0100

    Don't import sympy.functions from polys.monomialtools

commit f395157b9c8142b520cecf8fc05174c4412b8c40
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 25 09:22:36 2010 +0100

    Changed keyword to explicit arguments in dmp_{eject,inject}

commit b663a3f946009048305eb8a5610d3f1e87ff72dd
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 24 22:01:09 2010 +0100

    Make nroots() more explicit, no keyword arguments

commit 294cb655bc05628e265bf94507518dcb6e566741
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 24 21:55:04 2010 +0100

    Make intervals() more explicit, no keyword arguments

commit 7f0af824dec2f1b4d1c8704de946ba4b038d0e60
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 24 11:38:03 2010 +0100

    Fixed trivial negative root isolation when inf >= 0

commit 0d704b20f0164a84f3ddb4997645639c8d740ce7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 24 10:18:50 2010 +0100

    Exposed refine_root() function to the top-level

    The new function is a wrapper for Poly.refine_root() and
    accepts a univariate polynomial as an expression or Poly
    class instance, e.g.:

    In [1]: refine_root(x**2 - 2, 1, 2, eps=S(1)/100)
    Out[1]:
    ⎛24  17⎞
    ⎜──, ──⎟
    ⎝17  12⎠

    Note that generators can't be specified for this function.

commit 291eba08c3eb1d65484d2e9655b2dab3b0c13385
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 24 09:57:13 2010 +0100

    Use 'eps' and 'steps' simultaneously in root refinement

    Now one can set two goals at once, i.e. specify the desired maximal
    width of the isolating interval and limit the number of refinement
    steps, e.g.:

    In [1]: Poly(x**2 - 2).refine_root(1, 2, steps=5)
    Out[1]:
    ⎛     17⎞
    ⎜7/5, ──⎟
    ⎝     12⎠

    In [2]: Poly(x**2 - 2).refine_root(1, 2, steps=6)
    Out[2]:
    ⎛24  17⎞
    ⎜──, ──⎟
    ⎝17  12⎠

    In [3]: Poly(x**2 - 2).refine_root(1, 2, eps=S(1)/100)
    Out[3]:
    ⎛24  17⎞
    ⎜──, ──⎟
    ⎝17  12⎠

    In [4]: Poly(x**2 - 2).refine_root(1, 2, eps=S(1)/100, steps=5)
    Out[4]:
    ⎛     17⎞
    ⎜7/5, ──⎟
    ⎝     12⎠

    In [5]: Poly(x**2 - 2).refine_root(1, 2, eps=S(1)/100, steps=7)
    Out[5]:
    ⎛24  17⎞
    ⎜──, ──⎟
    ⎝17  12⎠

commit eba2a1456084034e966553ca4fdc643e6fb47ae6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 24 09:46:33 2010 +0100

    If no 'steps' or 'eps' given in refine_root(), set steps=1

    The following is equivalent:

    In [1]: Poly(x**2 - 2).refine_root(1, 2)
    Out[1]: (1, 3/2)

    In [2]: Poly(x**2 - 2).refine_root(1, 2, steps=1)
    Out[2]: (1, 3/2)

    Setting 'eps' will leave 'steps=None', e.g.:

    In [3]: Poly(x**2 - 2).refine_root(1, 2, eps=S(1)/1000)
    Out[3]:
    ⎛41  58⎞
    ⎜──, ──⎟
    ⎝29  41⎠

commit edf58f411b544affae5a31bd18641161a8ae4f29
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 23 20:05:56 2010 +0100

    Fixed real root isolation functions to handle zero

commit 4d826db3a7db8f1f56d8d344a6dc5ea1be0944b1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 23 13:37:53 2010 +0100

    Added 'inf' and 'sup' keywords to intervals()

    Consider polynomial x**2 - 2:

    In [1]: intervals(x**2 - 2)
    Out[1]: [((-2, -1), 1), ((1, 2), 1)]

    We got two real roots on (-oo, oo). We can find isolating
    intervals on a smaller domain, e.g.:

    In [2]: intervals(x**2 - 2, inf=1)
    Out[2]: [((1, 2), 1)]

    In [3]: intervals(x**2 - 2, sup=1)
    Out[3]: [((-2, -1), 1)]

    If the infimum or the supremum is inside of any of the disjoint
    isolating intervals, each such interval is refined until a True/
    False answer can be given to a question if those intervals should
    be discarded or not, e.g.:

    In [4]: intervals(x**2 - 2, inf=S(7)/5)
    Out[4]: [((7/5, 3/2), 1)]

    Strict inequalities are used for 'inf' and 'sup', e.g.:

    In [5]: intervals(x - 1, inf=1)
    Out[5]: [((1, 1), 1)]

    In [6]: intervals(x - 1, sup=1)
    Out[6]: [((1, 1), 1)]

    In [7]: intervals(x - 1, inf=1, sup=1)
    Out[7]: [((1, 1), 1)]

commit 5398f5823097fb11edb52691d73d6bccaa2825d2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 23 05:35:33 2010 +0100

    Improved real root isolation, faster and more tools

    In [1]: intervals(x**2 - 2)
    Out[1]: [((-2, -1), 1), ((1, 2), 1)]

    In [2]: intervals(x**2 - 2, eps=S(1)/100)
    Out[2]:
    ⎡⎛⎛  17    24⎞   ⎞  ⎛⎛24  17⎞   ⎞⎤
    ⎢⎜⎜- ──, - ──⎟, 1⎟, ⎜⎜──, ──⎟, 1⎟⎥
    ⎣⎝⎝  12    17⎠   ⎠  ⎝⎝17  12⎠   ⎠⎦

    In [3]: intervals(x**2 - 2, eps=1e-2)
    Out[3]:
    ⎡⎛⎛  17    24⎞   ⎞  ⎛⎛24  17⎞   ⎞⎤
    ⎢⎜⎜- ──, - ──⎟, 1⎟, ⎜⎜──, ──⎟, 1⎟⎥
    ⎣⎝⎝  12    17⎠   ⎠  ⎝⎝17  12⎠   ⎠⎦

    In [4]: Poly(x**2 - 2).refine_root(1, 2, eps=S(1)/10000)
    Out[4]:
    ⎛239  99⎞
    ⎜───, ──⎟
    ⎝169  70⎠

    In [5]: Poly(x**2 - 2).refine_root(1, 2, steps=10)
    Out[5]:
    ⎛140  99⎞
    ⎜───, ──⎟
    ⎝ 99  70⎠

    In [6]: Poly(x**2 - 2).refine_root(1, 2, steps=15)
    Out[6]:
    ⎛1393  577⎞
    ⎜────, ───⎟
    ⎝985   408⎠

    In [7]: intervals([x**5 - 200, x**5 - 201])
    Out[7]:
    ⎡⎛⎛75  101⎞        ⎞  ⎛⎛283      ⎞        ⎞⎤
    ⎢⎜⎜──, ───⎟, {0: 1}⎟, ⎜⎜───, 26/9⎟, {1: 1}⎟⎥
    ⎣⎝⎝26   35⎠        ⎠  ⎝⎝ 98      ⎠        ⎠⎦

commit be4e968d50f2d3e7008b82a4e022e56a174a5b14
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 22 09:08:26 2010 +0100

    Implemented gf_lcm() and gf_cofactors() (+ toplevel)

    In [1]: f = x**2 + 8*x + 7

    In [2]: g = x**3 + 7*x**2 + x + 7

    In [3]: cofactors(f, g, modulus=11)
    Out[3]:
    ⎛                    2⎞
    ⎝-4 + x, 1 + x, 1 + x ⎠

    In [4]: lcm(f, g, modulus=11)
    Out[4]:
                  2      3    4
    -4 - 3⋅x - 3⋅x  - 3⋅x  + x

    In [5]: cofactors(f, g, modulus=11, symmetric=False)
    Out[5]:
    ⎛                   2⎞
    ⎝7 + x, 1 + x, 1 + x ⎠

    In [6]: lcm(f, g, modulus=11, symmetric=False)
    Out[6]:
                 2      3    4
    7 + 8⋅x + 8⋅x  + 8⋅x  + x

commit 02162cfc98a06c025fcc55a0b69292f23ff9735d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 21 16:55:46 2010 +0100

    Added test for issue 1432

commit ea59fbf0cc0689d28a6fc779d1da8bcfaf62aff5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 21 16:21:15 2010 +0100

    Renamed ground_to_ring() to clear_denoms()

commit 0e5c36afc5e90bee8e3226028570a505e7797814
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 21 16:06:48 2010 +0100

    Clenead up situation with automatic domain conversion

    In [1]: monic(2*x**2 + 3*x + 4)
    Out[1]:
        3⋅x    2
    2 + ─── + x
         2

    In [2]: monic(2*x**2 + 3*x + 4, auto=False)
    ...
    ExactQuotientFailed: 2 does not divide 3 in ZZ

    Also this now works:

    In [3]: solve(x**2+x+1.0, x)
    Out[3]: [-0.5 - 0.866025403784439⋅ⅈ, -0.5 + 0.866025403784439⋅ⅈ]

    Note that for computing numerical roots of polynomials there
    is nroots() function (which utilizes mpmath's solvers).

commit 27d6b8856433074e94f2be34fa9436a9b2f90381
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 20 19:01:24 2010 +0100

    Added test for parsing sin(x), cos(x) in polys (#1355)

commit 74d93717fae25210f375c86ef52cb72f194e1ede
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 20 18:54:16 2010 +0100

    Added test for huge Sturm sequence example (#326)

commit aec5649e5e93735ff53aa53aa57c43baae75b23c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 20 18:36:19 2010 +0100

    Added test for factor(y/pi + y*sin(x)/pi) (#783)

commit 68e2ce73b53e9c0c0c7e9d620a036b6e2e76501a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 20 17:45:03 2010 +0100

    Refactored real root isolation, restored Cython support

commit 28f2bb6887b171e7f778e843ce710a62b1b51c25
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 14:35:10 2010 +0100

    Use Poly(..., sort="x > y") to resemble math notation

commit bedf2050e2d70878ee3b3f260aef1b330438a771
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 13:55:33 2010 +0100

    Use gmpy by default in polys and show types at init

    Previously the default ground types were Python's int and Fraction
    types (or SymPy's Rational on 2.4 / 2.5). The new default is gmpy,
    if gmpy is available. If not SymPy will fallback to slower types
    as previously.

    To cut down on confusion what ground types are being used in a
    particular session, the information about ground types that were
    setup is now displayed in the welcome message in isympy. The text
    is in a form: "types: something" (as it is done with cache).

    If SymPy was able to use the same types for both ZZ and QQ domains,
    then 'something' will be set to 'gmpy', 'python' or 'sympy'. If this
    is not the case, e.g. in 2.4 w/o gmpy, then SymPy uses mixed ground
    types and 'something' will be in a form: "ZZ_type/QQ_type". In the
    example given it would be "types: python/sympy", i.e. ZZ.dtype is
    int and QQ.dtype is Rational.

    Examples:

    1. Python 2.6 with gmpy

    $ python2.6 bin/isympy -q
    IPython console for SymPy 0.6.7-git (Python 2.6.2) (types: gmpy)

    2. Python 2.6 w/o gmpy

    $ SYMPY_GROUND_TYPES=python python2.6 bin/isympy -q
    IPython console for SymPy 0.6.7-git (Python 2.6.2) (types: python)

    3. Python 2.4 w/o gmpy

    $ python2.4 bin/isympy -q
    Python console for SymPy 0.6.7-git (Python 2.4.4) (types: python/sympy)

commit 7267e222351f5687673f57d35413a666da387725
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 13:10:24 2010 +0100

    Trivial improvement to doc/src/modules/polys/wester.txt

commit 8de5b8e56a50bf51e67000876e768d179eabdca3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 10:58:58 2010 +0100

    Improved polyconfig.py and use config in galoistools.py

commit 344629b4d860a68f9c68a30c60bff7441e17a453
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 10:24:03 2010 +0100

    Reimplemented ratsimp() in terms of cancel() and reduced()

    Previously ratsimp() was redundant and did what cancel() do, but
    much slower. Now ratsimp() uses cancel() to reduce the degree of
    a rational function and applies reduced() to the resulting numerator
    and denominator to split a rational function into polynomial part
    and rational function part, often given results much simpler and
    cancel() alone.

    Example:

    In [1]: (x+x*z+y*z)/(x+y)
    Out[1]:
    x + x⋅z + y⋅z
    ─────────────
        x + y

    In [2]: cancel(_1)
    Out[2]:
    x + x⋅z + y⋅z
    ─────────────
        x + y

    In [3]: ratsimp(_1)
    Out[3]:
              y
    1 + z - ─────
            x + y

    In [4]: cancel(_3)
    Out[4]:
    x + x⋅z + y⋅z
    ─────────────
        x + y

    In [5]: together(_3)
    Out[5]:
    x + z⋅(x + y)
    ─────────────
        x + y

commit 8d15473e072d236c44dfa434dccd7f5ec365273d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 10:21:52 2010 +0100

    Added test for solve_polynomial_system() (#1863)

commit 383bb9b33ee57697710e2994c766edc85b88dd7c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 00:47:49 2010 +0100

    Fixed root_factors() to work with non-trivial cases

commit 4ec6620b10324559aac067d78c78112537a8bd96
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 19 00:36:04 2010 +0100

    Allow Poly(Poly(x), field=True) convenient shorthand

commit d26ed996a44b3933371a9e73b6b1df84cfd18696
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 18 22:07:31 2010 +0100

    Implemented configuration framework for polys module

    Previously there were two methods used for configuring what
    algorithms should be used and how they will perform:

    1. Passing keyword arguments around.
    2. Setting up global variables.

    Now there is only one configuration approach, via polyconfig.

    Consider the following example:

    In [1]: from sympy.polys.polyconfig import query, setup

    In [2]: query("USE_CYCLOTOMIC_FACTOR")
    Out[2]: True

    In [3]: %time u = factor(x**100 - 1)
    CPU times: user 0.04 s, sys: 0.00 s, total: 0.04 s
    Wall time: 0.05 s

    In [5]: setup("USE_CYCLOTOMIC_FACTOR", False)

    In [6]: %time u = factor(x**100 - 1)
    CPU times: user 2.66 s, sys: 0.01 s, total: 2.66 s
    Wall time: 2.75 s

    In [8]: setup("USE_CYCLOTOMIC_FACTOR")

    In [9]: %time u = factor(x**100 - 1)
    CPU times: user 0.05 s, sys: 0.00 s, total: 0.05 s
    Wall time: 0.05 s

    This way several low-level algorithms can be configured and, for
    example, benchmarking or algorithm parameters optimization was
    made a lot easier.

commit 0c72292310b78e4cfebe65a97ec465991f637f12
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 18 20:26:18 2010 +0100

    Cleaned up mess with 'include' keyword in sympy.polys

    This is first step to disallow passing keyword arguments from
    user level to low-level algorithms. In this patch 'include'
    keyword was removed and new functions d*p_factor_list_include()
    and d*p_sqf_list_include() added. One can still pass 'include'
    to factor_list() and sqf_list() on the user level, but it won't
    be propagated via **args but via calls of appropriate functions.

    Basically, if keyword (on the low-level) made a function to return
    different structure of a result than without this keyword, then a
    new function will be added to simplify thing. If a keyword isn't
    introducing structural changes then it will be propagated via
    explicit argument. This verbose approach should make sympy.polys
    understandable more easily.

commit 3f45845d43f5d450b93841a0271a930f07c639a5
Author: Addison Cugini <ajcugini@gmail.com>
Date:   Mon Apr 19 19:20:30 2010 -0700

    Added functionality for action verbs

    Now, they can be called both as global functions and as methods e.g.
    a.simplify() = simplify(a).

    Tests added for Expr.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit b6f8be38b21f780adf484cf47fe0643a61e5a75c
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Fri May 7 23:45:57 2010 +0100

    Store the actual predicate object inside Assume, instead of a key.

    This changes the way Assume objects are printed.

commit d1dd6a32e2e56cbeed5850ed2a9970ec0ea7582d
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Apr 27 04:46:46 2010 +0100

    Add the tautological predicate Q.is_true

    This acts as a wrapper allowing to input logic expressions into ask()
    The implementation mostly reuses code from sympy.logic.inference.pl_true()
    This is now the default key in Assume (instead of 'relational') so that
    expressions like Assume(x > 1) and Assume(Q.even(x) & Q.positive(x)) have
    their natural meaning.

commit f0274638c28d4c0c3d9eb666fd587ecafa203c45
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Apr 25 01:38:54 2010 +0100

    Extract the direct resolution part of ask() into eval_predicate()

commit bcc2dcf6365831cb5cc87ac218293426b412b7f2
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Apr 24 19:07:00 2010 +0100

    Remove the 'value' attribute from Assume.

    A test for eliminate_assume had to be weakened.

commit 53f0e1a04652af0744e6ba2735b76ee3faa9ba61
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Apr 24 16:20:20 2010 +0100

    Use predicates internally.

    Compute known_facts_compiled at import time
    Store ask handlers in the Predicates.
    Use predicates internally in ask()

    One test changed: missing ask keys now raise AttributeError

commit 467c6967b8a29d9b1e9fa8bb3bcce54299e06941
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Fri Apr 23 04:26:49 2010 +0100

    ask(): correct integer repr for assumptions.

    Assumptions whose CNF form contained clauses with literal of
    opposite "signs", such as "A ^ B" or "Implies(A, B)" caused exceptions.

commit 2c4b700703abfeef7b478ef0b142d365d54888af
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Apr 17 19:16:54 2010 +0100

    Improve ask() efficiency and code clarity.

    The "if hasattr(...): getattr(...)" construct is wasteful because it
    resolves the attribute twice. Doing "getattr(...)" directly and catching
    the AttributeError is more efficient.
    This change also allows to reduce indentation by 1 level.

commit 0cda200bcddb27f43c7d39f3186ba949bc101d1c
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Apr 17 05:13:36 2010 +0100

    Simplify code in ask().

commit 64f5cc7a56ddbe20a1902d48525fc06b84d30e99
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Fri May 7 23:40:42 2010 +0100

    Print Predicates as Q.<name>

commit 190fec9e31cb88d9562bea15df23b473d0854b82
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Apr 17 04:36:01 2010 +0100

    Make Q.* Predicates, and update ask() accordingly.

commit 7c0b857eba6543ed87216e1366f394d59ceffac2
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Apr 5 06:10:46 2010 +0100

    Start implementing class Predicate

    Predicate wraps Assume: make pred(x) and Assume(x, pred) do the right thing

commit 10dcae09c41aaa203cf469611c37693b8f2916d8
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Apr 24 16:14:55 2010 +0100

    Refactor eliminate_assume

commit f2ecdb38350d1b4afa8aae8eff9258d6ad492c4e
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jul 10 18:54:23 2010 +0200

    Fixed 2.4 compatibility of Indexed constructor

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d03d0de252902c49a9d95b8ea89f8cfcb964a4c5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 9 15:08:01 2010 -0700

    Fix installation of 'sympy.tensor'

    Otherwise you get:

      File "/home/ondrej/usr/lib/python/sympy/printing/fcode.py", line 28, in <module>
        from sympy.tensor import Idx
    ImportError: No module named tensor

    After you try to install sympy and import it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 27eb23f3f74c5a5b7005991cb773fe42ec12f069
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jul 7 22:31:13 2010 +0200

    renamed:    core/tests/test_symtuple.py -> core/tests/test_containers.py

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit f0728e90b602422185bf5ffd9bb47aa76fdedd31
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jul 7 22:29:04 2010 +0200

    Added docstrings to core/containers.py

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 9208b26fa0be250c1c7130447c6f2cd24b0ee133
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jul 7 13:20:01 2010 +0200

    renamed: sympy/core/symtuple.py -> sympy/core/containers.py

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 92a5abcc4e3edde85023abf3b7e491324d6404f7
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jul 7 13:18:39 2010 +0200

    Rename SymTuple -> Tuple

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit f39e9a5dc3c37a4745cc8c3111612a188bf35715
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jul 6 18:13:39 2010 +0200

    Updated code printing and tests to use new Indexed implementation

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 1c0c139f7a5db2bbd3b1e0d6e5982cd43dfc8720
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jul 6 17:32:25 2010 +0200

    Changed logic of Indexed, Idx and introduced IndexedElement

    The Indexed module now has a better organisation in that the `stem' representing
    the whole array is of class Indexed, while elements, e.g. A(i, j) are of class
    IndexedElement.  This paves to way for storing shape information in the array
    symbol as (optional?) arguments to Indexed constructor, and exploiting it in
    expression manipulations.  Broadcast, for instance.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit d3155321d473a0fef4576255af086693262c943d
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Fri Jul 2 11:38:14 2010 +0200

    indexed: Updated module docstring and added a TODO

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit b6174bcb0869fbed95b785c2e6e97c35ae6b2c43
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jul 1 13:07:57 2010 +0200

    Deleted old external test for C code (replaced by combined fortran and C file)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 4d47eeb8136efcc655c0777c2b20c2eceec39f42
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jul 1 13:07:09 2010 +0200

    include tests of ceiling() and floor() for C code

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit cc4a1ea78b0d793374f5c2f520d4e1bfbc46782c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jul 1 12:59:45 2010 +0200

    renamed: test_codegen_f95_ifort.py -> test_codegen.py

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 0209e7ca29d2c4ed95680f4e4269ac219ae406fa
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jul 1 12:40:30 2010 +0200

    test_external codegen:  Redirected compiler errors to /dev/null

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 715104cdcd43733417797c6c905107b1f926bceb
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jul 1 12:30:03 2010 +0200

    test_external codegen: add tests that just inform about available compilers.

    To test multpiple compilers and multiple languages, several command sequences
    are defined.  Provided the compiler is present and behaves as expected, all
    tests will be run on every available compiler.

    In order to inform about which compilers are tested, this patch adds test
    functions that simply call skip(<informative message>) for every compiler
    that will not be tested.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 4d8f8367f2cb03d06b37b38e3cb0940bed27b78c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jul 1 12:04:38 2010 +0200

    Unite external tests of codegen in a single file

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit a2c08adc66243e92fe7fa38bd87e0ebca68a9429
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 30 16:06:43 2010 +0200

    test_codegen_ifort.py: Fix whitespace

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit da2b1f31f706caddc5feefca825fac9953bc8b4b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 30 15:30:39 2010 +0200

    codegen.py:  fix whitespace

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 68ffd4d1624d2daae463637cf1ab6f646993ee4c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 30 15:17:55 2010 +0200

    Migrate CCodeGen.dump_c() to rely on CodeGen.dump_code() instead

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit f58de300670efe3e7904dc4c755cf7326ee7fe15
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 30 14:55:38 2010 +0200

    Moved language agnostic logic up from FCodeGen.dump_f95() to CodeGen.dump_code()

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit bc1c788b0f0f0bb12e7b712e402a76c0862bdebe
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 30 14:51:57 2010 +0200

    codegen: Simplified implementation of header comments

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit d66a17196a95cfe8f18c487af75ec4a121ff40b7
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 23:10:07 2010 +0200

    Added tests for Indexed class

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit d370afb920f52b6b43aa6f36075b25aa19641820
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 23:07:24 2010 +0200

    Let Indexed convert Symbol indices in *args to Idx upon creation

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 19e699edfa79cf21a4b9d4cffe8d9681cff08374
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 21:30:27 2010 +0200

    Fix bug in Indexed.rank()

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 542567a6a2302ac132d73f42b79c37bf547a185c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 21:26:12 2010 +0200

    Indexed: Added option to allow creation of tensor stem before attaching indices

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 9819ed8eb2fae130206a5bcb534e1d29d93a195e
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 14:57:38 2010 +0200

    Added property .is_integer to Idx

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 1dcadd57a0e60407af277b8a6536430ac658a298
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 14:45:53 2010 +0200

    Added tests for Idx

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 158d59ad68240c64a27ebd15baff8f6f1f2ae7fb
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 14:32:11 2010 +0200

    indexed: Change treatment of Idx(<literal integer constant>)

    If an Idx instance is constructed based on a literal integer, the upper and
    lower bounds should be preserved.

    In relation to this, the *internal* structure of Idx instances with unspecified
    range was also changed.  Before, an unspecified range would be stored as a tuple
    (None, None), but this is redundant and also broke x.func(*x.args) == x.  Now,
    Idx instances will only store the label as x.args[0], and nothing else.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit ce025219423a028e206967ddb0e6bbb204985778
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jun 29 14:30:45 2010 +0200

    indexed.py: made Idx constructor more pedantic (require integer arguments)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit b5abab95d902c7fbc3bc608147651445691db185
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Fri Jun 25 22:02:28 2010 +0200

    codegen: Moved code to determine language into function

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit df09c5dee9af8d57d227e35aedd9eba3f160042b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Jun 28 11:59:11 2010 +0200

    test_symtuple.py:  Added test for tuple_wrapper

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 2850a0b93487a54d6ea172539f9430fc7df093a4
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Jun 28 11:57:34 2010 +0200

    Fixed spacing in test_symptuple + Added test of SymTuple.subs()

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 6ab7f4d5fd76fa77483bcefc827dd1411e3dc0e3
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Jun 28 11:42:16 2010 +0200

    Renamed private _tuple_wrapper into public tuple_wrapper

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 65a41d742afe31c7c397bbd76b914c9a63cd2ac3
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jun 24 09:47:09 2010 +0200

    FCodeGen remove allocatable statement from array arguments (Won't compile)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 40368ab5fcc54424760e261495fc394dd21dea8f
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 20 14:44:06 2010 +0200

    FCodeGen:  Added intent(in/out/inout) attribute to declarations.

    Updated all tests.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit e7d1a4d1e984b597524a47c0e08dedee34859ad7
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 20 10:45:19 2010 +0200

    Codegen: Added test for InOutArgument

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit a9aa8c5afe50e24483b6ce73bb3bb1d494bc9b1d
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 20 10:20:37 2010 +0200

    Setup FCodegen to handle multiple results (return val+output arguments)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 1abae77c4658107c2932bde7638ffa0c6386d763
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 20 10:17:47 2010 +0200

    Created common super ResultBase for Result, OutputArgument and InOutArgument

    The super class got a method to determine whether result variable need to be
    initialized or not, and a method to rewrite rhs expression if needed
    (preparing for loops)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 85b33b901d8f7ae0463919b6b79ea5f78d913560
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 20 10:04:52 2010 +0200

    Routine: let constructor decide if we need InOut or Output arguments

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit eab275b482e7bf351647307d8d3d0dda22e96615
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 19 21:05:52 2010 +0200

    Codegen: require expression to be of type Expr, not Basic

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit d57b0c2870231e3c94214dcacb8043f2da892c82
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 19 21:01:47 2010 +0200

    Loop preparation should not happen in fcode printer, but rather in codegen

    This enforces a separation of code printing and code interpretation.  The Printer
    should only be concerned with the literal translation of formulas, and never
    change the mathematical expression it is given

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 000db4bee8ec8dda283576b32ed102f79aa3b2b8
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 19 17:07:45 2010 +0200

    Codegen: setup of input/output arguments moved to Routine constructor

    Before, the setup of arguments and return values had to be done prior to
    calling the Routine constructor.  Now the routine constructor needs only
    the name of the routine and the sympy expressions to calculate.  This should
    help ensure consistency in how the Routine instances stores information.

    The codegen() friendly function could be simplified considerably.

    Updated tests that call the Routine constructor directly.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit a6b2d9d6932fa9312c3c45c6ffc6462c89cdc4d1
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 19 15:33:17 2010 +0200

    Argument got method get_symbols()

    Codegen need more object orientation in the sense that each class should
    take responsibility for extracting and providing information about itself.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit abd246a1dee4ef379dcc0c1d0a69d8d7158237aa
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Fri Jun 18 15:25:40 2010 +0200

    Insert more empty lines in fortran godegen

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit a2a5691ab38228b17abc64eb5ac25db8a249b556
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 15:14:36 2010 +0200

    Updated test of codegen with array arguments.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 9ac8a495213c728875ace72aeaee4d05b6b19af3
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 15:09:23 2010 +0200

    FCodeGen got method _init_resultvars()

    This is used to initialize result variables to 0 before entering summation loop.

    The initialization is only done if the Routine object stores the variable as a an
    object of type OutputArgument or Result.  We do not initialize a variable of type
    InOutArgument.  (And of course not any InputArgument.)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 62c6e75e29e7f08c0c1c0691f23927761be0d4d8
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 15:08:44 2010 +0200

    FCodeGen got method ._declare_locals()

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 3bf77cf1c0d90670df20bef530fdc6f16df9a35f
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 15:06:40 2010 +0200

    Split _declare_arguments() from _get_routine_opening()

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit a48999f650b645de746f230d78420798b57e4b3c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 15:05:05 2010 +0200

    Routine object should also know what local variables are needed

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit c13e3bce208f14f64e19a1d6c63ad6fe13032792
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 13:52:19 2010 +0200

    FCodePrinter got method .set_assign_to()

    FIXME: The assigment to a result variable should ideally be given not as a
    printer parameter, but rather as a parmeter to .doprint().  However, this needs
    changes throughout the Printer framework as .doprint() does not currently take
    keyword arguments.   This should be fixed later.

    For now the 'assign_to' setting is stored in the ``private'' Printer._settings
    dictionary so that a setter method is apropriate.  We also need to check type
    of the assigment variable as the loop functionality needs an Expr subclass to
    work properly.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 13153df85baa0cc92c170688920ce4ed2ec17329
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 13:09:06 2010 +0200

    Updated test of FCodePrinter

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 04c88f8530b441c6676bb99f652441d0c49bc18b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 12:53:48 2010 +0200

    FCodePrinter: Always assume that loops could involve summation

    This means that a loop for e.g. a matrix vector product y=Ax renders as:

    do i=1,m
      do j=1,n
        y(i) = y(i) + A(i,j)*x(j)
      end do    ^
    end do      |
                |....  Note that y has been added to the rhs expression.

    In order for these loops to give correct results, the vector y must be
    initialized correctly.  Here, we would need the fortran statement 'y=0.d0'
    before the loop.  This must be taken care of by the CodeGen class.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 4c39bf560939f824af1305d5a7c410db7058526c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 12:51:04 2010 +0200

    FCodePrinter: use self._print as key to [].sort() this avoids Expr.__lt__()

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit d53491bf1eef9a404dd8aadca838ad57bc41363c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 12:49:51 2010 +0200

    Remove integer decleration from FCodePrinter (is responsibility of CodeGen)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 58d1238f92276a913c468bd5e988a628795161c2
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Jun 16 12:45:35 2010 +0200

    FCodePrinter: Make 'assign_to' string parameters into Symbol

    FIXME: Why is this needed?

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit d6466739ea2364775e6967754566b60d463df2d9
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 13 22:55:51 2010 +0200

    Added test for FCodeGen with array arguments (matrix-vector product)

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit bce01bfb27c93c4b4194f32a0b94b93355894103
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 13 22:08:52 2010 +0200

    Fix leading blank in fortran codegen

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 0cf05269c111ca4371162e96907d8606fca4d37f
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 13 22:05:50 2010 +0200

    Move loop generation into FCodePrinter + add declaration of local variables

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 0758c55f5ebfc608855f0956632f83229e72c9e6
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 13 17:59:36 2010 +0200

    Implemented OutputArgument and InOutArgument in FCodeGen

    codegen can now be instructed to use output arguments instead of return value.
    If codegen is given an expression that is an Equality object, the left hand
    side is used to generate an OutputArgument.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit f792c17ce1dc3cbae87ccfb39e780ba7b6de6950
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Jun 13 14:19:59 2010 +0200

    Implemented Fortran declarations of array input arguments

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 1c6502c80c1b04c36fcb4b95be419cefe61a1403
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 12 22:16:04 2010 +0200

    FCodePrinter:  implemented code indentation for fortran free-form

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit f34452dcd9394a3bfc5da17db12cfc9b6e67d5e2
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 12 22:04:26 2010 +0200

    Added loop functionality to FCodeGen

    The loop code is generated if there are objects of class Idx in the expression.

    FIXME: loop is generated, but arrays are not declared correctly

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 49d16d3f626cfe10061e912bf3060cadd7d20f95
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 12 21:46:31 2010 +0200

    FCodeGen should should use printer object, not fcode

    This helps to keep consistent printer settings.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 9d471e88e0bb904ece2ba5704b8a2d88058916fb
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 12 21:30:09 2010 +0200

    fix fortran line wrapping for human=False

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit bc4ae23f07e6dc66b6e165e05592ea26162b33e8
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Jun 12 20:41:27 2010 +0200

    Fixed double space after '=' in generated free form code

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 7ab2da25b6df5cdd2540f728f40a448580de915c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jun 3 22:48:21 2010 +0200

    Created codegenerator FCodeGen for generating compilable fortran code

    Implemented tests of the generated strings, and a script in test_external/ to
    test resulting binaries.

    The existing CCodeGen and related tests was used as templates for the new
    functionality.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit f99fb02b0745f8e9860558e1ce187bd6581c3c6b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Fri Jun 4 10:18:22 2010 +0200

    Added tests for free-form fortran code + fix bug in comment line wrapping

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 3383aa33f1609db8d29d5cbcd972535cb00586a2
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jun 3 22:14:39 2010 +0200

    Implemented optional free-form source format for Fortran code printer

    fcode takes a new keyword:   source_format='fixed'|'free'

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 6df58d1608b3d092114b6395367e575f88561460
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jun 3 21:56:15 2010 +0200

    move function wrap_fortran() to FCodePrinter._wrap_fortran()

    This will let the line wrapping function respect settings of the fortran
    printer.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 13697132c4afaf72448b563353cf3f4d91ec436e
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jun 10 22:48:13 2010 +0200

    First implementation of Indexed and Idx

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 5c8ee77018f2b12a20d95db5e631c899b48607b8
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Jun 10 15:43:53 2010 +0200

    Moved SymTuple to sympy/core/symtuple.py +  imported in core/__init__.py

     - Tests are moved to sympy/core/tests/test_symtuple.py
     - the decorator _tuple_wrapper was also moved to sympy/core/symtuple.py, but not
       imported to __init__.py because it is meant for internal use.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 5fd601267fd8cc0cd26865748fecc13caa8cb56a
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Thu Apr 29 13:44:51 2010 +0200

    Fix issue 1920: SymTuple doesn't rebuild itself

    SymTuple did not fulfill foo.func(*foo.args) == foo.  This patch fixes that
    by treating the constructor *args as items of the tuple, rather than expecting
    exactly one tuple argument.

    Added docstring, doctest and test  +  fixed some related whitespace errors.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 1248207ca6052d7f46387899ea8a432c4e40edd9
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Jul 6 12:49:59 2010 +0200

    printer.py: Don't let BasicMeta objects print themselves (Issue 1971)

    This fixes a crash when printing the class of an object that defines the
    printmethod.

    Signed-off-by: Andy R. Terrel <andy.terrel@gmail.com>

commit 942c32d9d837e7e26e814d63f8fba73bef75f648
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat May 1 04:25:08 2010 +0100

    XOR operator ('^') support for Booleans.

    This has the side effect of enabling it for Symbols also, hence the
    doc file change.

commit 7f33fc12abb27ea8420d81c94f7138b25f4c6300
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 5 22:13:26 2010 -0700

    Matthew added into AUTHORS

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 53bf7024b466c5076aa6a12d3d4dc3532533af58
Author: xiongchiamiov <xiong.chiamiov@gmail.com>
Date:   Mon Jul 5 01:06:42 2010 -0700

    Define __hash__ functions when __eq__ is overriden for Py3k support.

    As hinted at in a bugreport[0] and implemented several years ago in the
    py3k branch[1], in Python 3, overriding __eq__ without explicitly
    defining __hash__ will cause __hash__ to be set to None.

    I have merely defined __hash__ functions so that python2.7 rc2 will not
    display any warnings (about this) when run with the -3 flag.  Since we
    had not defined __hash__ methods previously, they are just calls to the
    super-class's __hash__.

    [0]: http://bugs.python.org/issue2235
    [1]: http://svn.python.org/view?view=rev&revision=51454

commit 8d42c585f0fd9e61083b5b832e4efc477e76403e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jul 5 11:57:58 2010 -0400

    Import all() from sympy.utilities.iterables in sympy/core/operations.py

commit 34a70c915704b3f70f415f74f92c947d239aeb3c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 4 10:48:12 2010 -0700

    Don't run mpmath pylab tests, if pylab fails to import

    It's important to also test that figure() can be created, because that can fail
    too, if the backend is not installed or not working (over ssh for example).

    Also use the "disabled" feature, instead of just printing some error on the
    screen, as it used to be.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 73bb08469ed9f9c2c733d6125afe123b5a93a053
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 4 10:41:08 2010 -0700

    fix the lambdify doctests

commit 46c25bf91a4c2a3cfedca653de2b20218032fc4f
Author: Matthew Brett <matthew.brett@gmail.com>
Date:   Thu Jul 1 16:38:05 2010 -0400

    Bugfix - lambdify dictionaries / modules namespace confusion

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c407198105c11057b94e804a8e1bc273131c6eec
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Apr 25 18:26:02 2010 +0545

    1808: facts change

        == core/facts
            o sometimes it is possible that a None value gets into the facts
              dictionary; if a new fact is known for that case, the assertion
              should not fail since the value previously (being None) is as
              good as not being present and the new known value can be added.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit f551bc918d6de3d65673472f474851de752595d7
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Apr 25 18:23:47 2010 +0545

    1832: import wildfunction

    A test was added and WildFunction was imported. Without this import
    that portion of the code would fail.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit a4b3ae1f1fac85a4933b0e31e76c7c140a71d3e6
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Apr 24 17:21:38 2010 +0545

    1794: fast divisors (Tim Peters) and divisor_count

    A less naive generator of divisors is included. I can take
    credit only in making it sympy compatible and updating the
    code a bit. Tim's amazing. ;-)

    Since changes were made to make divisor enumeration faster,
    a function divisor_count() was added which gives the number
    of divisors e.g. 4 for n=6 (viz. 1, 2, 3, 6). One needs only
    the factorization for this. Ref is included.

    The factors in primefactors were being sorted twice so that
    was changed and some tidying was done.

    The limit is now included when factoring a number; that way if
    someone wants to include everything up through a certain prime
    they don't have to remember to add a 1 to that value.

    The docstring for multiproduct was annotated a bit to make
    it clear what is happening.

    The built-in bisect replaces existing code.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 6aab282188d9674a5ae6123177b8ff5618e63671
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Apr 25 00:17:35 2010 +0545

    1918: sqrt speed up

    sqrt had a large time penalty associated with it because of
    the extra symping that was occuring and because of it using
    ** instead of Pow.

    >>> timeit('sqrt(1)', 'from sympy import S, sqrt')
    20.878364149633541
    >>> timeit('1**S.Half', 'from sympy import S, sqrt')
    14.745359815283763
    >>> timeit('Pow(1, S.Half)', 'from sympy import S, sqrt, Pow')
    3.2267961430852097

    After this patch, it can be used with less time-worries as
    sugar for Pow(x, 1/2):

    >>> timeit('sqrt(1)', 'from sympy import sqrt')
    3.983598194742628

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit dc2319c323e692cb5e370b3b4e0ee1c00fe05edc
Merge: 1b86eda 88beb0c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jun 14 18:13:09 2010 -0600

    Merge branch 'master' into mpmath-0.15

commit 88beb0ce998720c79fd98645b8da55178963f0c6
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Jun 14 23:45:47 2010 +0200

    Update --help for bin/test and bin/doctest with glob information

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit f8aad179a581039be2e25df8eb722c029063fab2
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Jun 14 23:35:58 2010 +0200

    fix whitespace

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 8601c27496cda707c0760715768ef70a90b1a61c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Jun 1 18:03:09 2010 -0600

    Remove unused variables from ode.py, as spotted by ./setup.py audit

commit e571b43585e85bf325074bd5c45f8789f69840ab
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon May 17 11:41:01 2010 -0600

    Fix things from the ode-coverage branch to work in Python 2.4

    This involves only using functools.update_wrapper if functools can be
    imported, removing a finally block that was used with except blocks (it
    wasn't needed anyway), and manually writing minkey(), which emulates
    min(sequence, key=func).

commit 5219003c184cbcc0bf5934706faa0a45c0b49104
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun May 16 22:37:41 2010 -0600

    Fix XFAILing test in test_ode.py

    The test is
    test_nth_linear_constant_coeff_variation_of_parameters_simplify_False().
    Previously, the test was testing the length of the string representation
    of a lengthy soltion.  This was a stupid idea of mine.  The important
    thing is that the Wronskian should not be simplified in variation of
    parameters when simplify=False.  So we just test if the two are
    different when simplify=True and when simplify=False.  See commit
    4e2056c1, which originally fixed this.

    If wronskian() becomes really good at simplifying trig expressions, this
    test might fail, but then, the whole thing won't be necessary any more
    anyway.

commit 3a6f8be2872e11abe01bb529e7b5a3680b038940
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun May 16 22:13:09 2010 -0600

    Make checkodesol back substitute f(x) when it can

    Previously, it would only back substitute derivatives.  This would make
    it impossible to reduce the expression returned on False to zero in some
    cases without first replacing f(x) with its solved value.

commit 35d243e48cff2604a9bc0287da125f3846a2ee7c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun May 16 22:12:25 2010 -0600

    Move XPASSing ode tests into regular tests

commit bf6d418cb95305c0145ea418cfc7f579b7b4de85
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun May 16 22:09:39 2010 -0600

    Add pretty printed versions of ode general forms to ode method docstrings

    Also fix a few comment typos and a superfluous variable assignment.

commit 0f03e5ea57de3828726aeb5e822d274b92e0535b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 15 17:00:16 2010 -0600

    Wrap decorators in functools.wraps

    Now the decorated functions keep their original name.  For example,
    help(expand) shows "Help on function expand in module
    sympy.core.function:" instead of "Help on function expand in module
    sympy.core.multidimensional:" (expand is decorated with @vectorize).

    Also, XFAIL tests show their name when running ./bin/test -v, for
    example:

    Before:
    $./bin/test sympy/solvers/tests/test_ode.py -v
    ============================= test process starts ==============================
    executable:
    /Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/
    Contents/MacOS/Python  (2.6.5-final-0)

    sympy/solvers/tests/test_ode.py[37]
    test_checkodesol ok
    test_dsolve_options ok
    test_classify_ode ok
    test_ode_order ok
    func_wrapper f
    func_wrapper f
    func_wrapper f
    func_wrapper f
    func_wrapper X
    func_wrapper s
    ...

    After:

    $./bin/test sympy/solvers/tests/test_ode.py  -v
    ============================= test process starts ==============================
    executable:
    /Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/
    Contents/MacOS/Python  (2.6.5-final-0)

    sympy/solvers/tests/test_ode.py[37]
    test_checkodesol ok
    test_dsolve_options ok
    test_classify_ode ok
    test_nth_linear_constant_coeff_homogeneous_RootOf_sol f
    test_nth_linear_constant_coeff_undetermined_coefficients_imaginary_exp f
    test_separable_1_5_checkodesol f
    test_1st_homogeneous_coeff_ode2_eq3sol f
    test_Liouville_ODE_xfail X
    test_1st_homogeneous_coeff_ode1_sol_fail f
    test_nth_linear_constant_coeff_variation_of_parameters_simplify_False f
    test_1st_homogeneous_coeff_ode4_explicit f
    test_1st_exact2 s
    test_ode_order ok

    help(expand) still shows expand(*args, **kwargs) instead of the correct
    expand(e, deep=True, power_base=True, power_exp=True, mul=True,
    log=True, multinomial=True, basic=True, **hints), because fixing that
    requires using the decorators function from the decorators module, which
    doesn't seem to support class decorators like @vectorize (I couldn't
    figure it out).

commit 3542041b584fcdd5064b358476bb6168b4b7c29b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Feb 22 21:08:13 2010 -0700

    This concludes the round of ode coverage expansion.

    This commit adds test for uncovered cases in
    test_undetermined_coefficients_match(), restructures a bit of code with
    make_list, and removes an incorrect comment (log(a, b) does NOT have
    args[1]).

    The total coverage for ode.py is now 99%.  The only parts that are not
    tested are code blocks that are there to handle corner cases that might
    come up, but for which I do not know of any specific examples that would
    cause them to run.  For example, there is a block in dsolve() to
    gracefully handle it if a solver raises NotImplementedError with the
    'all' hint (it includes the error object in the dictionary instead of
    just raising), but of course if a solver ever did this, it would be a
    bug and so I would fix that instead of using it to test this feature.
    The other parts are similar.

    I actually discovered a good number of bugs doing this, so I would
    highly recommend that we increase the coverage of all the code.  It's
    easiest to do for code that you yourself have written, because you have
    to look at an uncovered block and build a test from it.  Hence, I worked
    on ode.py.

commit e50ec773e9c9cc8cef9b57c74c82e89decbd26b4
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Feb 22 20:09:45 2010 -0700

    Remove unnecessary clause from undetermined coefficients ODE solver

    The clause was never used in the tests, and an analysis of the code
    reveals that it should never run (I think I confused trialset and
    newtrialset when I wrote it).  Also, replace list comprehension with
    [0]*10 syntax, and add note about as_Add.

commit 2ca0cfa281a1a7e64d3cd40c449fa8ea6494fceb
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Feb 22 16:25:23 2010 -0700

    More ODE coverage fixes

commit 563aab25d1ffa6436b6a30a292fb8623fa9ff061
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Feb 22 15:36:11 2010 -0700

    Add information to ode.py docstring about internal functions

commit 7c2f4ebec5ee498ccef8533f623ba5c0fa98c963
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Feb 22 15:34:43 2010 -0700

    Renamed ode_renumber to constant_renumber

commit d12a2aa656614be09398f515f3b087a26e302400
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Feb 20 13:13:59 2010 -0700

    Write ode_sol_simplicity() to replace compare_ode_sol()

    This is a key function replacement, which means it will be faster and
    Python 3 compatible.

    An analysis of the code showed that if the "all" hint is passed to
    dsolve() for an ODE with a complex solution (i.e., one that is not
    solvable in f(x), such as an ODE that matches the
    1st_homogeneous_coefficients hints), most of the time was being spent in
    compare_ode_sol() trying to solve the solutions (a solution that is
    unsolved for f(x) is considered more simple by this heuristic if it can
    be solved).

    ode_sol_simplicity() behaves identically to compare_ode_sol() when used as
    a key function to min instead of a cmp function to sorted, but it only
    needs to run once per solution, so it is much faster.  I also added a
    trysolving key to disable attempting to solve the solution if you
    already know it can't be done, (i.e., dsolve already tries unless it has
    the simplify=False flag).  This makes finding the best solution given a
    list of solutions that you already know are solved if they can be almost
    instantaneous.

    I replaced the use of compare_ode_sol in the code and all tests pass.

    Also, replace map with a list comprehension in test_constantsimp.py.

commit f76c5577c71091695177de43bf52fe47fbd87262
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Feb 12 09:08:14 2010 -0700

    More coverage tests for ode.py

commit 185d8849f3b6ea86188ca8e87fffbb2d8d16486b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Feb 12 09:08:14 2010 -0700

    Change mode of coverage_report.py and coverage_doctest.py to executable

commit bd4b727070d37ed81797940cf4bc27c702dbbf9e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Feb 11 19:31:33 2010 -0700

    Make ode.py pass coverage_doctest.py

    This consisted simply of adding "# indirect doctest" to the bottom
    of the ode_hint() method docstrings.

commit c2ad2961b3a48a3c632fb3d1851410888191cfb5
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Feb 11 17:06:58 2010 -0700

    Use list comprehensions instead of map() in ode.py

    See issue 1841.

commit c92a7ccaaea47f5fd2f08c36d9a45d9274bd44f0
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Feb 10 09:43:17 2010 -0700

    Add tests to increase coverage in ode.py, fixing bugs along the way

    Among the bugs fixed:
    - A bug where the 'best' meta-hint did not work in dsolve().
    - Fix dsolve() to internally not call classify_ode more than once per
      ODE as it was supposed to. Also add comments to the code explaining the
      structure of the dictionary that is passed through.
    - Fix duplicate code and bug in homogeneous_order simplifier, which
      results in at least one solution becoming solvable in f(x).

    See also further commits for more.

commit 483fc082e2e24ec9e358723321e59f5245ee5ba5
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Apr 13 11:53:33 2010 +0100

    Whitespace fix.

commit d707aeebf9df2cfcc2973210d64eb66988a8a998
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Thu Apr 8 00:47:17 2010 +0100

    Refactor _sympifyit.

    Now that sympify is faster, _sympifyit can be vastly simplified.
    To optimise it a bit more, the check on retval has been moved from
    run-time to compile time and the _sympify wrapper is bypassed.

commit d60e8bb876246abae183160e49d091b5dd7ae0ad
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Mar 31 07:41:10 2010 +0100

    Move imports from the bottom of files to the top and remove obsolete ones.

commit 73bb407fd9c0191a1e520dd4bbabe0ae82d0667b
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Feb 10 06:13:28 2010 +0000

    Refactor fallbacks in sympify

commit 2aecd0bbdd1352b1c9f001a0f600db226e3f898f
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Apr 11 01:46:52 2010 +0100

    Use a converter registry in sympify

    Conversion of external types should now be handled and registered by the
    classes implementing it.

commit 1ca37f2df9de15259fd6728f459fdf17f68fd45f
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Feb 6 19:34:38 2010 +0000

    Use the class registry in sympify()

    This makes the function a bit faster and removes the explicit (circular)
    dependency of sympify on Basic.

commit 42abf8c6f5bbf58ceeb2482cefa48923c69e8ae8
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Feb 6 03:21:41 2010 +0000

    Complement the global class registry with a set containing all sympy classes.

    Also, make FunctionClass an instance of BasicMeta (in addition to being
    a subclass of it).

commit 6176159e0e168c4123ede4e256c05daf892cdb1c
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Apr 11 17:29:07 2010 +0100

    Make _sympify into a wrapper for sympify

    The option 'strict' has been added to sympify:
    if True, raise an exception when encountering classes without
    an explicit converter (such as bool, list or str) instead of trying
    the fallback conversions that used to be done in sympify but not in
    _sympify.

    _sympify(a) is now a mere wrapper corresponding to
    sympify(a, strict=True)

commit 6bf6387e8501b3c3b187849c14292cdd58bd31cc
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Feb 10 02:28:25 2010 +0000

    Eliminate code duplication between sympify and _sympify.

    sympify calls _sympify instead of duplicating its function.
    * Behaviour change: _sympify now raises on booleans and None (see issue 1819)
    * Fix LatticeOp.

commit aecc52366cc3c4bc8043eda4745d2e15801c7045
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Mar 31 06:23:48 2010 +0100

    Move everything except Basic and Atom out of basic.py

    The whole singleton engine is transferred to singleton.py.
    The rest (BasicMeta, BasicType, C) to core.py.
    Fix test_pickling and galgebra accordingly.

commit 49f7e1582083484071d0a4b59704d34e8535d5b1
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Thu May 20 01:58:12 2010 +0100

    Create 'Application', a superclass of Function that derives directly from Basic.

    * Moved overrides of methods defined in Basic from Function to Application
    * BooleanFunctions subclass Application instead of Function

commit e89bfc77633892ef069d2b8b3aee8e6fd5981135
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri Apr 30 01:10:35 2010 +0200

    Fix issue 1864 (is_commutative is not always set)

    In the creation process of AssocOp and Pow the is_commutative attribute
    was not set if the keyword evaluate=False was given.
    Also tests are added.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 1b86edabb999131b0b7dfe5f3286fb2cfdaaf699
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Jun 10 15:26:14 2010 -0600

    Fix the Interval(0, 1).evalf() bug from mpmath 0.15

commit 17e548d624dc176cc27823ac8c6ed359b70d3b46
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jun 9 18:49:38 2010 -0700

    pyglet: fix string exceptions

    This fixes the Debian bug #585334

commit f4290223f8fba24b6437cbddde87b4f13c567e46
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jun 7 14:02:39 2010 -0600

    Update mpmath docs from mpmath-0.15

commit fdac1eb21e2ece538de79504b71c6d6048930228
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jun 7 11:54:20 2010 -0600

    Fix mpmath tests to pass

commit 372e6aba2a7b3b31e7809cc2a250796bb35c0b97
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jun 7 11:15:47 2010 -0600

    Preliminary update of mpmath to mpmath-0.15

    So far, only the imports and the carriage returns have been fixed.

commit 69c54a4364f7c9ba2abaeb750a73c582902351e3
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jun 7 11:13:58 2010 -0600

    Fix help in bin/strip_whitespace

commit b5d9aa0d42fd1e44f2a244dcd748b3a9ed804389
Author: Akshay Srinivasan <akshaysrinivasan@gmail.com>
Date:   Fri Jun 4 01:28:58 2010 +0530

    Symbolic with lambdify

    Signed-off-by: Akshay Srinivasan <akshaysrinivasan@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 94759fcbd5af765f1f41b1089a3e62f63b83a2fd
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 15 22:17:17 2010 -0600

    Add Jez to credits.  Welcome to SymPy!

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit f35cdb5ecbce4aee199a8a26492ca1b3a2efe3a4
Author: int3 <jezreel@gmail.com>
Date:   Sun May 16 11:43:22 2010 +0800

    Add rewrite tests for hyperbolic functions

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit dd749908d0633d97f0c718b18508e17575b90277
Author: int3 <jezreel@gmail.com>
Date:   Sun May 16 11:42:57 2010 +0800

    Fix _eval_rewrite_as_exp for hyperbolic functions

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 1e8f8f2fc214a6da5a06676c2afb1078b6589044
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue May 4 19:46:46 2010 +0100

    Automatic evaluation of simple cases in Equivalent

    Equivalent() and Equivalent(A) (and also Equivalent(A, A)) return True
    Equivalent(True, *args) returns And(*args)
    Equivalent(False, *args) returns Nor(*args)
    Added tests for this behaviour

commit ad4266be51334103f0587391ff87103fdb3eac9d
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat May 1 04:28:18 2010 +0100

    Refactor eliminate_implications()

commit baa4d9383f17b776de5a51711d4987dcf883dd31
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Apr 18 03:01:21 2010 +0100

    Fix inconsistencies in boolean algebra.

    * Equivalent required its arguments to have arithmetic comparison defined.
    * To check for that kind of error, tests in test_boolalg.py use instances
         of Boolean instead of Symbols.
    * Nand and Nor now call And and Or immediately
    * Since Or() is False, the correct value for Nor() is True.
    * Xor stops raising an exception with non-Boolean args.

commit e2d81abb73466965be520b5411492eab3487062c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue May 4 16:10:29 2010 -0600

    Fix issue 1929 - diff bugs

    There were two unrelated bugs in diff().

    In [3]: print diff(f(x, y, z), x, y, z, 2)
    D(f(x, y, z), z, x, y, z)

    In [4]: print diff(f(x, y, z), x, y, z, 2, evaluate=False)
    D(f(x, y, z), x, y, z, z)

    The second one is correct, and not they both return that.

    In [6]: print diff(-z + x/y, (z, x, y))
    [D(-z + x/y, z), D(-z + x/y, x), D(-z + x/y, y)]

    It should return [-1, 1/y, -x/y**2], and it now does.

    Added tests, also a test for another thing that works fine, but was
    similar to something fixed.  Also, removed commented print statements.

commit 98c4b09e185b951604f5ca60144a12b8c3c63395
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon May 3 12:16:13 2010 +0200

    Fix missing brackets in latex output of  (-1)**x

       Before:   -1^{x}
       Now:      \left(-1\right)^{x}

       Added a test

commit a2964121d603cb015a01f1fe42be9a7620d64ca7
Author: Christian Schubert <chr.schubert@gmx.de>
Date:   Tue Apr 27 13:32:27 2010 +0200

    fix issue 1889 and add a test

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit c54f239d1c7df631986727880a8c4eda1b14dd90
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Apr 27 23:31:27 2010 +0200

    add a test for wrong args to Matrix()

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 84e9456f9aa33825a93f0ecbc571da6c197148bd
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Apr 27 23:28:10 2010 +0200

    fix matrix test, remove unused imports

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 693d1cfe6b6ba4c35fcd8d87b4ddd09726e590b9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Apr 26 14:48:54 2010 +0200

    remove deprecated code

    As of 0.7.0, we do no longer support creating matrices without brackets.
    See issue 930.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1a8d37734cf8dd458ab623dd0879eb86d5689915
Author: Christian Muise <christian.muise@gmail.com>
Date:   Tue Apr 6 15:20:45 2010 -0400

    Changed the doctest output to coincide with the new ordering of arguments.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e39d538ec5b5318712526e0e2baa25e0c3e6ce96
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Apr 26 21:10:45 2010 -0700

    Improve the docs for the preview() method

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Jan Minar <jmminar@googlemail.com>

commit ec99a1f920c6469277ac4bbb3897aa1211ea557d
Author: Raffaele De Feo <alberthilbert@gmail.com>
Date:   Fri Apr 16 03:00:07 2010 +0200

    Fixed failure of 'has' method

      modified:   sympy/core/basic.py
        fixed failure of 'has' method when argument is 'Symbol'
        or 'Wild', see Issue 1902.

      modified:   sympy/core/tests/test_expr.py
        added some tests related to that issue.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Chris Smith <smichr@gmail.com>

commit 717516b8ffae806cdfdea8141ceb839107d92431
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Mar 21 22:21:54 2010 -0600

    Fix sympy to work with Python 2.7 (alpha 4)

    I have also tested it in Python 2.7 (beta 1).

commit 99fe0ab9a375789caf8d638aac52a9c354d9d714
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Apr 20 23:48:54 2010 +0100

    Code simplification in sympy/printing/

    Remove StrPrinter.emptyPrinter (NB: Basic.__repr__ === Basic.__str__).
    Make Printer.emptyPrinter and Printer.printmethod class attributes.
    Remove some dead code

commit fc83355955056eff3df78dbcf06e4468d4a8d1e4
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Wed Apr 21 00:17:34 2010 +0100

    Import sympy.printing.sstr instead of monkey-patching modules.

    sympy/printing/__init__.py hacked into other modules to define
    their printers. They're now imported explicitly which makes the
    code easier to understand.

commit d4051c7c2dbeafd57fb31d4d8169276198eff571
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Apr 19 15:59:08 2010 -0600

    Add Kazuo to credits.  Welcome to SymPy!

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit d1be5b5e502538d14b70b1aa3131685ebffd450d
Author: Kazuo Thow <kazuo.thow@gmail.com>
Date:   Sun Apr 18 18:20:46 2010 -0700

    Merged test_pretty.py and test_pretty_unicode.py

    All pretty-printing tests are now in test_pretty.py,
    with embedded newlines removed for better readability
    and ease of reference.  Clarifying comments and blank
    line removals suggested on the issue 700 page have
    also been done.

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Toon Verstraelen <Toon.Verstraelen@UGent.be>

commit 024d073e5b5b0583465220bff70efc36046b97ee
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Apr 19 21:46:32 2010 +0200

    Use 'is' instead of '==' for speed's sake

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit ddc6c37888fa25b98797ce27fdef7ce37bceb0b2
Author: Raffaele De Feo <alberthilbert@gmail.com>
Date:   Mon Apr 19 14:47:31 2010 +0200

    Fix evaluation of power with noncommutative Mul as base (see Issue 1904)

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 8d3d2eb3b89f7c6efb9fdbef62530394953ee0ce
Author: Matt Curry <mattjcurry@gmail.com>
Date:   Thu Apr 15 22:24:42 2010 +0200

    Changed printmethod names and methods from "_foo_" to "_foo"

commit 2bb2fe4d4ceebb2faf2d7e7d069f1dbec3d58d75
Author: Felix Kaiser <felix.kaiser@fxkr.net>
Date:   Tue Apr 13 17:30:28 2010 +0200

    Add elementwise product (Hadamard product) to Matrices

commit 61c5267a91e997e4b755cc3f75268319b42a5a80
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Thu Apr 1 03:45:59 2010 +0100

    Remove Basic.has_piecewise

    This method was used only once and expr.has_piecewise is equivalent
    to expr.has(Piecewise) so making this a property is not useful.

commit 36736b9accaefdf0c061115d9d9661c57e92e342
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Mar 31 21:29:21 2010 +0100

    Transfer comparison methods from Basic to Expr.

    >, >=, <, <= have their usual meanings only for objects for which
    the usual arithmetic operations have their usual meaning. Therefore,
    they should be in Expr like +, *, ...

commit 635d89c3c53fd84cc884e0ab62dc3f03480fe76a
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Apr 6 05:20:04 2010 +0100

    Create boolean base class logic.boolalg.Boolean.

    Magic methods for logic operators were moved from Basic to the new class.
    This required a lot of import-fiddling.

commit 6ebb252c8b4dc3966f031ba2f382dab3fdfbea46
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Jan 23 05:43:32 2010 +0000

    Remove Basic.__nonzero__.

    The default implementation (in object) always returns True - which is also
    what all subclasses of Basic should return, with the sole exception of
    class Zero.

commit 6c47ed499efc06b6c1e83133cd7180cbe8b53fdb
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Thu Jan 21 04:13:36 2010 +0000

    Add elementary tests for Basic.

    Recreated test_basic.py, moved the end of test_expr.py there and add more
    tests using only the class Basic.

commit 0ea3c4b9a80bbf84981a459225bd536254e23210
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Jan 20 18:29:50 2010 +0000

    Rename test_basic.py to test_expr.py.

    In preparation for implmenting properly self-contained tests for Basic.

commit b35523f4de9a7b844d574148686303d573381621
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Apr 6 04:52:42 2010 +0100

    Move EvalfMixin to evalf.py, where it belongs.

    This removes a case of monkey-patching.

commit f2a90ecf788605dfcded2fab3fe8596658303fe5
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Apr 6 04:49:10 2010 +0100

    Move Expr to its own file.

    Expr and EvalfMixin were moved from sympy/core/basic.py to
    sympy/core/expr.py. This required extensive fiddling with import order.

commit a342c2359f824e5e3a4648c71094e58c8da31fbe
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Jan 19 19:32:34 2010 +0000

    Move .expand() and friends from Basic to Expr

commit 3b38a6a1c1092da84898da60c9c9acc8f2abee19
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Jan 18 00:17:32 2010 +0000

    Transfer more methods from Basic to Expr:
    _eval_interval, _eval_power, _eval_derivative, _eval_conjugate, conjugate,
    removeO, getO.

commit 28b697d24e5a7315013006f9d348cfbf4f260a52
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Jan 16 03:01:04 2010 +0000

    Remove unused private functions.

commit 26f67e70d7dd4fa13c32d488e5487ff326c34ea8
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Jan 11 19:07:50 2010 +0000

    Transfer magic methods for arithmetic operators from Basic to Expr

commit 166283df2df1f5d443d3bac67c316f9bc424f6f3
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Jan 10 23:37:58 2010 +0000

    Make Basic.solve4linearsymbol a function and transfer it
    to sympy/series/order.py.

commit 0362747e5f433f904dc446a0e3032503b7aa3fe3
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Apr 6 04:30:49 2010 +0100

    add __slots__

commit a0ab479fdfd80f7e8c22ad36fc385d2be59ed769
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Apr 5 22:35:03 2010 +0100

    Split class Basic

    Basic should deal only with argument storage and expression manipulation
    (pattern matching, substitutions, etc.). Everything that requires
    arithmetic operations to be defined is being moved into a new class, Expr.
    Ultimately, this should allow Basic to be defined without referring to any
    of its subclasses, thus eliminating circular imports.

    Most classes that used to subclass Basic should now subclass Expr.

commit e82ca58a45435d6a819aa8036b09508c9f365dc2
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Apr 5 13:46:46 2010 +0200

    fix Symbol docs

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Øyvind Jensen <jensen.oyvind@gmail.com>

commit 00dff963454d123568fa02cae7f1756b6b22bb3b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Wed Mar 31 12:37:08 2010 +0200

    Fix for Symbol.as_dummy() loosing commutative property

    Added a test.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 761d347b62bd5fbaea462f22d289825495af7a59
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Jan 27 00:13:05 2010 +0545

    1813: typos in ratsimp and solver; reformatting

commit 0305d07bc77327a9c6ad27b743294b46da116066
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Mar 3 20:00:57 2010 +0545

    1848: code_quality refactored; no tabs in snippets

commit ad3eb7fa698ce2db0cdda0de6e5cd9ebb8111583
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Feb 27 12:53:59 2010 +0545

    1845: code quality test can see \r\n

    When a file is opened in "r" mode all lines appear to
    end in \n. You must open for reading (and writing) in
    binary mode if you want to see (and correct) the line
    endings. These changes have been made to the whitespace
    fixer and the code quality tester. The same "b" mode
    is used when opening for writing to keep files from being
    written in a system-dependent format rather than with
    the \n endings that are being enforced.

commit 39d4175275590f57a21db2e57cb23b0433958410
Author: Christian Muise <christian.muise@gmail.com>
Date:   Mon Mar 29 01:15:18 2010 -0400

    Found and fixed a critical bug with the DPLL solver.

    The DPLL method was failing for satisfiable theories that didn't have
    any pure literals or unit clauses to begin with (ie. decision points are
    needed). This has been fixed, and a minimal test that covers the case was
    added.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 35c67e3dae62d095cc1a584fc134b65d1102b9d2
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Mar 27 05:48:11 2010 +0000

    Use sets in the integer representation for DPLL.

    Tests were generalized, because with the set implementation, the choice
    of the symbol for which to try both alternatives has become
    "non-deterministic" so (almost) any model satisfying the clauses can be
    returned.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit f3ef1786eedb07249715b4d75782906ead5f89ae
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Mar 29 18:39:15 2010 +0200

    credits

commit b5ed4f9867f86d2e93830182737015502e921560
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Mar 28 16:06:35 2010 +0200

    Commutator in secondquant.py should use cmp() instead of a<b

commit 9d00dc60e3c455f7aac12cb82dbf44a8cd2b4317
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Mar 29 12:37:30 2010 +0200

    Added a test for comparison of noncommutative symbols

commit 302bc01d18ef072a899a4d6707dec08f3cb5bb76
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Mar 28 10:29:39 2010 +0200

    Fix Basic.__lt__() and friends for noncommutative symbols (issue 1878)

    All comparisons of for non-commutative symbols used to return False.  Now
    an Inequality or StrictInequality is returned instead.

commit 6fd84163f1258ee6eb2c24d3d879ba4debd53320
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Sat Mar 27 13:09:33 2010 -0700

    lambdify(Piecewise) now uses iff for Python 2.4 compatability.

commit 3b35f11c55d6ef6446dd221b5c801507ccbf1d5d
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Sat Mar 27 11:14:48 2010 -0700

    Added PrettyPrinter.printmethod = "_pretty_".

commit d76cb5d137934dd41f04381932d58e7c867083fe
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sat Mar 27 09:35:43 2010 +0100

    Line wrap and removed trailing white space in evalf doc

commit 02f66f59c90f7f449c521245cdbd82a68d135e22
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Wed Mar 3 06:25:14 2010 +0100

    TypeError for wrong arguments and maxprec to maxn in evalf

commit a95d687874ea525440ccbbeb821eb8d9aa4fdedf
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Feb 21 18:12:17 2010 +0100

    Consistent printer API

commit 7066ab8f83f70167f729620205b4f01c69068770
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Wed Mar 24 21:56:27 2010 -0700

    Fixed doctests for bsplines module.

commit 3962a757a1f404e8abbad461c3d444b5fe91a65f
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Sun Mar 21 11:14:50 2010 -0700

    Addressing review comments.

commit ce4f57763d81bfd61e3b49b91e1d1ee1d67650d0
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Wed Mar 10 15:06:15 2010 -0800

    Final work on B-splines.

    * Made ExprCondPair a Function to allow for the _eval_expand_*
      method of Function to work. This makes it possible to do
      expand(Piecewise(...))
    * Fixed a bug in the Piecewise creation that was over simplifying
      when cond was True.  Added tests.
    * New tests for Piecewise to test everything.

commit 30b0314cbc9add6053c1a6860b6bc1436917dbc2
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 9 19:29:14 2010 -0800

    Removing debug messages.

commit 78330f50238fc85331631aa907429944b9370f0a
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 9 18:37:36 2010 -0800

    Added better docstring and doctests for B-splines.

commit c3cc108185cf0d317946b585fc96139bed757313
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 9 15:49:30 2010 -0800

    More work on B-splines.

    * Piecewise works with Set, not just Interval.
    * First test of repeated knots.

commit 245df1b0c9b64c24ad6711d2ca072eb781172f31
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 9 14:29:29 2010 -0800

    Initial tests for B-splines.

    For now, the tests are only for uniform, non-repeated knots.

commit 0f18ef28253d381489d22a1451a39697fca8950b
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Sun Mar 7 21:01:24 2010 -0800

    Working implementation of B-spline basis set.

    * This includes lambdify support for B-splines and Piecewise.
    * Fixed lambdify forms of And, Or, Not, Piecewise.

commit 513e52574d54af6fe9772f461902a894d95899a6
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Wed Mar 3 22:22:57 2010 -0800

    First draft of B-spline basis set.

commit 239c4e05140b4f8cbfeeb2e91e132911f2427b1c
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Wed Mar 3 16:43:06 2010 -0800

    Added support in Piecewise for collapsing nested Piecewises.

    This means that Piecewise((Piecewise(x,x<0),x<0)) becomes
    Piecewise((x,x<0)). This currenty only works when conditions
    are exactly the same.

commit a7c55fbd27aee1b6639913068a5528a491e118a7
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 2 13:07:24 2010 -0800

    Initial support in Piecewise for Interval.

commit 0d2b61d13e0031ec13e1279175baa7eae7997d89
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 24 15:46:05 2010 -0700

    symarray: change the order of parameters

    As discussed here:

    http://groups.google.com/group/sympy/browse_thread/thread/453997f88e203b11

    The new order of parameters is more natural.

commit 9ff5f667b813b82fe8fd9bda8426df0bf02cf611
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 24 15:50:37 2010 -0700

    bin/isympy: implemented the --doctest option

    This option produces the following output:

    >>> x**2
    x**2
    >>> x**2/3
    x**2/3
    >>>

    That can be copy & pasted into docstrings (e.g. it uses the right syntax and
    the right printing order that we use in our doctest runner).

commit e8cb04a8495c21dca219ada13100d59b3cda484a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 24 15:54:32 2010 -0700

    bin/isympy: make the -p switch working again

    There was a trivial typo in the script

commit 5b3acc2d35c06554bce1b8d2245b14e1831304df
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 19 19:48:12 2010 -0700

    test_sage.py: add the tests into the Sage doctest suite

    So that this file can be copied verbatim to sage and it will automatically get
    tested by Sage.

commit 0c17c1759b6f0cf74aba1c0dcefb6526870c2118
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 19 19:35:15 2010 -0700

    mpmath: test for sage_utils.bitcount

    And don't use Sage if this fails.

commit f074916abb908055bcd405cab755de51ceedc378
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 19 18:45:59 2010 -0700

    atan2(y, x) can now be converted to/from Sage

    A test for this written.

commit 7a9fdbbf5142d8ade8ee216a154922c52fe2b0dc
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 19 17:41:06 2010 -0700

    test_sage: Use S() instead of sympify()

    S() is shorter and corresponds to the SR() in Sage.

commit c06601e8175ee5b1a0ce03207cdd71c02358a283
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Mar 24 23:19:11 2010 +0100

    Welcome to SymPy!

commit c05abba0887d2fe58acea71e4edb70bad3044754
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 24 15:14:03 2010 -0700

    mpmath plot tests: fixes the TclError exception

commit bdbe72e7399b7caeb7b9fc4c15c05bcc7b801e8c
Author: Christian Muise <christian.muise@gmail.com>
Date:   Sun Mar 21 23:45:40 2010 -0400

    Modifying the default behaviour of the Implies object to adhere to NNF.

      In order to keep the behaviour of the logic module uniform, the Implies module
    has been changed to keep boolean expressions in negation normal form (NNF). This
    follows the example of xor, nand, nor, and not. Specific changes include:

    - Creation of Implies(x,y) is compiled to Or(Not(x), y) automatically.
    - A ValueError is thrown when the number of arguments doesn't equal 2.
    - Docs were updated to reflect the new usage.
    - Tests were added to test the new functionality, and a (seemingly incorrect) test
      that already existed was fixed:
    -- Implies(False, False) should not evaluate to True

commit 5c81192e6438b03b9637336458f2b1c9d403e75b
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Mar 21 22:41:32 2010 +0100

    Fixed all but one audit warnings in printing

commit 23195b845dafb746722499026b595e648e42b332
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Fri Mar 19 15:06:54 2010 +0100

    add check_symmetry=True argument to vech method

    Signed-off-by: Toon Verstraelen <Toon.Verstraelen@UGent.be>
    Signed-off-by: Ben Goodrich <goodrich.ben@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 0ba1151349b12c0d0eed649c7782ed6fc9ab60e9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Mar 19 20:35:28 2010 +0100

    update credits

commit 2c1d92a8b5eafe5cabb917d7b331abeec95b477b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Feb 23 20:34:31 2010 +0100

    Fix resolutor consistency check in ask()

    An exception could be raised as a false positive.  We should only
    demand consistency between two resolutors if they have both reached a
    conclusion.  Before this patch, an exception would be raised in the event of an
    inconclusive resolutor following a conclusive.

    Added a test for the issue

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 5f1fdd1010478a64e7718508b279033d270ee987
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Mar 19 14:28:11 2010 +0100

    credits

commit 9a2761ddf8c5284d7e694e841cdb82b0d395c25e
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Feb 23 10:27:43 2010 +0100

    refine: Let refine_Pow work harder to simplify powers of (-1)

    Before, 'refine_Pow' would simplify (-1)**exp only if 'exp' as a whole could
    be determined as even or odd.  A doctest like,

    	>>> refine_Pow((-1)**(x+y), Assume(x, Q.even))
    	(-1)**y

    would fail.  This patch fixes that by treating powers of S.NegativeOne as a
    special case.  Every term in the exponent is checked, and even terms are
    simply discarded.  Odd terms are collected to an even quantity and then
    discarded, possibly introducing a new term +1 in the exponent.  Finally,
    a number N is replaced with N % 2.

    We are now able to refine:

    	>>> refine_Pow((-1)**(x+y+z), Assume(x, Q.odd) & Assume(z, Q.odd))
    	(-1)**y
    	>>> refine_Pow((-1)**(x+y+2), Assume(x, Q.odd))
    	(-1)**(1 + y)
    	>>> refine((-1)**(x+3))
    	(-1)**(x+1)

    These examples are implemented as doctests and regular tests.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 46f3bb51d54367d48113c2e0090dcaffb43020f7
Author: Toon Verstraelen <toon.verstraelen@gmail.com>
Date:   Wed Feb 24 14:16:04 2010 +0100

    initial fcode implementation

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 003f52d13a73c3aac0d27952b49b27b7b1c238f3
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:57:26 2010 +0200

    Remove unused imports under sympy/solvers

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3a6a4c2830f03c1469ce44209cba58c6c68a6d25
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:47:48 2010 +0200

    Remove unused imports under sympy/series

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 13d8daf2f83dfcbaf0a5344c13e52f17a3902bb5
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:13:52 2010 +0200

    Remove unused imports under sympy/plotting

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fd33070b0fdaff1de713209b38f94a5755636082
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:15:27 2010 +0200

    Remove unused imports under sympy/logic

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c860e11d2d6269f2b1368558df6a24a7bd0ef3d0
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:08:03 2010 +0200

    Remove unused imports under sympy/ntheory

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6ba96d0f66a2e232fd913f165dd270c5c2caa81e
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:05:41 2010 +0200

    Remove unused imports under sympy/matrices

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit efc586f8cada455103db524d5d63e74017b28dff
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:04:27 2010 +0200

    Remove unused imports under sympy/integrals

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 56db64514a9bda265b690853a3de05878b332532
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 22:00:06 2010 +0200

    Remove unused imports under sympy/geometry

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4fad54fe94a69dab3f2bfd599b2cf752005122e6
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 21:58:20 2010 +0200

    Remove unused imports under sympy/galgebra

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 25cd4a683414375edbaee1e58e277b442d35d0d3
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 21:33:46 2010 +0200

    Remove unused imports under sympy/functions

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2691d68a4526e6c59be05be54e8ad3f91dc4663f
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 21:08:50 2010 +0200

    Remove unused imports under sympy/core

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c38ebc4370c533d18405de61827a6ee05582074b
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 20:42:13 2010 +0200

    Remove unused imports under sympy/concrete

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5f4981a37371410cc53c27958780cdcce7560d22
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 17 20:28:43 2010 +0200

    Remove unused imports under sympy/assumptions

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 64bec0b8e13179349658b6fe84ab77a6ba300fe4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 17 15:19:45 2010 -0700

    isympy: mention IPython

    Before we didn't mention IPython at all:

        $ bin/isympy
        Python 2.6.4 console for SymPy 0.6.7
        ...

    and

        $ bin/isympy -c python
        Python 2.6.4 console for SymPy 0.6.7
        ...

    After this patch we mention IPython if it is used:

        $ bin/isympy
        IPython console for SymPy 0.6.7 (Python 2.6.4)
        ...

    and mention just Python if IPython is not used:

        $ bin/isympy -c python
        Python console for SymPy 0.6.7 (Python 2.6.4)
        ...

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 769cf9f2ed5bf6eddfc600e21c9113ea3f41cd2b
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Mar 19 00:03:42 2010 +0100

    update credits

commit 98feaac3d5deb11229e2e78b8df68e4f8affc2a9
Author: Ryan Krauss <ryanlists@gmail.com>
Date:   Thu Jul 23 16:29:09 2009 -0500

    Latex Printing: change from inline=True or False to mode with 4 options

    Latex Printing now takes a keyword arguement 'mode' which can be one
    of 'plain', 'inline', 'equation', or 'equation*'.  'mode' replaces
    'inline'.  There is a deprecation warning if 'inline' is used as a
    keyword arguement, but it is handled gracefully for now :

    'inline'=True --> 'mode'='inline'
    'inline'=False --> 'mode'='equation*'

    The tests, docstring, doctests, and tutorial all reflect this change.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 5d78c2959fe01e7f2cf4b3844978be781dc318a8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 18 11:10:23 2010 -0700

    Starting a new development cycle

commit 9cd251dcda0415705d5eabe2496fc561b96bca45
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 17 19:06:06 2010 -0700

    Fixes the __class__ AttributeError exception in printing

commit 5ec01bc57d70ce1bbff115be0325fc0cf80212b4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 17 17:26:23 2010 -0700

    Polys: fixes the test for real numbers

    Instead of testing 0.6==0.6, we now test abs(0.6-0.6) < 1e-10

    The _eq() function that does this should be put somewhere in sympy, so that we
    don't have to reimplement it over and over again.

commit 0ca61a8e9fbb3164244746864981d528994dea17
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 18 02:51:56 2010 +0100

    Improved test concerning dmp_integrate_in() (over QQ)

commit 323247c9a19f5afb4848c2fce645625b0730221b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 18 01:56:30 2010 +0100

    Fixed gf_crt1() to correctly truncate gcdex() results

commit d0ac0f446bcab607be4c498ad6d2a35fdc09e18d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 18 01:55:05 2010 +0100

    Trivial fix to RR_{sympy,mpmath}.from_QQ_gmpy()

commit f186b187dc49c1fd7c6ef29cf3ab1dfa57274665
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 18 00:03:10 2010 +0100

    Made Algebra.of_type() more precise (oo not in QQ)

commit dc7483c92b8a754d4761d945b96f988952c79226
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 17 23:58:52 2010 +0100

    Simplified get_{ring,field} functions in algebratools.py

commit 76f01a530bdfe3154d7dd7075cdd45316b2c7260
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 17 23:40:51 2010 +0100

    Fixed sympy.polys to work with new version of mpmath

commit ffb3800764b6c2ed1713263fafecb9d42fe00da1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 17 23:20:10 2010 +0100

    Temporarily disabled testing of doc/src/modules/polys

commit b05f0751710b3b5192bddd4bbee4b6f02be87ba9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 17 23:19:01 2010 +0100

    Added 'n' to var() in doc/src/modules/polys/wester.txt

commit 1f8b130e2bb7ea637c4526816324e481913bbffb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 17 01:14:05 2010 +0100

    Added trunc() to tutorial with Wester's examples

commit d2e2c1f2660831115c80e7d260bc0b5114b75d0c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 17 00:44:05 2010 +0100

    Added a function for reducing polynomial coefficients

    Consider a polynomial over F_65537:

    In [1]: f = x**11 + x + 1

    We can factor it:

    In [2]: factor(f, modulus=65537)
    Out[2]:
    ⎛         2⎞ ⎛     2    3    5    6    8    9⎞
    ⎝1 + x + x ⎠⋅⎝1 - x  + x  - x  + x  - x  + x ⎠

    and then expand to get 'f' back:

    In [3]: expand(_)
    Out[3]:
             11
    1 + x + x

    We can do the same with non-symmetric representation:

    In [4]: factor(f, modulus=65537, symmetric=False)
    Out[4]:
    ⎛         2⎞ ⎛           2    3          5    6          8    9⎞
    ⎝1 + x + x ⎠⋅⎝1 + 65536⋅x  + x  + 65536⋅x  + x  + 65536⋅x  + x ⎠

    This time, however, we need to truncate coefficients of
    the expanded polynomial modulo 65537 to get 'f' back.

    In [5]: trunc(expand(_), 65537)
    Out[5]:
             11
    1 + x + x

commit 1c237920533a243df5d94251af55b4d9f8a7ea93
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 15 18:00:42 2010 +0100

    Started writing documentation for sympy.polys module

    Created initial documentation structure in doc/src/modules/polys
    and added a tutorial with examples from Wester's "Critique of
    the mathematical abilities of computer algebra systems".

commit c4df9bdfda35b1958007810e166bfa6d0016a991
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 16 22:09:44 2010 +0100

    Added a notice about splitting extensions to Poly

commit de5573b58c1ce60d6a192f805e86e69fdec16510
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 15 17:59:06 2010 +0100

    Fixed solve_polynomial_system() for a list of Polys

commit 3b5084870a4a097c4d1b57785474e230f89bd16e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 16 10:03:34 2010 +0100

    Improved speed of symmetrize() by avoiding expand()

commit fe75764c8dc35c6ea72af4d083ca8cbbc3c78d33
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 16 09:44:06 2010 +0100

    Allow passing gens as a container in symmetric_poly()

commit 8db3bbf49c96cd606dec334b82952562e1728b50
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 16 09:41:36 2010 +0100

    Moved _analyze_gens() from polytools to polyutils

commit 6d560f3569636db07bce8de1ec91bebff2623354
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 15 23:52:34 2010 +0100

    Implemented function for computing symmetric reduction

    The new function is symmetrize(). It takes a multivariate
    polynomial (not necessarily symmetric) and rewrites it in
    terms of elementary symmetric polynomials. The output is
    formed as a tuple with the symmetric decomposition and
    the non-symmetric part.

    Example:

    In [1]: symmetrize(x**2 + y**2)
    Out[1]:
    ⎛                2   ⎞
    ⎝-2⋅x⋅y + (x + y) , 0⎠

    In [2]: symmetrize(x**2 + y**2, formal=True)
    Out[2]:
    ⎛          2                         ⎞
    ⎝-2⋅s₂ + s₁ , 0, {s₁: x + y, s₂: x⋅y}⎠

    In [3]: symmetrize(x**2 - y**2)
    Out[3]:
    ⎛                2      2⎞
    ⎝-2⋅x⋅y + (x + y) , -2⋅y ⎠

    In [4]: symmetrize(x**2 - y**2, formal=True)
    Out[4]:
    ⎛          2      2                      ⎞
    ⎝-2⋅s₂ + s₁ , -2⋅y , {s₁: x + y, s₂: x⋅y}⎠

    In [5]: Add(*_1).expand()
    Out[5]:
     2    2
    x  + y

    In [6]: Add(*_3).expand()
    Out[6]:
     2    2
    x  - y

commit 3c62f3300f3b5c6caffcc37554a128d93438112b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 15 19:29:05 2010 +0100

    Implemented degree() and degree_list() functions

    One can now easily compute degrees of expressions, e.g.:

    In [1]: degree(x**2 + y)
    Out[1]: 2

    In [2]: degree(sin(x)**2 + cos(x), wrt=sin(x))
    Out[2]: 2

    In [3]: degree_list(x**2 + y)
    Out[3]: (2, 1)

commit 4ecd406f6e30e35a9835d8bfefada9e4d11e946d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 14 21:41:14 2010 +0100

    Symbol spec in apart() isn't mandatory any more

    In univariate case one can simply write:

    In [1]: apart(1/(x+1)/(x+2))
    Out[1]:
      1       1
    ───── - ─────
    1 + x   2 + x

    However, in multivariate case symbol specification is
    required to give meaning to expression's variables.

commit 2686805263d86639420ae56414666d38f0efaa8c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 14 21:18:04 2010 +0100

    Fixed and improved solve(x**4 + x**3 + x**2 + x + 1)

commit b54f5a4d0482ffe6d538a61666dcfb14392e3aa6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 14 20:06:55 2010 +0100

    Implemented expansion of (x + y)**p/q where q != 1

    In [1]: a = (x + y)**Rational(1,2)

    In [2]: a
    Out[2]:
      ⎽⎽⎽⎽⎽⎽⎽
    ╲╱ x + y

    In [3]: expand(a**3)
    Out[3]:
        ⎽⎽⎽⎽⎽⎽⎽       ⎽⎽⎽⎽⎽⎽⎽
    x⋅╲╱ x + y  + y⋅╲╱ x + y

    In [4]: factor(_)
    Out[4]:
           3/2
    (x + y)

    In [5]: expand(a**5)
    Out[5]:
     2   ⎽⎽⎽⎽⎽⎽⎽    2   ⎽⎽⎽⎽⎽⎽⎽           ⎽⎽⎽⎽⎽⎽⎽
    x ⋅╲╱ x + y  + y ⋅╲╱ x + y  + 2⋅x⋅y⋅╲╱ x + y

    In [6]: factor(_)
    Out[6]:
           5/2
    (x + y)

commit 6a26941dcb53981eba5fb4d56b51829285d8c266
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 14 16:38:14 2010 +0100

    Added Basic.keep_sign to disallow minus sign change

    By default SymPy applies the following rewrite rule:

                   x*(x - 1) -> -x*(1 - x)

    which is often very incovenient. Basic.keep_sign is a flag
    to indicate that we don't want this rule applied by default.

    Example:

    $ SYMPY_USE_CACHE=no bin/isympy -q
    Python 2.6.2 console for SymPy 0.7.0-git (cache: off)

    In [1]: 1/(x - 1)
    Out[1]:
      -1
    ─────
    1 - x

    In [2]: Basic.keep_sign = True

    In [3]: 1/(x - 1)
    Out[3]:
      1
    ──────
    -1 + x

    The same can be achieved with cache enabled, but in this case
    one needs to invoke clear_cache() after changing Basic.keep_sign.

commit 14b240ea83dc68c82622888263a778272222fb4c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 14 13:08:57 2010 +0100

    Added a function for fast polynomial construction

    If one have an expression in non-expanded form and wants to
    build a polynomial out of it, then the standard approach is
    to use Poly class. Poly expands its argument by default and
    constructs a polynomial. This can be slow, because expand()
    is slow.

    A new function, poly(), was implemented to overcome this
    issue. It takes an expression as its only argument and
    recursively tries to convert the given expression into
    a polynomial without any expanding.

    Example:

    In [1]: f = 2*(x + (y + z)**2)**2

    In [2]: expand(f)
    Out[2]:
                 2        2        2       2  2        3        3      4      4
    8⋅x⋅y⋅z + 2⋅x  + 4⋅x⋅y  + 4⋅x⋅z  + 12⋅y ⋅z  + 8⋅y⋅z  + 8⋅z⋅y  + 2⋅y  + 2⋅z

    In [3]: poly(f).as_basic()
    Out[3]:
                 2        2        2       2  2        3        3      4      4
    8⋅x⋅y⋅z + 2⋅x  + 4⋅x⋅y  + 4⋅x⋅z  + 12⋅y ⋅z  + 8⋅y⋅z  + 8⋅z⋅y  + 2⋅y  + 2⋅z

    Note that this is a preliminary implementation so not all
    classes of expressions are currently handled by poly().

commit 078afaa374eb465f0343b7df531636382378a000
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 14 11:58:16 2010 +0100

    Added function for reordering Poly's generators list

    There are to scenarios possible:

    In [1]: Poly(x + y)
    Out[1]: Poly(x + y, x, y, domain='ZZ')

    1. One can give new order of generators explicitly, e.g.:

    In [2]: _1.reorder(y, x)
    Out[2]: Poly(y + x, y, x, domain='ZZ')

    2. One can rely on the sorting function, e.g.:

    In [3]: _1.reorder(wrt=y)
    Out[3]: Poly(y + x, y, x, domain='ZZ')

commit 29e134af4589983536dc68c3babc7e274e15925c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 14 10:51:15 2010 +0100

    Make factor(-x - 1) return -x - 1 instead of -(x + 1)

commit dc728d6be71f67821e0ddd2a9d44100058f365ba
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 13 20:26:32 2010 +0100

    Added function for generating symmetric polynomials

    Now one can easily generate elementary symmetric polynomials, e.g.:

    In [1]: symmetric_poly(0, x, y, z)
    Out[1]: 1

    In [2]: symmetric_poly(1, x, y, z)
    Out[2]: x + y + z

    In [3]: symmetric_poly(2, x, y, z)
    Out[3]: x⋅y + x⋅z + y⋅z

    In [4]: symmetric_poly(3, x, y, z)
    Out[4]: x⋅y⋅z

commit 25371c4d7021217cbb1b3f04d31d493de652e0c8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 13 19:21:48 2010 +0100

    Moved cyclotomic_poly() to sympy.polys.specialpolys

commit 1df030b53cc17f70addd9355debbc4789d41ffc5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 13 19:16:57 2010 +0100

    Refactored sympy.polys.specialpolys module

commit b8fbd59639577b7e80f2acb6b2f4e1899393cf3a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 13 19:02:57 2010 +0100

    Efficient implementation of orthogonal polynomials

    1. Chebyshev polynomials of the first kind:

    In [1]: chebyshevt_poly(5, x)
    Out[1]:
              3       5
    5⋅x - 20⋅x  + 16⋅x

    2. Chebyshev polynomials of the second kind:

    In [2]: chebyshevu_poly(5, x)
    Out[2]:
              3       5
    6⋅x - 32⋅x  + 32⋅x

    3. Hermite polynomials:

    In [3]: hermite_poly(5, x)
    Out[3]:
                 3       5
    120⋅x - 160⋅x  + 32⋅x

    4. Legendre polynomials:

    In [4]: legendre_poly(5, x)
    Out[4]:
               3       5
    15⋅x   35⋅x    63⋅x
    ──── - ───── + ─────
     8       4       8

    5. Laguerre polynomials:

    In [5]: laguerre_poly(5, x)
    Out[5]:
                        3      4     5
                 2   5⋅x    5⋅x     x
    1 - 5⋅x + 5⋅x  - ──── + ──── - ───
                      3      24    120

commit 6ccf20cf82fe048e0341cfdb6a8becda1abab6f3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 13 16:01:35 2010 +0100

    Added function for generating cyclotomic polynomials

    To generate, for example, 10th order cyclotomic polynomial issue:

    In [1]: cyclotomic(10, x)
    Out[1]:
             2    3    4
    1 - x + x  - x  + x

commit 534dd87dcde86bac7ef20f61e4b828278512f0b5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 13 14:41:41 2010 +0100

    Adjust runtests.py to work with new init_printing()

commit 7aaafa327475bdc6af01a011c873939234746a52
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 22:01:34 2010 +0100

    Allow computing Groebner bases without generators

    We allow such behaviour in reduced(), so it's a natural
    thing to allow the same behaviour in groebner(). Note
    that order of generators does matter, so it's better
    to be explicit when playing with Groebner bases.

    Example:

    In [1]: var('c,s')
    Out[1]: (c, s)

    In [2]: f = expand((1 - c**2)**5 * (1 - s**2)**5 * (c**2 + s**2)**10)

    In [3]: groebner([f, c**2 + s**2 - 1])
    Out[3]:
    ⎡      2    2     10      12       14       16      18    20⎤
    ⎣-1 + c  + s , - c   + 5⋅c   - 10⋅c   + 10⋅c   - 5⋅c   + c  ⎦

commit 60fbff47fe4a0a62b70062892a08fac31c629b40
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 21:36:15 2010 +0100

    Added 'symmetric' keyword argument to Poly

    By default a polynomial over a finite field is converted to a
    polynomial over integers using the symmetric representation.
    Now one can keep coefficients in canonical form by adding
    'symmetric=False' to polynomial manipulation functions.

    Example:

    In [1]: factor(x**11 + x + 1, modulus=65537, symmetric=True)
    Out[1]:
    ⎛         2⎞ ⎛     2    3    5    6    8    9⎞
    ⎝1 + x + x ⎠⋅⎝1 - x  + x  - x  + x  - x  + x ⎠

    In [2]: factor(x**11 + x + 1, modulus=65537, symmetric=False)
    Out[2]:
    ⎛         2⎞ ⎛           2    3          5    6          8    9⎞
    ⎝1 + x + x ⎠⋅⎝1 + 65536⋅x  + x  + 65536⋅x  + x  + 65536⋅x  + x ⎠

    In [3]: expand(_1)
    Out[3]:
             11
    1 + x + x

    In [4]: Poly(_2, modulus=65537).as_basic()
    Out[4]:
             11
    1 + x + x

commit 8d05f7e5a84d7164ce8afa8145a2a6855b1bb271
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 20:25:33 2010 +0100

    Slightly improved unification in algebraic domains

    This allows to run the following example:

    In [1]: f = x**3 + (sqrt(2) - 2)*x**2 - (2*sqrt(2) + 3)*x - 3*sqrt(2)

    In [2]: g = x**2 - 2

    In [3]: cancel(f/g, extension=True)
    Out[3]:
               2
    3 + 2⋅x - x
    ────────────
           ⎽⎽⎽
    -x + ╲╱ 2

    (previously had to use explicit extension=sqrt(2))

commit e0909ee7d183d8ecf111da52ef7191e28aee4b41
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 19:42:39 2010 +0100

    Fixed factor(f, extension=...) for non-monic f

    Previously factor() returned correct factorization over
    algebraic extensions for non-monic input up to scaling
    coefficient. The problem was that the coefficient wasn't
    injected into the factorization at right time. Now the
    issue is fixed and factor() returns correct results
    for non-monic polynomials.

    Example 1:

    In [1]: factor(4*x**2 + 9, gaussian=True)
    Out[1]:
      ⎛    3⋅ⅈ⎞ ⎛    3⋅ⅈ⎞
    4⋅⎜x - ───⎟⋅⎜x + ───⎟
      ⎝     2 ⎠ ⎝     2 ⎠

    In [2]: expand(_)
    Out[2]:
           2
    9 + 4⋅x

    (previously [2] was (4*x**2 + 9)/16)

    As a side effect 'include' keyword was implement in
    factor_list() and underlying factorization functions.

    Example 2:

    In [3]: factor_list(2*x**2 + 4*x + 2)
    Out[3]: (2, [(1 + x, 2)])

    In [4]: factor_list(2*x**2 + 4*x + 2, include=True)
    Out[4]: [(2 + 2⋅x, 2)]

commit 859bb337058703a490511c7c6bc0c3281e9fa82f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 15:04:25 2010 +0100

    Preliminary support for ordering of terms in Printer

    This is a very basic and quite inefficient implementation of
    ordering of terms in Printer. Previously there was only one
    predefined and not very appealing terms order. Now one can
    choose between old Basic.compare_terms, which is still used
    by default, and orderings defined in polys module.

    Things now work the following way:

    1. Printer got new argument 'order' which can be set with:

        1.1 None               -> (default) old soring method
        1.2 lex or rev-lex     -> lexicographic ordering
        1.3 grlex or rev-grlex -> graded lexicographic ordering
        1.4 ...

    2. If you set 'order' to None, noting interesting happens.
    Otherwise term ordering will be used to sort terms in Add,
    by default in decreasing exponent order (use rev- prefix
    to force increasing exponent order).

    3. Currently only PrettyPrinter utilizes the new functionality.
    Other printers have to be refactored, which trivial at this point.

    4. isympy has new command line option '--order' (or '-o' for
    short), which can be set with proper term order (see 1.2, 1.3,
    ...) or 'old which stands for order=None.

    5. init_printing() now accepts 'pretty_print', 'order' and
    'use_unicode' arguments instead of 'stringify_func'. This
    way you can easily initialize printing the canonical way
    without setting up a session (readline, etc.).

    Examples:

    $ bin/isympy -q -o old
    Python 2.6.2 console for SymPy 0.7.0-git

    In [1]: 2*x**4 + y**2 - x**2 + y**3
    Out[1]:
     2    2    3      4
    y  - x  + y  + 2⋅x

    $ bin/isympy -q -o lex
    Python 2.6.2 console for SymPy 0.7.0-git

    In [1]: 2*x**4 + y**2 - x**2 + y**3
    Out[1]:
        4    2    3    2
    2⋅x  - x  + y  + y

    $ bin/isympy -q -o rev-lex
    Python 2.6.2 console for SymPy 0.7.0-git

    In [1]: 2*x**4 + y**2 - x**2 + y**3
    Out[1]:
     2    3    2      4
    y  + y  - x  + 2⋅x

    $ ipython

    In [1]: from sympy import *

    In [2]: var('x,y')
    Out[2]: (x, y)

    In [3]: 2*x**4 + y**2 - x**2 + y**3
    Out[3]: y**2 - x**2 + y**3 + 2*x**4

    In [4]: init_printing(True, 'lex')

    In [5]: 2*x**4 + y**2 - x**2 + y**3
    Out[5]:
       4    2    3    2
    2⋅x  - x  + y  + y

commit 5df77f5a289415ac8800f8d417259bf1994c5337
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 11:32:59 2010 +0100

    Make factor(6*x - 10) return 2*(3*x - 5) unevaluated

    The same was implemented for sqf(). Note this is a simple
    hack to make factor() and sqf() consistent in all cases,
    but it would have been better if SymPy implemented this
    behaviour by default.

commit 8ad7c5fcca156d0a48596da21f59ad70bbd70f08
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 10:12:07 2010 +0100

    Implemented reduced() wrapper on top of sdp_div()

    The implemented function is just a top-level wrapper over
    generalized division algorithm, which utilizes sparse
    distributed polynomial representation.

    reduced() function allows to reduce a polynomial modulo a
    set of polynomials (polynomial equations), e.g.:

    In [1]: f = 2*x**4 + y**2 - x**2 + y**3

    In [2]: G = [x**3 - x, y**3 - y]

    In [3]: reduced(f, G)
    Out[3]:
    ⎛               2    2⎞
    ⎝[2⋅x, 1], y + x  + y ⎠

    Which is correct and can be easily confirmed:

    In [4]: Q, r = _

    In [5]: expand(Q[0]*G[0] + Q[1]*G[1] + r)
    Out[5]:
     2    2    3      4
    y  - x  + y  + 2⋅x

    In [6]: _ == f
    Out[6]: True

    Note that reduced() allows 'order' keyword for specification
    of the order of terms in polynomials (as in groebner()).

    Reduction effect can be also achieved using classical
    division algorithm (recursive polynomial representation):

    In [7]: rem(rem(f, x**3 - x), y**3 - y, wrt=y)
    Out[7]:
         2    2
    y + x  + y

    Using this approach we can't forget that division algorithm
    (among others) does the computation with respect to the
    principal generator. That's why in the outer rem() we need
    to say wrt=y explicitly, as SymPy assumes that x comes
    before y if no information was given by the user.

commit eeaf5b9fa05c0fcf01fc0dab160bf4e1d30094ff
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 11 09:29:48 2010 +0100

    Implemented dmp_true_LT() in sympy.polys.densebasic

commit db13e184aad5bb7f8428ab3451e06fe7293dae5f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 9 20:16:27 2010 +0100

    Poly(0) will now raise GeneratorsNeeded as previously

commit 8d235c7528c3ec2f819caf20b90340638b839008
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 9 11:49:22 2010 +0100

    Added function for putting polynomials in Horner form

    1. Univariate polynomials are supported, e.g.:

    In [1]: horner(9*x**4 + 8*x**3 + 7*x**2 + 6*x + 5)
    Out[1]: 5 + x⋅(6 + x⋅(7 + x⋅(8 + 9⋅x)))

    2. Non-number coefficients are supported, e.g.:

    In [2]: var('a,b,c,d,e')
    Out[2]: (a, b, c, d, e)

    In [3]: horner(a*x**4 + b*x**3 + c*x**2 + d*x + e)
    Out[3]: e + x⋅(d + x⋅(c + x⋅(b + a⋅x)))

    3. Multivariate polynomials are supported, e.g.:

    In [4]: Add(*[ i*j*x**i*y**j for i in range(0, 3) for j in range(0, 3) ])
    Out[4]:
               2        2      2  2
    x⋅y + 2⋅x⋅y  + 2⋅y⋅x  + 4⋅x ⋅y

    In [5]: horner(_4)
    Out[5]: x⋅(y⋅(1 + 2⋅y) + x⋅y⋅(2 + 4⋅y))

    Note that Horner form in multivariate case is non-unique and depends
    on the order of generators, so if we make y the principal generator
    then will obtain a different result:

    In [6]: horner(_4, wrt=y)
    Out[6]: y⋅(x⋅(1 + 2⋅x) + x⋅y⋅(2 + 4⋅x))

commit e784be3750ca21c3f782232f911bd8e6ef411f80
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 6 10:25:53 2010 +0100

    Fixed ASCII interactive mode (isympy -p ASCII)

commit fa1206e537d949321f3e043b214e142296314cef
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 3 22:07:12 2010 +0100

    Implemented Wilf's complex root isolation algorithm

commit 84c403382bce342a9c740424a79f21f0816a2d28
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 3 22:06:12 2010 +0100

    Naive implementation of float and complex domains

commit 4d8e551af3ef8aae698b0c28b9ebc4dd1a3b1f4a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 3 21:49:23 2010 +0100

    Allow univariate division over inexact domains

commit a0c9b5bc853bf3acf8e2f61e5577f0b94b85d6c8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 17 15:16:20 2010 +0100

    Renamed dup_embed() to dup_scale(), added dup_mirror()

commit 50143d8b7895f3728f6cf7e893901422f8a60659
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 13 14:41:35 2010 +0100

    Implemented fast algorithm for computing Taylor shifts

commit 10bc8e4285d7af57afe1f43bfe39007b0ea32963
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Feb 12 16:15:08 2010 +0100

    Support for non square-free polynomials in root isolation

    Now one can pass a polynomial with multiple roots to intervals()
    function, to get isolating intervals together with multiplicity
    of each root, e.g.:

    In [1]: f = (x**2-3)**2*(x**2-2)**3*(2*x-3)**4

    In [2]: intervals(f)
    Out[2]: [((-2, -3/2), 2), ((-3/2, -1), 3), ((1, 3/2), 3), ((3/2, 3/2), 4), ((5/3, 2), 2)]

    If you pass to intervals() a square-free part of 'f' then a more
    efficient algorithm is used and the resulting intervals might be
    different from those above, e.g.:

    In [3]: intervals(sqf_part(f))
    Out[3]: [((-2, -3/2), 1), ((-3/2, -1), 1), ((1, 3/2), 1), ((3/2, 3/2), 1), ((3/2, 2), 1)]

    If one knows that the input polynomial is square-free then one
    can set sqf=True to avoid (possibly) expensive computations, e.g.:

    In [4]: intervals(sqf_part(f), sqf=True)
    Out[4]: [(-2, -3/2), (-3/2, -1), (1, 3/2), (3/2, 3/2), (3/2, 2)]

    Notice also that with 'sqf' flag set, multiplicities (which are
    all equal to one) are not included in the result.

commit 4b75dae6ebc543ed5aa8af9249a95dbb333d5bd8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 11 02:05:50 2010 +0100

    Significantly improved real root isolation algorithm

    Implemented iterative version of continued fraction algorithm
    for computing real root isolation intervals and added logic for
    accelerating convergence of this method. New version is capable
    of handling arbitrarily large input polynomials (no infinite
    recursion problems) and is significantly faster.

    There are to modes in which this new procedure can be run, i.e.
    slow mode (fast=False) and fast mode (obviously fast=True). The
    resulting isolating intervals will vary between those methods,
    up to epsilon, however both are guaranteed to converge, with
    the minor difference that the fast version will be orders of
    magnitude faster (note that the slow version will be, anyway,
    much faster that the old procedure).

    Example:

    Consider the polynomial `f` which has two very big and two very
    small real roots (two positive, two negative, non-symmetric):

    In [1]: a, b, c, d = 10000090000001, 2000100003, 10000300007, 10000005000008

    In [2]: f = Poly((x+a)*(b*x+1)*(c*x-1)*(x-d), x)

    Lets compute isolating intervals using 'slow' method:

    In [3]: %time intervals(f)
    CPU times: user 0.40 s, sys: 0.00 s, total: 0.40 s
    Wall time: 0.40 s
    Out[4]: [(-10000090000001, -10000090000001), (-1, 0), (0, 1), (10000005000008, 10000005000008)]

    We obtained to points and two intervals in 0.4s. Not bad, at
    least it didn't fail with infinite recursion error. Now lets
    compare this with the 'fast' method:

    In [5]: %time intervals(f, fast=True)
    CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
    Wall time: 0.00 s
    Out[6]: [(-10995116277761, -8796093022209), (-1, 0), (0, 1), (8796093022209, 13194139533313)]

    We obtained isolating intervals a little bit faster than it was
    with the previous method. However, the isolating intervals are
    different, although still correct. Lets check this fact:

    In [7]: -10995116277761 < -a < -8796093022209
    Out[7]: True

    In [8]: 8796093022209 < d < 13194139533313
    Out[8]: True

    We know that all roots are rational, so continued fraction algorithm
    should converge at some point. To obtain exact solutions we need to
    set the maximal allowed interval width ('eps' keyword):

    In [9]: %time intervals(f, eps=QQ(1,100000000000))
    CPU times: user 0.82 s, sys: 0.00 s, total: 0.82 s
    Wall time: 0.82 s
    Out[10]:
    [(-10000090000001, -10000090000001), (-1/2000100003, -1/2000100003),
     (1/10000300007, 1/10000300007), (10000005000008, 10000005000008)]

    We obtained a set of four points. The epsilon used was the biggest
    possible (in the form 1/10**k). The same we can achieve with the
    'fast' method, just epsilon must be set to a smaller fraction:

    In [12]: %time intervals(f, fast=True, eps=QQ(1,100000000000000000000000000000))
    CPU times: user 0.12 s, sys: 0.00 s, total: 0.12 s
    Wall time: 0.12 s
    Out[13]:
    [(-10000090000001, -10000090000001), (-1/2000100003, -1/2000100003),
     (1/10000300007, 1/10000300007), (10000005000008, 10000005000008)]

commit 0d989450fbc574f4aa4dea80f5fcd604c8a2ccc3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 10 15:07:52 2010 +0100

    Exposed Poly.nroots() as nroots() to the toplevel

    To compute numerical approximations of roots, issue:

    In [1]: nroots(x**2-x+1)
    Out[1]: [0.5 - 0.866025403784439⋅ⅈ, 0.5 + 0.866025403784439⋅ⅈ]

    or, to get also estimate of error, set 'error' switch:

    In [2]: nroots(x**2-x+1, error=True)
    Out[2]: ([0.5 - 0.866025403784439⋅ⅈ, 0.5 + 0.866025403784439⋅ⅈ], 2.22044604925031e-16)

    (one can use any keyword supported by mpmath's polyroots).

commit 3acac679076075fae56160890f7d3012a2598f6f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 10 13:20:31 2010 +0100

    Implemented tools for real root isolation and refinement

    Given a univariate polynomial over rationals, one can obtain
    a set of disjoint open intervals (or/and points) which will
    contain all real roots of the input polynomial (one root per
    interval), e.g.:

    In [1]: f = (x+1)*(x-1)*(x**2-2)*(x**5+x-1)

    (note f must be square-free)

    In [2]: intervals(f)
    Out[2]: [(-2, -1), (-1, -1), (0, 1), (1, 1), (1, 2)]

    We obtained 3 intervals and 2 points which tell us that the
    polynomial f has exactly five real roots (and four complex
    roots). Lets compute numerical approximations of real roots
    of f:

    In [3]: [ r for r in Poly(f).nroots() if r.is_real ]
    Out[3]: [-1.4142135623731, -1.0, 0.754877666246693, 1.0, 1.4142135623731]

    We see that each approximated root belongs to one of the
    intervals computed in [2]. The intervals aren't, however,
    very tight, but one can set 'eps' keyword parameter to
    define the maximum allowed with of intervals, e.g.:

    In [4]: intervals(f, eps=0.1)
    Out[4]: [(-10/7, -7/5), (-1, -1), (3/4, 4/5), (1, 1), (7/5, 10/7)]

    This process can be continued to arbitrary precision,
    without loss of correctness, because all computations
    are done using exact arithmetics only.

    The implemented algorithm for real root isolation is the
    continued fraction algorithm. It means it gives the best
    possible isolation intervals in small number of steps.

    Note this implementation will require further improvements
    to make it fast for large roots (e.g. f = (x-1)*(x-1000000)).

commit 527d434a615a2687c0e7f2dde34b8eb21482f4a4
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 10 12:00:10 2010 +0100

    Added 'convert' keyword to {dup,dmp}_ground_to_ring()

commit 310219e72c56c258ad3367d41a42fa67906d78eb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 10 11:58:48 2010 +0100

    Implemented tools for computing q**n * f(p/q) transform

commit 386ddcae23b630c93703f4328a863bb15e413f68
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 10 11:44:26 2010 +0100

    Implemented dup_lshift() and dup_rshift() functions

commit db4c05591956e8bb67bb72c45f77714ed38fb34b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Feb 8 18:50:46 2010 +0100

    Cleaned up irreducibility testing over finite fields

commit 214a133abc8ef4c6a540178b4165caee3dec37c5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Feb 8 16:37:35 2010 +0100

    Poly.compose() now works with multivariate polynomials

    Note that composition is done for the principal generator,
    so the order of generators does matter, e.g.:

    In [1]: compose(x**2 - y**2, x-y, x, y)
    Out[1]:
              2
    -2⋅x⋅y + x

    In [2]: compose(x**2 - y**2, x-y, y, x)
    Out[2]:
             2
    2⋅x⋅y - y

commit 52f261595367b1a5fc3725fb5222e7ad2bed239f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 6 21:58:55 2010 +0100

    Improved ground domain handling in ratint_ratpart()

commit d8ef4cb89e8665031f49ce82b7ded06cd23bfe1d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 6 21:57:07 2010 +0100

    Fixed cancel() to return polynomials in proper domains

commit b90697e41f0d4d434257e4e2ce8b0f508a41c1d3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 6 16:46:21 2010 +0100

    Allow 3.0 in ZZ == True and 3.1 in QQ == True

    This allows to create Poly instances more easily, e.g.:

    In [1]: Poly(3*x**2/5 + 2*x/7 + 1/7, domain='QQ')
    Out[1]: Poly(3/5*x**2 + 2/7*x + 1/7, x, domain='QQ')

    Note that all coefficients were Real above, e.g.:

    In [2]: 1/7
    Out[2]: 0.142857142857

commit 7de602c8cfb2422e09b394a138ca3dc933405e1c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 4 08:39:48 2010 +0100

    Implemented tools for automatic discovery of extensions

    Added very preliminary implementation of an algorithm for
    automatic discovering of polynomial's algebraic extension.

    Consider the following polynomial:

    In [1]: f = x**2 + 2*sqrt(2)*x + 2

    By default polynomial manipulation function won't use
    algebraic numbers and because of this, the following
    factorization fails (no factors over ZZ):

    In [2]: factor(f)
    Out[2]:
              ⎽⎽⎽    2
    2 + 2⋅x⋅╲╱ 2  + x

    One can give an explicit extension to polynomial manipulation
    function to obtain splitting factorization (linear factors):

    In [4]: factor(f, extension=sqrt(2))
    Out[4]:
               2
    ⎛      ⎽⎽⎽⎞
    ⎝x + ╲╱ 2 ⎠

    Now the same can be achieved automatically the following way:

    In [3]: factor(f, extension=True)
    Out[3]:
               2
    ⎛      ⎽⎽⎽⎞
    ⎝x + ╲╱ 2 ⎠

    Note that this is currently quite limited and may find too
    large extension where a much simpler one is possible. In
    future more "intelligent" approach has to be implemented.

    Remember that extension=True is no magic so:

    In [4]: factor(x**4+1, extension=True)
    Out[4]:
         4
    1 + x

    fails to factor, although we can figure out extensions

    In [5]: factor(x**4+1, extension=[sqrt(2)])
    Out[5]:
    ⎛        ⎽⎽⎽    2⎞ ⎛        ⎽⎽⎽    2⎞
    ⎝1 + x⋅╲╱ 2  + x ⎠⋅⎝1 - x⋅╲╱ 2  + x ⎠

    In [6]: factor(x**4+1, gaussian=True)
    Out[6]:
    ⎛     2⎞ ⎛      2⎞
    ⎝ⅈ + x ⎠⋅⎝-ⅈ + x ⎠

    in which factorization is possible (note that Q(sqrt(2), I)
    can also be used, resulting in splitting factorization).

commit f3bee7a6512fe31078a0ff08bf6a3ef258d88fb9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 4 09:12:06 2010 +0100

    Added preliminary support for ask(expr, 'algebraic')

    This is a basic implementation required to proceed with tools
    for automatic discovery of algebraic extension of a polynomial.

    Currently there are no assumptions concerning symbols and None
    case could be made more strict, i.e. return False more often.

    Examples:

    In [1]: ask(sqrt(2), 'algebraic')
    Out[1]: True

    In [2]: ask(sqrt(I + sqrt(2)), 'algebraic')
    Out[2]: True

    In [3]: ask(sqrt(x + sqrt(2)), 'algebraic')

commit 9e50ed23027977de447b15917f5ad7ecdbd07411
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Feb 5 14:12:58 2010 +0100

    primitive_element() now returns also isomorphisms

    This time Groebner basis techniques (elimination theory) were
    applied to allow automatic computations of field isomorphisms
    for each provided extension (this is called `ex` mode).

    Lets compute minimal field equivalent to Q(sqrt(2), sqrt(19)):

    In [1]: primitive_element([sqrt(2), sqrt(19)], ex=True)
    Out[1]:
    ⎛          2    4          ⎡⎡           25   ⎤  ⎡          59   ⎤⎤⎞
    ⎜289 - 42⋅x  + x , [1, 1], ⎢⎢1/34, 0, - ──, 0⎥, ⎢-1/34, 0, ──, 0⎥⎥⎟
    ⎝                          ⎣⎣           34   ⎦  ⎣          34   ⎦⎦⎠

    We obtained a minimal polynomial, coefficients [1, 1] which tell
    us that the initial field is equivalent to Q(sqrt(2) + sqrt(3))
    and a list of isomorphisms which give us sqrt(2) and sqrt(3) in
    terms of sqrt(2) + sqrt(3).

    The same can be achieved with other tools:

    In [2]: a = to_number_field([sqrt(2), sqrt(19)])

    In [3]: a.minpoly.as_basic()
    Out[3]:
              2    4
    289 - 42⋅x  + x

    In [4]: field_isomorphism(sqrt(2), a)
    Out[4]:
    ⎡           25   ⎤
    ⎢1/34, 0, - ──, 0⎥
    ⎣           34   ⎦

    In [5]: field_isomorphism(sqrt(19), a)
    Out[5]:
    ⎡          59   ⎤
    ⎢-1/34, 0, ──, 0⎥
    ⎣          34   ⎦

    Although computation of lexicographic Groebner bases is very time
    consuming, it is still faster than computing a primitive element
    using Trager's square-free norm and isomorphisms by PSLQ (not
    mentioning by algebraic factorization).

    Don't expect to run `ex` mode for 5 or more extensions, because
    the problem is growing exponentially in the number of extensions.

    However, if you don't need isomorphisms then you can use default
    mode (ex=False) which will take advantage of Trager's algorithm:

    In [6]: primitive_element([sqrt(2), sqrt(19)])
    Out[6]:
    ⎛          2    4        ⎞
    ⎝289 - 42⋅x  + x , [1, 1]⎠

    As Python's Fraction class is *very* slow and all computations
    are done in a field, then you should to run sympy with gmpy
    ground types (SYMPY_GROUND_TYPES=gmpy isympy) to make it
    significantly faster, e.g.:

    (w/o GMPY)

    In [1]: %time u = primitive_element([sqrt(2), sqrt(3), sqrt(5)], ex=True)
    CPU times: user 0.14 s, sys: 0.00 s, total: 0.14 s
    Wall time: 0.16 s

    In [3]: %time u = primitive_element([sqrt(2), sqrt(3), sqrt(5), sqrt(7)], ex=True)
    CPU times: user 11.77 s, sys: 0.01 s, total: 11.78 s
    Wall time: 12.06 s

    (with GMPY)

    In [1]: %time u = primitive_element([sqrt(2), sqrt(3), sqrt(5)], ex=True)
    CPU times: user 0.10 s, sys: 0.00 s, total: 0.10 s
    Wall time: 0.12 s

    In [3]: %time u = primitive_element([sqrt(2), sqrt(3), sqrt(5), sqrt(7)], ex=True)
    CPU times: user 0.97 s, sys: 0.00 s, total: 0.97 s
    Wall time: 0.99 s

commit 08482bfbc7b36ffdc2e6710871118f64dacb6030
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 4 13:29:44 2010 +0100

    Improved field_isomorphism_pslq() for very large input

    Now the PSLQ version of field isomorphism algorithm can
    work with very large input (as shown in examples). This
    required fine tuning of PSLQ parameter and surely can
    be improved.

    To assure correctness of field_isomorphism(), the prove
    keyword was removed and in case of None, the factoring
    algorithm will be used any way to show that isomorphism
    really doesn't exist. Now field_isomorphism() will be
    always correct (up to bugs) and slower in case of
    failure of the "fast" algorithm.

    Examples:

    In [1]: a = AlgebraicNumber(3*sqrt(2)+8*sqrt(7)-5)

    In [2]: b = AlgebraicNumber(sqrt(2)+sqrt(3)+sqrt(7))

    In [3]: %time field_isomorphism(a, b, fast=False)
    CPU times: user 4.99 s, sys: 0.00 s, total: 5.00 s
    Wall time: 5.08 s
    Out[4]:
    ⎡           139     347       761    ⎤
    ⎢3/80, 0, - ───, 0, ───, 0, - ───, -5⎥
    ⎣            80      20        20    ⎦

    In [5]: %time field_isomorphism(a, b, fast=True)
    CPU times: user 0.54 s, sys: 0.00 s, total: 0.54 s
    Wall time: 0.57 s
    Out[6]:
    ⎡           139     347       761    ⎤
    ⎢3/80, 0, - ───, 0, ───, 0, - ───, -5⎥
    ⎣            80      20        20    ⎦

    The difference was big, but this is not always
    the case, e.g.:

    In [7]: a = AlgebraicNumber(sqrt(7))

    In [8]: %time field_isomorphism(a, b, fast=False)
    CPU times: user 0.52 s, sys: 0.00 s, total: 0.52 s
    Wall time: 0.54 s
    Out[9]:
    ⎡             71     377       469   ⎤
    ⎢3/640, 0, - ───, 0, ───, 0, - ───, 0⎥
    ⎣            320     160        80   ⎦

    In [10]: %time field_isomorphism(a, b, fast=True)
    CPU times: user 0.52 s, sys: 0.00 s, total: 0.52 s
    Wall time: 0.54 s
    Out[11]:
    ⎡             71     377       469   ⎤
    ⎢3/640, 0, - ───, 0, ───, 0, - ───, 0⎥
    ⎣            320     160        80   ⎦

commit 40db0d4061779e8d068a61a437bce1c439aba156
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 4 13:20:15 2010 +0100

    Improved efficiency of AlgebraicField.from_sympy()

commit c9dec83657ab1581b6bbb8b8026a7846b645e4ee
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 4 13:18:25 2010 +0100

    Import basic algebras in sympy/polys/__init__.py

commit d5b5f6d39260b371d42ae21e508f847bfd997431
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 4 08:12:03 2010 +0100

    Simplified primes generation in is_isomorphism_possible()

commit b097b01934963d7b8b2848be91c7dcb255a9f85a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 3 16:37:03 2010 +0100

    Implemented field isomorphism algorithm via PSLQ

    PSLQ allows us to solve field isomorphism problem very
    efficiently (see examples), incomparable with the old
    approach (in which we use algebraic factorization).

    The new approach is always conclusive if PSLQ is able to
    find integer relation. In the other case field isomorphism
    may exist or not, however it's very rare when PSLQ fails
    and the isomorphism exists. Pedantic users may run field
    isomorphism function with prove=True to run algebraic
    factorization if PSLQ fails.

    Currently only real algebraic numbers are supported due
    to limitations in the implementation of the PSLQ algorithm.

    Examples:

    In [1]: a = AlgebraicNumber(3*sqrt(2)+2*sqrt(3)+1)

    In [2]: b = AlgebraicNumber(sqrt(2)+sqrt(3))

    In [3]: field_isomorphism(a, b)
    Out[3]: [1/2, 0, -5/2, 1]

    Lets time PSLQ variant:

    In [4]: %timeit u = field_isomorphism(a, b)
    100 loops, best of 3: 14.1 ms per loop

    and now lets use factorization:

    In [5]: %timeit u = field_isomorphism(a, b, fast=False)
    1 loops, best of 3: 494 ms per loop

    The difference in computing time is ... visible.

commit 17e8f1f2a9a3ef8e0c05fafa3c6f28d4b72aea60
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 3 12:01:59 2010 +0100

    Implemented deterministic irreducibility test in GF(p)[x]

    The algorithm is an alternative to DDF phase of factorization
    algorithm(s) over finite fields. Currently is quite slow in
    small fields due to inefficient implementation of polynomial
    composition algorithm.

    Examples:

    In [1]: from sympy.polys.galoistools import *

    In [2]: from sympy.polys.algebratools import ZZ

    Generate irreducible polynomial of degree 11 over GF(17):

    In [3]: f = gf_irreducible(11, 17, ZZ)

    In [4]: f
    Out[4]: [1, 5, 11, 11, 0, 3, 7, 8, 2, 1, 6, 3]

    In [5]: gf_irreducible_p(f, 17, ZZ)
    Out[5]: True

    In [6]: gf_factor(f, 17, ZZ)
    Out[6]: (1, [([1, 5, 11, 11, 0, 3, 7, 8, 2, 1, 6, 3], 1)])

    Or, in a more readable way, we can do the following:

    In [7]: f = Poly(x**2 + 1, modulus=2)

    In [8]: f.is_irreducible
    Out[8]: False

    In [9]: factor(f)
    Out[9]:
           2
    (1 + x)

commit bd255f3bde35f1b9e7880f67453e379838e644c1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Feb 3 01:24:11 2010 +0100

    Added tests for get_{ring,field,exact} (algebratools.py)

commit 5cf2851069b15d0a99b24b90e3eacf96d1447d08
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Feb 2 16:32:03 2010 +0100

    Preliminary implementation of dmp_lift() function

commit a0e34d87b54adcda85c6d1413898a7a973eed4d4
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Feb 2 10:23:30 2010 +0100

    Allow K1=None in {dup,dmp}_ground_to_ring()

commit 527f49a6e73b0f3d4c3e7116fae6a22a565242c7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Feb 1 22:51:21 2010 +0100

    Improved Algebra.__contains__ and written tests

commit a71271daf6c63f8aa8d8833bd95a26c85cfb11c8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Feb 1 22:49:04 2010 +0100

    Fixed Poly str printer for Poly(x**2 - I*x, x) case

commit 01f72594d50ad17cfca9e5fc3e1c474a8c93b53a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Feb 1 19:09:23 2010 +0100

    minpoly() for oo, etc. raises NotAlgebraic exception

commit c8f37719ce3d4b62c35c4a7e83373feb1ef414a9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Feb 1 13:26:27 2010 +0100

    Use sorted(x, key=...) syntax in _sort_factors()

commit b370e044cdee4c18f825cbce1aa7da0c5fbd1fdd
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Feb 1 13:00:34 2010 +0100

    Use sorted(x, key=...) syntax in _sort_gens()

commit b9b6ac753e296c71c7be4b88475b904d5fc1bc11
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 31 17:16:34 2010 +0100

    Fixed minpoly() to work with expr**(p/q) where p != +/- 1

commit e6f1158abb88815e88d46dee1d6d48665b2f56b5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 31 16:37:57 2010 +0100

    Use numerical zero equivalence tests in numberfields.py

commit d5d8a630a67d43f1341e1377b2565ec45f99c80b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 31 15:11:18 2010 +0100

    Added Poly.replace() for replacing polynomial generators

commit 03df7f9ecefe7978a5fd837f4f6687f447578bf8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 31 13:07:00 2010 +0100

    Improved field_isomorphism() and added more tests

commit 6ee6bb48688425feaa9f0c02e92729d9910e8a54
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 31 12:12:14 2010 +0100

    Added negative tests for field_isomorphism()

commit 3c445e254a6c963a125ed7d44a39f7fdcc66d026
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 21:39:37 2010 +0100

    Fixed and refactored groebner() in polytools.py

commit 51d6146f2e37a0b6859d2a0fbadc85df9c463f4d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 20 16:42:57 2009 +0100

    Added printer handlers for fractions.Fraction

commit 5998be24b20e9da5dfbeec822ed018b82a4a96bd
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 20:08:20 2010 +0100

    Allow to create univariate Poly instance from a list

commit b58f24c6fa17606ad2035e89900bc9afe0c179fe
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 19:43:10 2010 +0100

    Added trivial handling of 'order' keyword in Poly

commit 29c966b8cf217e59022b0629bdba3b085cff3960
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 18:55:12 2010 +0100

    Fixed separatevars() to work with new factor()

commit da262ffa7e85ea32b75343d9d7c821f1d661aee9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 17:07:06 2010 +0100

    No more XFail in test_separatevars_advanced_factor

commit e2fbf49b7981c978a7de81902e1ce59ab94fc468
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 16:24:54 2010 +0100

    Fixed sympy.solvers to work with Python 2.4 and 2.5

commit f1cbd40c11aff4bdeafa27562d155889b38d17e6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 16:24:21 2010 +0100

    Fixed sympy.polys to work with Python 2.4 and 2.5

commit 8a9f92f0acf95a9e398df5c1529ef4766cb89dbe
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 16:10:25 2010 +0100

    Fixed imports in sympy/polys/polyroots.py docstrings

commit b600ea2a4d6bd62470e2ae58a278e024bba1d3fa
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 30 15:47:20 2010 +0100

    Refactored numberfields.py and added to_number_field()

    Now sympy.polys.numberfields.py has much more logical
    structure. Several design flaws were fixed, e.g. new
    to_number_field() function was added, which does what
    previously AlgebraicNumber did, and much more.

    Examples:

    Use AlgebraicNumber class to construct algebraic numbers
    from SymPy expressions, e.g.:

    In [1]: a = AlgebraicNumber(sqrt(2))

    In [2]: a
    Out[2]:
      ⎽⎽⎽
    ╲╱ 2

    In [3]: a.minpoly
    Out[3]: Poly(_x**2 - 2, _x, domain='QQ')

    In [4]: a.coeffs()
    Out[4]: [1, 0]

    You can also specify a list of coefficients, e.g.:

    In [5]: a = AlgebraicNumber(sqrt(2), [2, 3])

    In [6]: a
    Out[6]:
            ⎽⎽⎽
    3 + 2⋅╲╱ 2

    In [7]: a.minpoly
    Out[7]: Poly(_x**2 - 2, _x, domain='QQ')

    In [8]: a.coeffs()
    Out[8]: [2, 3]

    The new to_number_field() function can be used in place of
    other functions: minimal_polynomial(), primitive_element()
    and field_isomorphism(), to construct an explicit algebraic
    number instead of getting some more "internal" result, e.g.:

    In [9]: to_number_field(sqrt(2))
    Out[9]:
      ⎽⎽⎽
    ╲╱ 2

    In [10]: to_number_field([sqrt(2), sqrt(3)])
    Out[10]:
      ⎽⎽⎽     ⎽⎽⎽
    ╲╱ 2  + ╲╱ 3

    In [11]: a = to_number_field(2*sqrt(2)+1, sqrt(2)+sqrt(3))

    In [11]: a
    Out[11]:
            ⎽⎽⎽
    1 + 2⋅╲╱ 2

    In [12]: a.minpoly
    Out[12]: Poly(_x**4 - 10*_x**2 + 1, _x, domain='QQ')

    In [13]: a.coeffs()
    Out[13]: [1, 0, -9, 1]

    The last result can be achieved with direct call to
    field_isomorphism() function, e.g.:

    In [14]: field_isomorphism(2*sqrt(2)+1, sqrt(2)+sqrt(3))
    Out[14]: [1, 0, -9, 1]

commit 017d4d8ead3222cb19464938118907764d558587
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jan 29 12:28:36 2010 +0100

    Fixed minpoly() to work with 1/expr input

    Now minimal polynomial of the following expression can be computed:

    In [1]: a = 1 + 7*sqrt(3) - 9*sqrt(2)

    In [2]: minpoly(1/a, x)
    Out[2]:
                    2         3        4
    -1 + 4⋅x + 612⋅x  - 1232⋅x  + 392⋅x

commit d00759960989081a2950874fe4e26d63d7fcf59e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jan 28 23:47:00 2010 +0100

    Implemented RealAlgebra and updated polys

    Now it's possible to work with real coefficients
    in SymPy's polynomial manipulation routines, e.g.:

    In [1]: f = Poly(0.2*x**2 + 0.1)

    In [2]: f.nroots()
    Out[2]: [-0.707106781186548⋅ⅈ, 0.707106781186548⋅ⅈ]

    There are several kinds of conversion rules implemented:

    In [3]: f.to_field()
    Out[3]: Poly(1/5*x**2 + 1/10, x, domain='QQ')

    In [4]: Poly(x/2 + S(1)/3, domain='RR')
    Out[4]: Poly(0.5*x + 0.333333333333333, x, domain='RR')

    Functions preserve correct type of coefficients:

    In [5]: factor(x**2 - 2.0*x + 1)
    Out[5]:
             2
    (1.0 - x)

    In [6]: factor(x**2 - 4.0*y**2)
    Out[6]: (x + 2.0⋅y)⋅(x - 2.0⋅y)

    In [7]: gcd(x**2 - 1, x + 1.0)
    Out[7]: 1 + x

    Note that this is a preliminary implementation, so not
    all paths were tested for compatibility with RealAlgebra.

commit 489d23d52884b841b5651d46d2b1983dad63bac0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jan 28 18:28:14 2010 +0100

    Fixed Poly.nroots() to handle more domains

commit 52ccfce5c62dc0b9ae1fa2c2bcb8eaeda2945911
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Dec 15 22:04:48 2009 +0100

    Added support for multiple algebraic extensions

commit f0aa007017d311a19915d3d16d5649de2f90bc62
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 13 17:58:29 2009 +0100

    Added tests for OperationNotSupported exception

commit 622686b99fb6b3c5128cae12296eec34d3f1ff75
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 13 17:54:12 2009 +0100

    Added Algebra.has_assoc_{Ring,Field} to simplify code

commit 2cab252113a89138ed3153fcb8c7d3751901e0bd
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 13 12:47:47 2009 +0100

    Implemented Poly.nroots() based on polyroots()

commit ca67ecb26facee383040abec232de0609bd99a6a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 13 12:32:01 2009 +0100

    Preliminary implementation of AlgebraicNumber class

commit 854264790c89577da73c5d6fd165caeb69a72092
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Dec 12 23:47:50 2009 +0100

    Exposed sqf_norm() functionality to the top-level

commit f800f95f069b55234ebb9c6e91ed80777092e600
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Dec 12 19:38:50 2009 +0100

    Moved minpoly() to sympy/polys/numberfields.py

commit bd0be062a9785b1ca15faab626f7b7106e11e612
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 10 02:43:44 2009 +0100

    Implemented Trager's factorization algorithm

    Now you can easily factor polynomials over algebraic
    extensions of rationals, e.g.:

    In [1]: factor(x**4+1, extension=sqrt(2))
    Out[1]:
    ⎛        ⎽⎽⎽    2⎞ ⎛        ⎽⎽⎽    2⎞
    ⎝1 + x⋅╲╱ 2  + x ⎠⋅⎝1 - x⋅╲╱ 2  + x ⎠

    In [2]: expand(_)
    Out[2]:
         4
    1 + x

    In [3]: factor(x**4+1, extension=I)
    Out[3]:
    ⎛     2⎞ ⎛      2⎞
    ⎝ⅈ + x ⎠⋅⎝-ⅈ + x ⎠

    In [4]: expand(_)
    Out[4]:
         4
    1 + x

    There is also support for multivariate polynomials:

    In [1]: factor(x**2 - 2*y**2, extension=sqrt(2))
    Out[1]:
    ⎛        ⎽⎽⎽⎞ ⎛        ⎽⎽⎽⎞
    ⎝x + y⋅╲╱ 2 ⎠⋅⎝x - y⋅╲╱ 2 ⎠

    At this point only single extensions are supported.

commit 701c18231efe7d5aed57d510b472d907c6e24dfb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 10 02:42:32 2009 +0100

    Implemented dmp_compose() and {dup,dmp}_sqf_norm()

commit 618c7d02aada9f96796d9d18eef545192d09ab2c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 10 02:41:05 2009 +0100

    Implemented {dup,dmp}_trial_division() functions

commit 9b9c161b047ebe165c3d7e49a10a05752f7e994f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 10 02:37:00 2009 +0100

    Added support for algebraic number fields to Poly

    Now you can specify an algebraic extension of rationals,
    in which computations will be performed, e.g.:

    In [1]: f = Poly(2*I*x**2 + I/2, x, extension=I)

    In [2]: f
    Out[2]: Poly(2*I*x**2 + I/2, x, domain='QQ<I>')

    or alternatively (for Gaussian integers):

    In [3]: f = Poly(2*I*x**2 + I/2, x, gaussian=True)

    In [4]: f
    Out[4]: Poly(2*I*x**2 + I/2, x, domain='QQ<I>')

    At this point only single extensions are supported.

commit 7bc17404405526e8fbb5e75702b81477e0685da6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 10 03:48:30 2009 +0100

    Replaced quo() with exquo() in sympy/solvers/recurr.py

commit 2247e95a005f3bbd3081f9f5cf2cb1cbf566f582
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 10 02:32:47 2009 +0100

    Auto-generate a symbol if not specified in minpoly()

commit 88bf187d495da34a80f208dfef7df5cca03cb5ba
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Dec 9 13:12:02 2009 +0100

    Implemented function for computing minimal polynomials

    The new function is minpoly() which uses Groebner basis techniques
    to find the minimal polynomial of an algebraic number. The result
    is a primitive polynomial in ZZ[x] of minimal degree, e.g.:

    In [1]: a = sqrt(2) + sqrt(3) + sqrt(6)

    In [2]: minpoly(a, x)
    Out[2]:
                     2    4
    -23 - 48⋅x - 22⋅x  + x

    In [3]: a = 2*I + sqrt(2 + I)

    In [4]: minpoly(a, x)
    Out[4]:
                  2    4
    37 + 8⋅x + 4⋅x  + x

    This function may fail to compute the minimal polynomial even if
    its input is an algebraic number. This happens when there are
    several candidates of a solution and SymPy fails to solve zero
    equivalence problem when substituting input argument for `x`.

commit 3725fb0fe4e15553e7715e2205fcd6523dad0ae6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Dec 8 23:38:48 2009 +0100

    Refactored polytools.py (part II), new tests written

commit 7feebad0cf4ea00287ac5971f9d662cc209ae1b7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Dec 8 19:36:12 2009 +0100

    Take advantage of domain when parsing expressions

commit eea26e1cb6a5081797b050f0014c90ac057aeff1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Dec 8 18:55:02 2009 +0100

    Fixed dup_decompose() to work with larger input

commit b5c6e2df2065be13b8d1946741126bda40532637
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Dec 8 18:53:53 2009 +0100

    No more ExtraneousFactors exception in factortools.py

commit 8df456a7d709a6d74a47b7e9e70dbcb89f3d1859
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Dec 8 13:57:24 2009 +0100

    Refactored polytools.py (part I), new tests written

commit ce19861d871d4b1319d29583469d8666c525209e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Dec 7 17:52:17 2009 +0100

    Improved test coverage in sympy/polys/factortools.py

commit ebea6c5b94502c1503729de92f37efe89e6955c8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Dec 7 11:45:31 2009 +0100

    Added sympy/polys/tests/test_monomialtools.py

commit 4b925ca7d385721e7a93b0a2a7e736f5ffae01a0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 3 23:22:09 2009 +0100

    Improved ANP and AlgebraicField classes

commit eddaf30c2a28517946dc7a28365d68a32037ecd7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Dec 7 08:59:32 2009 +0100

    Fixed doc/src/modules/polynomials.txt examples

commit 6c94f0f3c0470bfe11f2dba648cb6d61e264c85e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 6 23:26:49 2009 +0100

    Added explicit imports to polys module's docstrings

commit 7fba713db1f94f256051b069968bd526fdbd8fb0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 6 22:23:25 2009 +0100

    Added lots of tests for sympy/polys/polytools.py

commit e03cb53bf8013de4aa8a10aefbd8b88dd1088d91
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Dec 4 10:11:08 2009 +0100

    Implemented terms_gcd() function in sympy/polys

commit d331c190c35fcbfb75cef614c7c2f437be7a9d2c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Dec 2 19:47:27 2009 +0100

    Renamed rootfinding.py to polyroots.py in sympy/polys

    This change was needed to make bin/test happy and allow
    it to run tests for roots() and friends.

commit 425e225b7ed18de7cf9b1100222ce7cb8fccbe60
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 19 14:24:38 2009 +0200

    Improved Wang's algorithm to run in more deterministic time

    As the multivariate factorization algorithm (Wang's) was tested
    for correctness for multitude of inputs using different system
    configuration schemes (e.g. using gmpy as ground coefficients),
    now we can lower bounds for evaluation points of variables,
    when transforming multivariate problem to a univariate one.

    Now the algorithm will try to find three evaluation sets, such
    that all sets generate the same number of univariate factors
    after substitution. If a new set generates smaller number of
    factors, then all other are discarded and algorithm tries to
    find to other configurations with the same number of factors.

    If any of evaluation sets gives factor list of length one, then
    the input multivariate polynomial is irreducible and no further
    factorization is computed.

    The first evaluation set tried is always [0,0,...,0], to test
    if rare but very promising situation happens. Other evaluation
    sets are generated at random, modulo some integer. At first the
    algorithm generates sets modulo 1, i.e. in range [-1, 1], then
    modulo 2, i.e. in range [-2,2] and so on. For each modulus only
    5 evaluation sets are checked. If algorithm wasn't able to find
    three configuration that minimize number of univariate factors
    then it proceeds to the next modulus and continues searching.

    When three sets were found, then the algorithm chooses the one
    which generates, after substitution, the univariate polynomial
    of smallest max-norm. This is important because EEZ lifting
    algorithm is very sensitive to coefficient sizes. Univariate
    factorizations are only a small part of the total procedure
    execution time, so it might be convenient to try a few more
    factorizations to minimize further coefficients.

    If you want to experiment with parameters described above,
    refer to sympy/polys/factortools.py and look for EEZ_*
    constants.

    If you get ExtraneousFactors (in fact NotImplementdError)
    exception then it may have to causes:

    1. EEZ_* parameters were set too low and algorithm was stuck
       on local minimum of the number of univariate factors. In
       this case try to run algorithm several times to verify
       the problem, because it may find a suitable evaluation.

    2. Ground types don't work and their failure is masked with
       known algorithmic behaviour. In this case don't hope
       for a successful factorization.

    Both cases show bugs which have to be fixed.

commit afb38863484d13b61f0d636bec980f1c0c1fed24
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Aug 19 03:04:59 2009 +0200

    Cythonized zero-level algorithms in new polynomials module

    Pure Python:

    In [1]: f = expand(((x+y+z)**15+1)*((x+y+z)**15+2))

    In [2]: %time a = factor(f)
    CPU times: user 109.45 s, sys: 0.01 s, total: 109.47 s
    Wall time: 110.83 s

    In [4]: %time a = factor(f)
    CPU times: user 109.31 s, sys: 0.03 s, total: 109.34 s
    Wall time: 110.68 s

    Pure mode Cython:

    In [1]: f = expand(((x+y+z)**15+1)*((x+y+z)**15+2))

    In [2]: %time a = factor(f)
    CPU times: user 72.09 s, sys: 1.02 s, total: 73.11 s
    Wall time: 74.18 s

    In [4]: %time a = factor(f)
    CPU times: user 72.81 s, sys: 0.04 s, total: 72.85 s
    Wall time: 73.74 s

    On average Cython version is two times faster than pure
    Python. This is an improvement and hopefully it should
    get even better in future.

    To make cooperation with Cython more comfortable a new
    decorator was added to sympy/utilities/cythonutils.py.

    Example:

    @cythonized('n,k')
    def some_function(n):
        return n**k

    This means that `some_function` will be compiled by
    Cython if available, treating variables n and k as
    integers (cython.int). This is convenient because
    currently we don't use any other types.

    If Cython is not available then @cythonized is an
    empty decorator (there is no performance penalty).

    To take advantage of pure mode Cython, you have to
    compile modules which support cythonization. To do
    this, issue:

    python build.py build_ext --inplace

    in SymPy's root directory (or use make). Then run
    isympy or import sympy as usually (compiled modules
    will have priority over pure Python).

commit 1c4349760a8c767dbff5984ec56364422d337e43
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Sep 10 04:32:27 2009 +0200

    Improved polynomial unification functions

    Unification is a process where given two polynomials with
    (possibly) different generators and coefficient domains
    we get equivalent polynomials with the same generators
    and coefficient domain.

    In simple cases, e.g. when coefficient domains don't overlap
    with generators, unification rules are also simple. However,
    consider the following situation:

    In [1]: f = Poly(x, x, y)

    In [2]: g = Poly(x, y, z)

    In [3]: f
    Out[3]: Poly(x, x, y, domain='ZZ')

    In [4]: g
    Out[4]: Poly(x, y, z, domain='ZZ[x]')

    Lets assume we want to compute f+g. Now the question is what
    should be the common generators and coefficient domain. One
    option is to use ZZ[x] domain, but then we loose information
    that x was a generator in f. The other option is to assume
    (x, y, z) the generator set, but in this scenario we loose
    information that x was a part of domain in g.

    Current solution is to not allow such unifications at all:

    In [5]: f+g
    (...)
    UnificationFailed: can't unify ZZ with ZZ[x], given (x, y, z) generators

    This states that the common set of generators is (x, y, z) and
    that it intersects with one of the initial coefficient domains.
    Such behavior will make computing with polynomials less error
    prone and easier to understand. If user wants to compute f+g
    anyway, then he must do conversion of on of the input
    polynomials manually.

commit dad03dd84d1183de91e7fbac3836974c4a39a9d3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 18 18:42:05 2009 +0200

    Implemented function for generating Swinnerton-Dyer polynomials

commit 8bffe773f77dc2db3e3a9f7a1fe44b1633bd7e7b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 18 16:17:26 2009 +0200

    New polynomials now work with all three ZZ types

commit 0e545f5dba6fccdb0e9d07235d2cd8b986517364
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 18 16:12:40 2009 +0200

    Fixed Integer.__mod__, now returns Integer instance

commit 22c4061074ae67d59dcabfeb491b2a2a5fa947bf
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 18 11:59:46 2009 +0200

    Improved ordering of variables in Poly and functions

    In mathematics we are acustomed to specify orderings of variables
    different than lexicographic, like x < y < a < b, e.g. to ephasize
    that a polynomial is in x and y variables and a, b are symbols of
    the ground domain.

    Now we use similar concept when creating a Poly:

    In [1]: var('p,q,r,s,t,u,v,w')
    Out[1]: (p, q, r, s, t, u, v, w)

    In [2]: Poly((x-p)*(x-q))
    Out[2]: Poly(x**2 - x*p - x*q + p*q, x, p, q, domain='ZZ')

    Above 'x' is the main variable, which is important when
    computing division or resultant of polynomials. You can
    also specify that one of variables is the main one, by
    using `wrt` (with respect to) keyword argument:

    In [3]: Poly((x-p)*(x-q), wrt='p')
    Out[3]: Poly(-p*x + p*q + x**2 - x*q, p, x, q, domain='ZZ')

    In [4]: Poly((x-p)*(x-q), wrt='q')
    Out[4]: Poly(-q*x + q*p + x**2 - x*p, q, x, p, domain='ZZ')

    If `wrt` is specified, Poly will override all rules it has
    for sorting variables and let this chosen variable to be
    the main one. Note this is very different from specifying
    explicit generators, because it does not touch domain
    analysis algorithms (generators and domain are still
    figured out using automatic tools).

    If this is not enough, one can specify explicit order of
    variables, e.g.:

    In [6]: Poly((x-p)*(x-q), sort='q < p < x')
    Out[6]: Poly(q*p - q*x - p*x + x**2, q, p, x, domain='ZZ')

    or even combine `wrt` and `sort` keyword arguments:

    In [7]: Poly((x-p)*(x-q), wrt='q', sort='p < x')
    Out[7]: Poly(q*p - q*x - p*x + x**2, q, p, x, domain='ZZ')

    Poly is now also much more intelligent when unifying polynomials:

    In [12]: f = (x-p)*(x-q)

    In [13]: g = (x-r)*(x-s)*(x-t)

    In [14]: factor(resultant(f, g))
    Out[14]: (p - r)⋅(q - r)⋅(p - s)⋅(q - s)⋅(p - t)⋅(q - t)

    resultant() of f and g was computed with respect to `x` variable,
    which is intuitive, but failed in the previous implementation.

    And more examples:

    In [15]: factor(resultant(f, g, wrt='x'))
    Out[15]: (p - r)⋅(q - r)⋅(p - s)⋅(q - s)⋅(p - t)⋅(q - t)

    In [16]: factor(resultant(f, g, wrt='p'))
    Out[16]: (x - r)⋅(x - s)⋅(x - t)

    In [17]: factor(resultant(f, g, wrt='q'))
    Out[17]: (x - r)⋅(x - s)⋅(x - t)

    In [18]: factor(resultant(f, g, wrt='r'))
    Out[18]: (x - p)⋅(x - q)

    In [19]: factor(resultant(f, g, wrt='s'))
    Out[19]: (x - p)⋅(x - q)

    In [20]: factor(resultant(f, g, wrt='t'))
    Out[20]: (x - p)⋅(x - q)

commit dd24673398dc1c55f221b26022851148394a2512
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 17 13:15:32 2009 +0200

    Improved _analyze_power to work with Real arguments

commit 950969b65017a227a41d5f45ca33ca96139cebc6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 17 00:48:56 2009 +0200

    Implemented Collins's modular resultant algorithm

commit f32769fc3e5a72efc946c81bda4376120e19b201
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 17 00:50:18 2009 +0200

    Enabled and fixed tests for dmp_content() function

commit 97c86e97ef829e6f61b5aa6a85f890126177a9cb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 17 01:00:03 2009 +0200

    Implemented dmp_apply_pairs() function in densebasic.py

commit 4b0b1578320e121cd1a4e391eabc0023fc6996c2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 17 01:01:13 2009 +0200

    Slightly improved efficiency of DUP and DMP arithmetics

commit 70353e95f7ad581431fd98865f8e8cd5072425c5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 17 00:43:38 2009 +0200

    Implemented Berlekamp's factorization algorithm over GF(p)

commit c03c3c8ae523ffb18d94239d3a3b4df6e345c7a2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 12:40:41 2009 +0200

    Fixed sympy.solvers.recurr to work with new polynomials

commit 0d5b52c4bd6f6c3b17a46194c0e6d162ecd1348c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 11:47:49 2009 +0200

    Fixed sympy.solvers.solvers to work with new polynomials

commit 90d277ba9cde9d1ea39fdbc96cdd5f59413bcb1c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 11:48:36 2009 +0200

    Fixed sympy.solvers.polysys to work with new polynomials

commit 330ff3b874150c944572f93928fec7e9fa991fee
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 12:27:02 2009 +0200

    Fixed sympy.statistics to work with new polynomials

commit e82d96293972eb726f602c0c34494ba47a1a113d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 09:25:54 2009 +0200

    Fixed sympy.concrete to work with new polynomials

commit a53205c18034081d94a8afed9bee98a5a9e40c2c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 12:24:07 2009 +0200

    Fixed sympy.integrals to work with new polynomials

commit 2bd38a1fc1ce6ab5196762b7a8d63fe1de492306
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 11 22:36:39 2009 +0200

    Fixed sympy.matrices to work with new polynomials

commit f43d709cdf3d81443b345a3f63cb704a97f94d17
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 13:29:56 2009 +0200

    Fixed sympy.simplify to work with new polynomials

commit 13a5b105d552f5173a23c3f815c241a9c2ba9894
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 11 14:03:37 2009 +0200

    Fixed sympy.core to use new polynomials properly

commit 279b655190e3810510228af11381076597e75c59
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 10 21:24:27 2009 +0200

    Updated printing code and tests for Poly class

commit 31c9aa43ffc7bc031493fc4ea27b74dc50c4d035
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Apr 30 19:23:57 2009 +0200

    New module for computing in polynomial algebras

    This is the second complete rewrite, and hopefully the last one,
    of polynomials module. The new module implements, new to SymPy,
    philosophy of performing complicated computations in a multilevel
    environment, where basic operations are done efficiently without
    user interface overhead and UI does not mess with any algorithms.

    Three levels were introduced:

     L0. Is implemented in procedural style and uses raw polynomial
         representations as arguments to functions. Most algorithms
         are implemented on this level including GCD and factorization.

         There are several sets of functions with special prefixes:

          1. gf_ --- polynomials over Galois fields

          2. dup_ --- Dense Univariate Polynomials over any domain
          3. dmp_ --- Dense Multivariate Polynomials over any domain

          4. d(u|m)p_zz_ --- DUP or DMP over integers
          5. d(u|m)p_qq_ --- DUP or DMP over rationals

          6. d(u|m)p_rr_ --- DUP or DMP over a ring
          7. d(u|m)p_ff_ --- DUP or DMP over a field

          8. sdp_ --- Sparse Distributed Polynomials over any domain

         Each type of polynomial: GFP, DUP, DMP, SDP, has a raw
         representation and function call specification associated:

          1. GFP repr: [c_n, ..., c_0]
                 spec: gf_some_function(f, g, p, K)

                 where p is prime >= 2, type int
                       K is any ZZ algebra

          2. DUP repr: [c_n, ..., c_0]
                 spec: dup_some_function(f, g, K)

                 where K is any algebra

          3. DMP repr: [[...], [...], ..., [...]]
                 spec: dup_some_function(f, g, u, K)

                 where u is number of nested levels - 1
                       K is any algebra

                 DMP for u = 0 is DUP

          4. SDP repr: [(M_n, c_n), ..., (M_0, c_0)]
                 spec: dup_some_function(f, g, u, O, K)

                 where u is number of variables - 1
                       O is monomial order function
                       K is any algebra

     L1. Is implemented using OO paradigm and wraps up functionality
         provided by L0. For each type of polynomial there is a class
         implemented: GFP, DUP, DMP, SDP. There are additional classes
         for multivariate rational functions DMF and algebraic number
         polynomials ANP (a representation of algebraic numbers).

         Each class is constructed using an explicit representation and
         algebra specification. Method calls will unify arguments by
         coercing their ground domains (e.g. ZZ + QQ -> QQ), so there
         is no need to specify any extra arguments.

         Note that unification rules on this level are very simple so
         e.g. operations on a univariate polynomial as one argument and
         a multivariate polynomial as the other aren't allowed, unless
         you make any coercions explicitly.

         For efficiency, every class in L1 doesn't derive from Basic, which
         allows to use those classes as representations of composite ground
         domains e.g. ZZ[x,y,z], QQ(x,y).

     L2. User-level interface to polynomial manipulation algorithms. If
         you are a user, then you choose this level, which provides you
         convenient Poly class which wraps L1 classes as internal poly
         representations but provides user-friendly interface. There
         is also a set of public functions exported: gcd, lcm, factor
         and many others.

         Poly class allows you to convert a SymPy expression into a
         polynomial. There is no need to specify symbols, Poly class
         will parse the expression and figure out what are symbols
         and what are members of the coefficient domain. Note also
         that you can create polynomials using not only symbols but
         any expressions, this way Poly.symbols was renamed to
         Poly.gens, to emphasize this fact, so

                         Poly(sin(x)**2 + 1, sin(x))

         are valid arguments to Poly.__init__ and computing e.g.

                       gcd(sin(x)**2 - 1, sin(x) - 1)

         is also allowed.

    Polynomial manipulation algorithms understand algebraic properties
    of elements of a ground domain (polynomial coefficients). For this
    purpose additional module was implemented to define all important
    coefficient domains (the only missing is for algebraic numbers).

    Basically the world is divided into to parts: types and categories
    (here algebras or domains). Type is an object which caries data
    and is equipped with algorithms for processing this data in some
    way using some paradigm for this purpose. Different types have
    different algorithms and use different paradigms. However from
    mathematical point of view there are categories which have some
    properties and don't care about internal behavior of a data type.

    So, lets suppose we want to compute in integers ring. Then we have
    a category ZZ, which is supposed to have binary operations +, -
    *, functions like gcd(), lcm() etc. and some properties. On the
    other side we have several data types for integers: Python (int),
    SymPy (Integer) or gmpy (mpz), or maybe even something else. Each
    of these has different algorithms implemented and have different
    interfaces, e.g. int does not implement gcd(), which is however
    implemented by Integer and mpz. On the other hand int and mpz
    are fast, but Integer is very slow.

    To have one source base of algorithms we specify a category for
    a mathematical concept for each data type we want to have, e.g.
    we have (in algebratools.py) ZZ_python, ZZ_sympy and ZZ_gmpy
    which implement Ring interface which is based on Algebra
    abstract class.

    You can use any of ZZ_* classes as coefficient domains in new
    polynomials module, by creating instances of those classes. Or
    you can just

              from sympy.polys.algebratools import ZZ

    to get optimal solution for your system (ZZ is an instance).

    Then if a function gets as parameter K algebra ZZ, then it knows
    that all coefficients given in a polynomial representation to this
    function have type ZZ.dtype (e.g. int) and know that int is supposed
    to provide some methods, e.g. __add__ and that ZZ wraps some other
    methods, e.g. ZZ.gcd is really igcd from sympy.core.numbers.

    The same is for other domains: QQ, ZZ[x,y], ZZ(x,y,z), QQ('x') ...

    There is also one category above all others: EX, which is a wrapper
    for SymPy expressions. If Poly can't figure out an optimal domain
    or such domain in not yet implemented (e.g. algebraic numbers),
    then it uses EX. EX is slow, but tries to do its best to solve
    zero equivalence problem in a symbolic way (by calling simplify).

    On L2 level you don't have to care about domains at all. Poly will
    figure out a domain or fallback to EX. However, when implementing
    algorithms that require certain algebraic properties to be met, be
    specific or you loose the battle. The most important thing is
    to see a difference between computations over a ring and a field,
    which can cause you a lot of trouble. So, don't hack and use
    the interface, e.g. don't gcd(), div(), div() but cancel() and
    it will take care of all weird cases.

    To specify a domain simply add `domain` keyword argument. Note
    you need also to specify generators when this kwarg is given
    (this will change in future) e.g.

                 Poly(x**2*y + z, x, y, domain='ZZ[z]')

    Domain can be specified as a string or explicit algebra. Allowed
    strings are 'GF(p)' where p is prime, 'ZZ' or 'Z', 'QQ' or 'Q',
    'ZZ[x,y,z]', 'QQ[x,y,z]', 'ZZ(x,y,z'), 'QQ(x,y,z)' and 'EX'. Or

               from sympy.polys.algebratools import ZZ

    and ZZ[x,y,z] or even ZZ['x','y','z'] will work. Each algebra
    implements __getitem__ for this, which fallbacks to poly_ring
    method. Note that __call__ is used for very different purpose,
    so don't get tricked, use ZZ.frac_field(x,y,z) or a convenient
    string representation.

    If you don't want to specify an exact domain but you know
    computation has to be done in a field then pass `field=True`
    to Poly or any polynomial function to force a Field to be
    chosen rather than a Ring. By default if Poly sees that
    coefficients fall into a Ring it will choose it, e.g.

               Poly(x**2 + 1) will have the domain ZZ

    but

               Poly(x**2 + 1, field=True) will have QQ

    Despite that if a function needs a field then it will silently
    convert to field and continue computations. To disable this
    set `auto=False`. Don't complain if you get DomainError or
    ExactQuotientFailed exceptions. This automatic behaviour is
    available only on L2 level. On other levels no auto-games are
    played by polynomial manipulation algorithms and if there is
    an inappropriate domain of computation specified, algorithm
    will just fail, raising an exception.

    If you want to compute in Galois fields then specify `modulus`
    keyword argument. Note that only univariate polynomials are
    supported and some methods might not be implemented (you will
    get OperationNotSupported exception). Alternatively specify
    `domain='GF(p)'` where `p` is a prime integer.

    Note that when parsing expressions Poly will treat everything
    which is not a number as a generator. This way

                     gcd(x**2 - 2, x - sqrt(2))

    is 1, not x - sqrt(2). Specify generators to override this behaviour.
    In future `extension` keyword might be included to notify algorithms
    about algebraic relations between coefficients.

commit 6a1cdebb6efc4e1fa18a090fed753e310a268969
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Aug 11 14:00:56 2009 +0200

    Test integrate() interface in core, not integration algorithm

commit 707b715bd2d25444bcc68a2eef8be4c59349e596
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Aug 7 23:04:12 2009 +0200

    Added new methods to Integer: gcdex(), gcd(), lcm(), invert() ...

commit 6d8a531d8357a9b36b52f239ae6e4ed63bd75b9d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 13 12:07:50 2009 +0200

    Added as_Pow() method to exponential function class

commit 1b727777952535e41269ed28c890c095a77958da
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Aug 7 23:08:16 2009 +0200

    Implemented as_Add(), as_Mul() and as_Pow() in sympy.core

commit ad626a6c48b175f5fbd8071ea70f7661e1309a6c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Aug 10 20:29:50 2009 +0200

    Import any() and all() in runtests.py

commit 32f00779c494505af63164bd5af1a07356b633b8
Merge: 56714e5 0b214d1
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Mar 17 21:56:23 2010 +0100

    Merge branch '0.6.7'

    Conflicts:
    	AUTHORS
    	doc/src/aboutus.txt
    	sympy/matrices/matrices.py

commit 0b214d1d996c5b36b3b0e35097269e836b966e50
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Mar 17 21:38:51 2010 +0100

    SymPy 0.6.7

commit 8e22b769552340713710feaa9c4fe14d68fe9d45
Author: Fredrik Johansson <fredrik@airy.(none)>
Date:   Thu Mar 4 14:27:02 2010 -0700

    Fix mpmath for Python2.5/2.4

    This is from mpmath revision 1099:
    "possible workaround for systems where math.log and math.sqrt return nan
    instead of raising for negative arguments"

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 7b29d126b95b95d43ff5a335ff1e2588a1a86df9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Mar 2 23:14:53 2010 +0100

    SymPy 0.6.7.rc2

commit 30abc34c104156cae8e21d823cf438ce2c9c59bf
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Mar 2 23:10:21 2010 +0100

    skip symarray doctest for now (numpy dependent)

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 568738344aba2e74978fa63591d895b223744b90
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Mar 2 22:39:28 2010 +0100

    fix doc/src/conf.py to recognize mpmath

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 987e224c5790f56ead66462a415c92b67a4a5fbc
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Mar 2 22:17:14 2010 +0100

    update mpmath docs

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 9a72d817ee600476f34abf9d7dbf2101ace1e84a
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Mar 2 10:53:10 2010 +0100

    update mpmath to 0.14

    A few imports all over sympy had to be adapted to the API changes.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 0cef04aedbfdab232e4901631b14abb659956dbb
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Mar 2 17:34:45 2010 +0100

    remove duplicate name test

    py.test is currently broken anyway and I'm not sure whether this
    limitation still exists.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 94c44cb036d29aa3958b2c5bf74ba97c4f0d671f
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Feb 14 05:55:23 2010 +0545

    1830: import Wild into mul and test

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit c2b3b660365145dce46c7799d57050a01641e99d
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Tue Feb 16 10:58:54 2010 +0100

    Fix boolean operatures in ccode

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 1ccb76e9d4db38939d44941039a0c8b2a2269775
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Tue Feb 16 10:42:14 2010 +0100

    Precedence for boolean operators And, Or and Not

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 814bc2e3fec01f752c0606bd171ee0fbf0ed43da
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 27 20:39:48 2010 +0100

    examples/.../coupled_cluster.py should follow conventions

    1) It should complete in seconds, not minutes.  In order to speed up the
    secondquant-example, I changed the hamiltonian to be just a one-body operator.

    2) It should define a main() function, which it now does.

    3) It should be executable, which it now is.

commit 064f969341894da3e2b453ad869a39a0040961af
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 27 20:36:59 2010 +0100

    Wicks theorem was too eager to raise exception

    If wicks() cannot do anything with an expression, it should simply return it,
    not raise an exception.  (What was I thinking...?)

commit 45adc4b046a049f6a0bedf1d52e871d45d5504e1
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Feb 21 14:54:25 2010 +0100

    Updated Coupled Cluster example to use pretty_indices keyword.

commit 9e4ef78b1d5bb74b8d024fe53c3e8c8d987519c5
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 19:54:04 2010 +0100

    Make substitute_dummies() more flexible and controllable  w.r.t. output

    The keyword pretty_indices used to be boolean, but is now a dict of lists
    containing letters to label the new dummy indices.  This allows the user much
    better control over the resulting expression.

    Docstring and doctests updated accordingly.

commit 81e2a14ab56f4cee7ae0882a059b93808ef4802e
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 21:51:47 2010 +0100

    substitute_dummies should also accept single term expressions.

commit b39786ab3be3e3fb77d839517d52a610026f5f78
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 19:30:36 2010 +0100

    Fixed doctests and improved documentation of _substitute() in secondquant.py

commit f6f7deec8f43c5399ca6b9ecb21d99ccc1b3fb7e
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 19:22:32 2010 +0100

    Refactoring in substitute_dummies and related helper routines

    renamed the iterator '_reverse' to 'arg_iterator' for clarity

commit fd0fbda9e5945fcebb238d3d3d77043c286f7110
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 18:35:53 2010 +0100

    Improved documentation of _sort_anticommuting_fermions() in secondquant.py

commit 8a48acda090a28453fb5c25251aaab115cc8a1c2
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 18:26:33 2010 +0100

    Improved documentation for evaluate_deltas

commit 6f082b3af90cd067c9a31db0169a1f7f1ef3e519
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Feb 20 13:37:28 2010 -0700

    Fix visual factorint to work in Python 2.5/2.4

commit 7003ad1905d021a2892f3af5fecf95d9f0098cd2
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Feb 22 12:05:06 2010 -0700

    Replace __len__ with __iter__ in post/preorder_traversal

    We really want the items to be an iterable to recurse downward.

    This fixes an infinite recursion that might happen with strings.

    Signed-off-by: Toon Verstraelen <Toon.Verstraelen@UGent.be>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 593d9b14718467d4d05a0668cb860e13eb7b5bc5
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Feb 21 18:36:02 2010 +0100

    Extend post and pre order traversal for generic iterables

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 50ced4415e4ab863faabbfbc872778aa022a83b1
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Feb 21 10:42:50 2010 +0100

    Fixed post and pre order traversal for Piecewise

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit fffe9c31fe4a1da9193f84f89448db385603b8e3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 14 23:56:41 2010 -0800

    Fernando added to credits

commit c5a69e8277d933469cb2762188cd09d46ef24586
Author: Fernando Perez <Fernando.Perez@berkeley.edu>
Date:   Sun Feb 14 00:53:55 2010 -0500

    Implement symarray, providing numpy nd-arrays of symbols.

    The generated arrays contain symbols whose names are prefix_i_j_k... for the
    element at position [i,j,k,...].

    This doesn't fully resolve issues like:

    http://code.google.com/p/sympy/issues/detail?id=16
    http://code.google.com/p/sympy/issues/detail?id=646

    But it does provide a tool that can be useful in such cases.

commit 06827dee457f6044f4f4000577e53882bed4d7bb
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Feb 13 19:26:08 2010 -0700

    Rewrite the visual factorint() example to be more clear

commit 22834a0670523d6549e5d5c229451db4b42acbe9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Feb 12 10:28:23 2010 +0100

    fix preview() documentation

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit dd893cce0ef82c8e90c8aefe5e7788766c6198fe
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Feb 11 13:48:17 2010 -0700

    Add visual option to factorint()

    This lets you get a visual factorization of an integer, which is much
    easier to read than the dictionary normally returned.

    For example:

    In [1]: factorint(42**2)
    Out[1]: {2: 2, 3: 2, 7: 2}

    In [2]: factorint(42**2, visual=True)
    Out[2]:
     2  2  2
    2 ⋅3 ⋅7

    This works by using the evaluate=False flag in Mul and Pow.

    I also added information to the docstring of factorint(), including two
    nice list comprehensions that will convert between one form and the other.

    Tests added.

commit 1f5f7ac0213dbf2ade40e4cf93467e994a82e360
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Feb 11 13:00:21 2010 -0700

    Fix issue 1824: Pow(3, 1, evaluate=False) does not pretty-print correctly

    It was printing as:

    In [26]: Pow(3, 1, evaluate=False)
    Out[26]:
    1 ⎽⎽⎽
    ╲╱ 3

    Now it does what you would expect:

    In [1]: Pow(3, 1, evaluate=False)
    Out[1]:
     1
    3

    Test added.

commit 86a9016ca8d180851b5f808e3bcbed48c876f8b2
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Feb 11 22:33:54 2010 +0100

    SymPy 0.6.7.rc1

commit 56714e51d4291c61941a74863278bd463bda8c92
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Dec 8 18:44:11 2009 +0000

    physics: remove unused imports.

commit 73bbaf543a232292b347a94a308d54260273bb3d
Author: Priit Laes <plaes@plaes.org>
Date:   Mon Dec 7 23:08:13 2009 +0200

    assumptions: Remove unused imports.

commit 26c37e8d2f7f3d36f21d6cdce0ea69840b403b48
Author: Priit Laes <plaes@plaes.org>
Date:   Tue Dec 8 00:09:02 2009 +0200

    Add audit command to setup.py that checks source code using PyFlakes.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit 91704b25eac8caac786488f21efa97436f4b8542
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Mar 8 14:15:11 2010 -0700

    Add Raffaele to credits.  Welcome to SymPy!

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 13c7a73e50826dd1fe7c7319fb75cc9191127501
Author: Raffaele De Feo <alberthilbert@gmail.com>
Date:   Mon Mar 8 20:47:31 2010 +0100

    Non-commutative multinomial power expansion

    modified:   sympy/core/power.py
        corrected wrong expansion of non-commutative multinomial powers

      modified:   sympy/core/tests/test_expand.py
        added a test for the expansion of non-commutative multinomial powers

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 366737663f9fb922a0657b358dba91f64ad09634
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 2 12:33:42 2010 -0800

    Added Set.is_number to return False always.

commit c5e5873bac08738f4a6979244600e26e58bd73e7
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 2 11:59:43 2010 -0800

    Fixing issue with Union._contains.

    Union._contains now uses Or so it can combine multiple sets
    in a symbolic manner. This is to allow things like::

        Union(Interval(0,1),Interval(2,3)).contains(x)

    to return::

        Or(And(0 <= x, x <= 1), And(2 <= x, x <= 3))

commit 5b2aef9622c860f9a6af2cfe92a8f77d3c75136a
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Mar 2 11:16:03 2010 -0800

    Added tests for relational and sets.

commit ccc09e9445fd0bb619cff88336e3e773b090f2c5
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Mon Mar 1 22:35:09 2010 -0800

    Fixed problem with Set.__contains__.

    Previously, if Set.contains returned a non-bool, __contains__
    would simply cast it as a bool.  Now __contains__will raise
    a TypeError.  This allows contains to return symbolic expressions
    that won't be auto-cast to a bool in __contains__.

commit 11b8d75f897ce1fd99102ac5bb5c47396c63ac88
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Mon Mar 1 22:33:13 2010 -0800

    Moved test in test_ode.py to xfail.

commit 1329fb10c40c8416fd60217b65429f5f62337b58
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Mon Mar 1 14:17:20 2010 -0800

    First draft at fixing Relational bugs.

commit 7c6d5f3043dfa3f0c334f385dfc0281007eecd53
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Feb 14 05:55:23 2010 +0545

    1830: import Wild into mul and test

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 2e669d9555121545d0d7e0373acddaf8d2e864de
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Tue Feb 16 10:58:54 2010 +0100

    Fix boolean operatures in ccode

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 63875d42951012514f9f9b1fe41672d8ef32fd68
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Tue Feb 16 10:42:14 2010 +0100

    Precedence for boolean operators And, Or and Not

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit c681aa4b976b6bd20584573907902beffb34ffcd
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 27 20:39:48 2010 +0100

    examples/.../coupled_cluster.py should follow conventions

    1) It should complete in seconds, not minutes.  In order to speed up the
    secondquant-example, I changed the hamiltonian to be just a one-body operator.

    2) It should define a main() function, which it now does.

    3) It should be executable, which it now is.

commit 8d801aa43da201131aec17557e88eb2245616d5b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 27 20:36:59 2010 +0100

    Wicks theorem was too eager to raise exception

    If wicks() cannot do anything with an expression, it should simply return it,
    not raise an exception.  (What was I thinking...?)

commit cf6441ca0d821be45a874b3589d384efd996e11b
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Feb 21 14:54:25 2010 +0100

    Updated Coupled Cluster example to use pretty_indices keyword.

commit 12971ae9343394c90ea2e422691912d782ce9bd9
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 19:54:04 2010 +0100

    Make substitute_dummies() more flexible and controllable  w.r.t. output

    The keyword pretty_indices used to be boolean, but is now a dict of lists
    containing letters to label the new dummy indices.  This allows the user much
    better control over the resulting expression.

    Docstring and doctests updated accordingly.

commit 151ad6a3506c7201f05e0722821aff2b5f0836ab
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 21:51:47 2010 +0100

    substitute_dummies should also accept single term expressions.

commit c3340c9e8163877caa0dcb00a49b01f154a7f547
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 19:30:36 2010 +0100

    Fixed doctests and improved documentation of _substitute() in secondquant.py

commit f959505fe3b6011b7efc98d6410403939a938822
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 19:22:32 2010 +0100

    Refactoring in substitute_dummies and related helper routines

    renamed the iterator '_reverse' to 'arg_iterator' for clarity

commit 3f4c7b86be27c3154fec1edf75a6535d8f78c470
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 18:35:53 2010 +0100

    Improved documentation of _sort_anticommuting_fermions() in secondquant.py

commit cb17c116c4e552348cbaf504f04548d44fb4f7f3
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Feb 20 18:26:33 2010 +0100

    Improved documentation for evaluate_deltas

commit 0796a176893ab56b829a4c534835890e98289ec2
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Feb 20 13:37:28 2010 -0700

    Fix visual factorint to work in Python 2.5/2.4

commit 71f55197d75ae14f594517e57fd7c7c8a1e44dd0
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Feb 22 12:05:06 2010 -0700

    Replace __len__ with __iter__ in post/preorder_traversal

    We really want the items to be an iterable to recurse downward.

    This fixes an infinite recursion that might happen with strings.

    Signed-off-by: Toon Verstraelen <Toon.Verstraelen@UGent.be>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 3a08177aabdf4346d2fbc0d2f2ba1543d72a74ef
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Feb 21 18:36:02 2010 +0100

    Extend post and pre order traversal for generic iterables

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit aae84f284066998bfefdafbf8b3af38163f06d8b
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Feb 21 10:42:50 2010 +0100

    Fixed post and pre order traversal for Piecewise

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 33a711e2f259326d894f4970ea166a088c6bdeda
Merge: cf50331 2628856
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Feb 15 10:31:21 2010 +0100

    Merge remote branch 'aaron/visual-factorint'

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit cf50331b39175b88d72ca43381b2cae0d2e7ea30
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 14 23:56:41 2010 -0800

    Fernando added to credits

commit 507c4df6a9edfd5de5ad28535d1f9236db23bf04
Author: Fernando Perez <Fernando.Perez@berkeley.edu>
Date:   Sun Feb 14 00:53:55 2010 -0500

    Implement symarray, providing numpy nd-arrays of symbols.

    The generated arrays contain symbols whose names are prefix_i_j_k... for the
    element at position [i,j,k,...].

    This doesn't fully resolve issues like:

    http://code.google.com/p/sympy/issues/detail?id=16
    http://code.google.com/p/sympy/issues/detail?id=646

    But it does provide a tool that can be useful in such cases.

commit 2628856b7b91738030f27981b9f4e35b17251c58
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Feb 13 19:26:08 2010 -0700

    Rewrite the visual factorint() example to be more clear

commit 83cbda5a944a7ae49cbff7208ad87711a09fa5ea
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Feb 12 10:28:23 2010 +0100

    fix preview() documentation

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit cb7c0a854d61de356277884bb9b66cde3899003b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Feb 11 13:48:17 2010 -0700

    Add visual option to factorint()

    This lets you get a visual factorization of an integer, which is much
    easier to read than the dictionary normally returned.

    For example:

    In [1]: factorint(42**2)
    Out[1]: {2: 2, 3: 2, 7: 2}

    In [2]: factorint(42**2, visual=True)
    Out[2]:
     2  2  2
    2 ⋅3 ⋅7

    This works by using the evaluate=False flag in Mul and Pow.

    I also added information to the docstring of factorint(), including two
    nice list comprehensions that will convert between one form and the other.

    Tests added.

commit 411d7d615d054fea3f37af61c8d5831178af3b97
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Feb 11 13:00:21 2010 -0700

    Fix issue 1824: Pow(3, 1, evaluate=False) does not pretty-print correctly

    It was printing as:

    In [26]: Pow(3, 1, evaluate=False)
    Out[26]:
    1 ⎽⎽⎽
    ╲╱ 3

    Now it does what you would expect:

    In [1]: Pow(3, 1, evaluate=False)
    Out[1]:
     1
    3

    Test added.

commit 0364b0201b9bca5cd60852bf789a2800146ae1ad
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Feb 9 13:42:29 2010 +0100

    runtests: fix output at end of test run

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 34c416a2f0a09dedb5dd2ccd258fb7c6720637d7
Merge: d3d4c08 72d7ade
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Feb 4 23:36:04 2010 +0100

    Merge remote branch 'aaron/1814'

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit d3d4c08978987038f9acea998d1d22f65aa2ba37
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Feb 4 14:32:56 2010 +0100

    runtest: break last line

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit c26a83e1b779cf304ab25291e6e2c71273f9b1b3
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Feb 4 14:13:21 2010 +0100

    runtests: more verbose about xfail and xpass

    This should be less confusing to newcomers.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 72d7ade8dd107474054c2f02c37a7684fbd9a98d
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Jan 3 19:27:30 2010 -0700

    Cleanup gotchas.txt

    This fixes all lines to be 72 characters or less and corrects a few
    errors in spelling, etc.

commit 310debe9c0df76e0967c5efbc8d3fcd90bb0a5de
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Dec 29 17:20:01 2009 -0700

    Revert "remove nth_match from ode"

    This reverts commit 4520e9102aba46337a6fae161b44b7c2ceae3660.

    Conflicts:

    	sympy/solvers/ode.py

    This also fixes up the related code to work correctly with changes made
    since this commit, and corrects a test that was incorrect but was not
    caught due to poor matching.

commit 8b10e2adcfe0ea4bd28532ff8de254c622d26eea
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Dec 23 21:46:12 2009 -0700

    Modifications to ode.py docstrings and comments

commit 7c476f5311a4a3ede0ebdcc8eda2d9423cf0cf60
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Dec 23 18:03:26 2009 -0700

    Internal modifications to ode.py

    This changes the match key for the constant nth_linear ODEs to be -1,
    conforming to the other keys being the number of the order of the term
    they are the coefficient of.  Also, some minor docstring changes.

commit 3010c25bf8b696722d188792d99fb61393fcbe35
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Jan 30 02:17:51 2010 +0000

    1770: runtests prints less

    == utilities/runtests.py
        o the full path is no longer printed for txt file doctests and the
          format has been streamlined a bit. A similar format as the regular
          tests is used to print the doctests of txt files.
        o if there are no functions to be tested then nothing is printed
          about that file when running both test() and doctest().
        o the ._test attribute was renamed testfiles to better describe what
          it represented: it is the file that has potential tests in it.
        o a header is now printed before the start of the txt file doctests.
        o the failure message for doctests is printed after the txt file
          tests, too, in case the first one can no longer be seen.
        o when running txt file doctests, the file name is printed before
          the results so the user knows what file is being tested.
        o everything past the first sympy in the path name is printed as the
          file identification.

commit 1ec0ce9f9ab3701f637722334d0738d2848338fa
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Fri Jan 29 19:44:27 2010 +0000

    Fix doctest failures in _mr_safe_helper (#1789)

    * Use integer division.
    * Normalise return value
    * Fix a typo
    * Break up some lines wih multiple statements

commit edf81a4d8eb1b5d6a6242481eea5b66c5d7ef26b
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Jan 28 22:56:20 2010 +0100

    1783: don't install bin/test, bin/doctest, bin/py.bench

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 9e35a94eceaff73b350794dcc70b4a412dc2f6e6
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Jan 14 13:23:03 2010 +0545

    1789: primetest changes to isprime and mr_safe

    Changes inspired by Christian Oudard and Aaron Meurer in Issue 1789.

    The test for numbers up to 10**16 has pseuodoprimes that pass it. An
    additional test that n not be one of the passing pseudoprimes is
    added. The ranges were modified, too, to try use base sets that had
    the lowest stot value (the number of factors of 2 that determine how
    many loops on s will be done in _test.

    The docstring was also expanded to caution about adding new ranges.

    A test of a pseudoprime that would have falsely been reported as
    being prime was added.

    The fallback number of primes that are tested was increased to 46;
    the previous set could only prove primality of numbers that are
    341550071728321 or less...and this range is already being tested
    in mr_safe. The value of 46 for the number to test is arbitrary;
    it will assure that the probability of misreporting something as
    prime will be 4**-46 (~= 2 x 10^-28). A test with 20 primes is
    believed to test up to 10**36 and 46 will test somewhere above
    that but less than 10**139 (Arnault's number).

    mr_safe has been made into a hidden function and removed from the
    ntheory import. It's just a helper function for isprime().

commit 31e99aca5e52542feda1afb88f29a3c0c516b031
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Jan 14 11:18:39 2010 +0545

    1785: expand integrand

    .expand(mul=True) *could* be applied to an integrand
    before integrating. sqrt(x)*(1+x) was failing because
    it can't be made into a Poly (with the current Poly module)
    and a test was only being done to see if the integrand was
    an Add. In this case, the integrand is a Mul that (with a
    shallow expand on multiplied terms) is converted into an Add that
    is then easily integrated. HOWEVER, there are some expressions
    that can't be integrated unless they aren't expanded. Until
    those expressions are identified then one of two paths are
    possible:

            - expand everything before integrating and
    	  go back and try it without expansion if this fails
    	- assume the user knows what they are doing and
    	  only expand after a failed attempt.

    Not knowing which is the better of the two, I've put the
    expansion after the 1st attempt has been made.

commit 0a53108aa5818abf458f73887173fe96a0d7d70a
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Fri Jan 29 01:05:44 2010 +0000

    Make doctest() return its result under Python 2.4. (#1800)

    doctest() returned None even when the tests were successful, which caused
    bin/doctest to exit with an error status.

commit f4f7ef3ef3f7a2500ac60fb035087396a1363cca
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jan 25 15:33:56 2010 -0700

    Fix doctest runner to correctly not test .txt file in Python 2.4

commit ac155fed0c720095d42f5cde286cfe7f1ff27618
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jan 25 15:25:38 2010 -0700

    Fix doctests in iterables.py to work with Python 2.4

    I also cleaned up the other doctests in the file while I was at it.

commit 14fc394d870205b06256038108c293f98f137f86
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Jan 27 18:47:34 2010 +0000

    Skip a doctest in physics/secondquant.py to work in Python 2.5

commit fae4421e4aa91aeca8a0190de929f54791ec5ba8
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jan 25 14:52:03 2010 -0700

    Updated license and readme with the year 2010

commit 770f555b6feea60028ceefc35a2a444e5492fbe0
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Jan 25 21:44:03 2010 +0100

    credits

commit c14dbafdc3b768527f4f91d0f33f112306dd955b
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Jan 25 17:42:11 2010 +0100

    fix example for recent matplotlib

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit a84c89800d1dfd2e4f64578793d5f9bdae4ff463
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 20 22:16:47 2009 +0100

    Start of 0.7.0 development cycle

commit d033c66df89aa488b87ee6002ca2c5c39e6bd552
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 20 21:51:40 2009 +0100

    Sympy 0.6.6 release

commit 243d4c8ab0e7e7815b1aa1f7843a0a558341d94d
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 20 02:21:41 2009 +0100

    SymPy 0.6.6.rc1 release

commit 60c95b3f6481a0ec118d075aedaa083c9f487e84
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 20 02:13:50 2009 +0100

    setup.py: add test runners to scripts

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 5191143672c45ce89995e4d002e9d2b1b99fb25a
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Dec 19 01:18:10 2009 +0545

    1771: error string and docstring edits

    == doc/src/gotchas.txt
        An already simplified expression was being used to generate a simplified
        expression.
    == solvers/ode.py
        o error strings are given spaces where needed so the text gets
          separated from the print expression.

commit 38eb78b0f9d61727ddabf1e361359f6ecca38fc9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Dec 18 22:48:29 2009 +0100

    fix some descriptions

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 9099cadfbf55c74facb9795127fe32bcb952b166
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Dec 18 14:01:37 2009 +0100

    update README

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 27a9b69e286787b0517c01efb79bb64ea38d6b39
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Dec 18 01:29:56 2009 +0100

    Remove setup.py test_doc

    Use bin/doctest instead. Use setup.py test only to run all tests.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 9379e66888ddfdce2442bd78edcf01c0f63450cf
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Dec 18 01:27:48 2009 +0100

    remove setup.py gen_doc

    This is basically broken, use the Makefile in doc/ instead.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 17f857cb57b020ddd97abd3d2382e151b964aead
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Dec 18 01:21:45 2009 +0100

    remove setup.py test_core

    Use bin/test sympy/core instead.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit a13a8b8e620bb5f9f3cfbda0b49e65d16afcb75e
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Dec 18 01:13:16 2009 +0100

    fix setup.py

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit eaf4326e0a1ca450994737ebb2c26697f4924719
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Dec 18 12:53:13 2009 -0700

    Move failing hyperbolic trig tests into XFAIL tests.

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 6fd9d5b813935dfbffab539df8d50dddb54a0695
Author: Julio Idichekop Filho <idichekop@yahoo.com.br>
Date:   Thu Dec 17 10:01:38 2009 +0100

    Tests for hyperbolic functions atanh, acosh, acoth. In response to issue 652.

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 45d1bedf758d634723830c2ad90880cce57378ea
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Dec 18 13:45:53 2009 +0100

    credits

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit c26351489ff7ee8d2c8cfe5a63dd49f769c07ce2
Author: Julio Idichekop Filho <idichekop@yahoo.com.br>
Date:   Thu Dec 17 12:02:09 2009 +0100

    Better docstrings for line, ray, and segment. In response to issue 828.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 9952cae6b6b7df0a92a50b6c8c72902e0f4a88db
Author: Felix Kaiser <felix.kaiser@fxkr.net>
Date:   Thu Dec 17 19:43:38 2009 +0100

    Add test for issue 1022

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 4cd2f349efa54d0d6c54fbf1671fc8fcc0952708
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Dec 13 12:44:09 2009 -0700

    Fix relativity.py to work correctly with dsolve

commit 2772690c6a4534df81b0a63db023eaf30c2e7fd5
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Fri Dec 11 21:06:51 2009 +0000

    Make pretty-printing recognise 'lambda' as a greek letter.

commit 3d6556fd34ddee445f7aca3271546279ef849136
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Dec 17 22:52:14 2009 +0100

    Welcome to SymPy!

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 7227fab87c9677788ec7cd27e4c0c174d8dcece7
Author: Łukasz Pankowski <lukpank@o2.pl>
Date:   Sat Dec 12 20:27:17 2009 +0100

    fix multiplying Matrix by numpy scalars and test it

commit 2eeaeb4e25fc7f003e76937714013e88c3b60ca6
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Dec 16 16:04:10 2009 +0545

    improve documentation about hashing

    Written by Chris Smith and Vinzent Steinberg.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Chris Smith <smichr@gmail.com>

commit 9b0ea00991b73f19019ecd3ed074938ba3eef64b
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Dec 16 00:29:06 2009 +0545

    1765: classify ode change

    Although the preconditioning tries to remove f(x) there are situations
    where this will not be possible. Since the linear test in classify_ode
    doesn't use pattern matching a check must be made to see whether f(x)
    was actually removed or not.

commit 82c1f30ad3712050a706cfeaa7eb67c22bb2e2ef
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Dec 16 01:29:25 2009 +0545

    1759: separatevars preconditions Pow

    When separating variables on an expression that is a Pow, there is
    a chance that this can be made into a Mul if the base is an Add.
    This preconditioning is now done and the test raising the issue has
    been added.

commit d4a083e787ac6b3e602b4a6fe219c938382cbab2
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Dec 13 20:47:09 2009 -0700

    Fix issue 1764 (homogeneous_order(-g(x).diff(x), x, y) traceback)

commit 10e3940a26948c0d7cb4c0c883bf7910783c29f8
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Dec 13 20:33:57 2009 -0700

    Fix issue 1726

    classify_ode() was not returning default=None when the expression has
    order 0, which was causing an error.  Also, rearranged code in dsolve so
    that it tells you that an expression that is not an ODE in the function
    given (order 0) is not an ODE instead of raising NotImplementedError

    Tests were added.

commit 885f7b1b74ab71e839389e5774f593a157f0a6ee
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Dec 15 17:36:52 2009 +0100

    Welcome to SymPy!

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit cdf10c5e4d608a332b5aa51a5c33a718e238c0b9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 13 18:46:03 2009 +0100

    fix bin/test_import

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 8dd6f148d4fcf3ac524aba33492b46661c5b2aa2
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Dec 12 04:53:46 2009 +0000

    Fix a few methods of trig and hyperbolic functions (#1755).

    Several taylor_term and _eval_rewrite_as_* methods used variables before
    they were defined.
    Tests have been added for all modified methods.

commit 8fa2d83f5fe66b6525253fd2d230b0c9847c7b48
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Dec 10 23:04:22 2009 -0700

    Change move symbols before dict in separatevars parameters list

    i.e., separatevars(expr, dict=False, symbols=[]) has been changed to
    separatevars(expr, symbols=[], dict=True).  This is because symbols is
    indented for the user while dict is mainly intended for internal use.
    This makes it possible to do separatevars(x*y + y, (x, y)) without the
    use of any magic.  Magic that was previously implemented was removed,
    and the docstring updated.

commit 03442048962794dc4acdea4ebc31527b421eaffc
Author: Julio Idichekop Filho <idichekop@yahoo.com.br>
Date:   Fri Dec 11 14:59:33 2009 +0100

    Correcting indentation problems in several files.

    Basically, all indents formated to 4 spaces, no hard tabs, no
    whitespace at the end of lines. /bin/test was executed without
    problems after modifications.

    Signed-off-by: Ronan Lamy <Ronan.Lamy@normalesup.org>

commit 1e488d145001d4c284324e6d036235f04df3b325
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Thu Dec 10 19:29:04 2009 +0000

    Fix tracebacks in examples.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 08066aec9aa92ca29d9bacb9c67c11e28284b98c
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Dec 9 23:45:11 2009 +0100

    update setup.py

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 0ad0e263351da6b27e777c920db9ab96077ac889
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 6 15:23:18 2009 +0100

    use 'is' instead of '==' when comparing .func

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 41b8eb5985583ace2b9e629aea0082d2c5d7af20
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Dec 1 19:56:33 2009 +0000

    Use expr.func to get the head of expressions.

    Use expr.func == some_class instead of isinstance(expr, some_class), and
    expr.func instead of type(expr) wherever possible.

    The Python class of a sympy object is an implementation detail whereas
    the head of an expression (i.e. whether it's an addition, a multiplication, etc.)
    is a very important piece of data for symbolic manipulation. The latter is
    defined by the attribute 'func'. Using it systematically allows to abstract
    the notion of head from the implementation, allowing design changes and paving
    the way for possible optimisations and refactorings.

commit 9b3f053a47b41ae332d147f6b032fa504d9489d5
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Dec 9 03:22:55 2009 +0000

    Fix typos in sympy/physics/tests/test_secondquant.py

    This is a leftover from commit 908efa1e...

commit a1c3fc5c9f67c584481ed2ff2b88ac8cb8dbe863
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Dec 7 16:22:24 2009 +0100

    fix assumptions doc

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 6eaf682a5f2ca06a7fda1ef8af56802d657d72b0
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Dec 7 16:00:38 2009 +0100

    move queries and refine to assumptions

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit ac8c36f811ef275de1b5000cde38d6274d7eefeb
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Dec 7 15:28:05 2009 +0100

    move code from __init__.py to proper file

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 908efa1e3be14b5e105c0bc7976001b649586f06
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Dec 8 11:38:22 2009 +0545

    additional docstring edits

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit cdb267b9858790c7deb9e481dd71bcab62d8ba7f
Merge: 85a28e7 50fbdc9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Tue Dec 8 13:44:49 2009 +0100

    Merge branch 'pyglet'

commit 85a28e73273547c22490678071aed01843fb8fac
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Dec 7 22:13:42 2009 +0100

    fix a test failing with Python 2.4

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 14787e9c4df2be5a57b38d89e76b579edc72cd88
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Dec 7 17:23:00 2009 +0000

    Fix syntax incompatible with Python 2.4

    Ternary conditional syntax is an error in 2.4, use iff instead.
    Also, import iff and deprecated into sympy.utilities.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 50fbdc9e5c2f974067312b4d6674dc944dfbaaf6
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Dec 7 18:52:35 2009 +0100

    update pyglet to 1.1.3

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 1f573ad4658e0d8367328f9429f2c97f7745db88
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Dec 5 17:07:33 2009 +0100

    update mpmath documentation

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 65d64049a9fb8c2e05c80fb591514fb1caf91102
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Dec 5 16:27:55 2009 +0100

    update mpmath to 0.13

    A few test files had to be renamed to run in sympy.
    Import statements in tests were fixed (mpmath vs. sympy.mpmath).

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit a1e5a79a952ba1f9bacb74f2a8f0a219adbdd5b8
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Dec 7 15:42:18 2009 +0545

    sympy docstring edits

    Fix also some failing docstrings.

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit a680ac7618072ab941d25f095df14a1efdb38141
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Dec 6 06:59:35 2009 +0545

    1518: docstring edits and examples

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit bf32cd36acaa6c1c3ba1dc8f16144d65ec86c708
Author: Priit Laes <plaes@plaes.org>
Date:   Fri Nov 27 23:07:36 2009 +0200

    Use polynomial canceling for simplifying.

    This fixes various errors for inverse trig. functions containing fractions
    in their arguments.
    Added tests for asin/acos and asinh case. Other inverse trig. hyperbolic
    functions (acosh^1, acoth^-1, atanh^-1) need to wait until Mul.subs() has
    been improved a bit.

    Thanks for Mateusz Paprocki and Aaron Meurer for ideas and debugging.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit b50a8f4a76c14f50f5df8fda49ab678b226b6bbe
Merge: 826c056 6d74e74
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 6 23:58:47 2009 +0100

    Merge branch 'docmod'

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 826c056c435942c10b28c4432feac74cd3f96a36
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Nov 28 20:50:27 2009 +0000

    Make Mul.is_real and Mul.is_imaginary always return a correct answer.

    Mul.is_real could previously return False for some complicated expressions
    that are actually real but not obviously so. It now returns None in those
    cases. Mul.is_imaginary was similarly improved.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit a4fc80d9e35c7b4ae9967bd4b22fbfead799d4b2
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Wed Sep 2 14:20:32 2009 -0700

    Improve speed of curvilinear_coordinates.py

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit d6d7769b9cb04002e7f5b7a5129918cc3a14ede0
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Dec 5 13:48:46 2009 +0100

    Improved formatting of docstring for matrix.jacobian()

    Adjusted whitespace and formatting, but did not change the wording in any way.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 9d20157a5df0bb50c520aede41c81adfea1ba1b3
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sat Dec 5 12:49:52 2009 +0100

    Fixed formatting error in documentation

    It appears that 'Example::' needs to be in a paragraph by itself to be
    interpreted correctly.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 6d74e74f41e366483e14b0b05ca1d1913a632763
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 6 00:15:45 2009 +0100

    fix ode documentation to make sphinx happy

commit b6be24b3a96ff385080b827334f0284dfa1bebd5
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Dec 6 00:35:44 2009 +0100

    update credits

commit 900bd9b244a0c1d0275eec68d02e727ff911b822
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Dec 5 23:46:02 2009 +0100

    fix headings in modules documentation

    This fixes that far too many "modules" were shown in the html documentation.

commit 96ed9e3811792e5052dee6ca2d4ecdca8ddfbe0d
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Dec 5 23:39:01 2009 +0100

    moved modules.txt

commit 31f6c69737eae1c9d461557d7bfc3b2ad4630f42
Author: Ted Horst <ted.horst@earthlink.net>
Date:   Fri Dec 4 20:37:05 2009 -0700

    Fixed  issue 1622

    pretty_print has the signature:

    def pretty_print(expr, use_unicode=None):

    but if you pass a value for the second arg, it throws an exception.

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit e9deb63da3d59715827b09e2e52d0c942bbba58e
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Dec 3 06:39:18 2009 +0545

    fix doc imports (first pass)

commit 618c652534c2f33a3619aa3f31438aab75aaebdc
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Nov 12 16:58:14 2009 +0545

    doctests strict by default -n for normal

    Unless doctests are run with the -n option, they
    will be required to make explicit all imports.

commit 787470839264cf123f055598e8e1c9f196484662
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Nov 12 16:11:02 2009 +0545

    1671c fix doctests for no star import

    	The test_code_quality now checks for implicit
    	imports and this patch makes explicit those
    	imports that used to be implicit.

    	Note that there are some blacklisted items
    	which get flagged as having implicit imports
    	(and those were fixed) but since they are
    	blacklisted, they haven't been fully tested.
    	When they are removed from the blacklist
    	extensions (in runtests.py) then they will be
    	tested.

commit bab8d39f01f164ba2bbf59b3efde8fdad6e42e7c
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Nov 11 21:18:04 2009 +0545

    sort doctests by line number

        By default (except for python 2.4 in which it was broken) tests
        are sorted by alphanetica; order by function name. We sort by line number
        so one can edit the file sequentially from bottom to top...HOWEVER
        if there are decorated functions, their line numbers will be too large
        and for now one must just search for these by text and function name

commit 05bd57e2a7d7b6e4f52d67d883768bc02e818ddc
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Dec 4 13:23:58 2009 +0100

    update .gitignore

commit 0d259619130f7610112ad1a87e85ed2fc1dd7b4f
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Dec 4 13:22:59 2009 +0100

    test code quality includes docstrings

commit 1b2525da1beeb0bc78eede944cd0b697d1a95ea5
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Nov 11 04:54:30 2009 +0545

    test_code_quality and strip_whitespace

        quality had a reference to a variable that didn't exist but
        because the code was never run it was not flagged.

        strip_whitespace now removes \r\n and replaces them with \n

commit a77347281f949c33ba942e8e3f26c3f0a8422a06
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Nov 11 02:38:30 2009 +0545

    1671b docstring changes

commit dc386907f434dee752fdb88699b067f50dec663b
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Nov 11 02:37:30 2009 +0545

    1671 testing changes

    ==  bin/doctest
        - added comment about the format that the blacklist can be given in.
        - moved path hacking to its own file (vks's modification)
        - added a "strict" option triggered with -s which makes the doctest
          strict in that no importing magic will be done by the tester: all
          imports must be explicitly given in the code snippets in docstrings.

    ==  bin/test
        - moved path hacking to its own file (vks's modification)

    ==  setup.py
        - check first two digits of sys.version or else 3.0 (with a 0)
          will look like a version that is not supported for testing.

    ==  sympy/utilities/runtests.py
        - no longer use glob (but do allow filename pattern matching ala fnmatch)
        - importing DocTestFinder to subclass from
        - importing re as pre to use in new doctest finder

        o sys_normcase() ADDED
            This returns a lower-case string to be used with file name
            and path operations if the system is case insensitive as
            determined by the global variable, sys_case_insensitive.

        o convert_to_native_paths()
            - use normcase

                normcase is used to make sure that paths to files are
                case insensitive.

                N.B. On win32, os.path.join leaves off the backslash that
                comes after the drive letter colon. Although python handles
                these without problems, if any pattern matching is to be
                done with the file paths, the paths must be the same since
                c:\foo will not match c:foo

                >>> os.path.join('c:','this','that')
                'c:this\\that'
                >>> f=open('c:jnk','w')
                >>> f.close()
                >>> open('c:jnk','r').read()
                ''

                So the backslash is put back in here if the system is win32.

        o get_sympy_dir() ADDED
            This has been factored out of the individual test and doctest
            routines and now includes a global variable that indicates whether
            the system is case insensitive or not as determined by the ability
            of the system to find the sympy directory when it is in upper and
            lower case. If the test is False then the system is not case
            insensitive.

        o test()
            - `args` changed to `paths` to better reflect what it is
            - expand the docstring
            - rather than globbing on file patterns, the files for testing
              are generated by get_test_files and then either all of them are
              used if the user didn't indicate desired files or else only the
              ones containing a string match between test files and user specified
              files OR a glob-like match between user specified file and basename.

        o doctest()
            - expand docstring
            - add the txt file exclusions to the blacklist so only one list
              is maintained.
            - process the blacklist here rather than passing it off to the tester.
            - I'm not sure why the testing of *txt files is not being done unless
              the version is greater than 2.4 (perhaps it didn't exist before
              then) but I didn't change it. I did, however, make sure that *py
              files are not being passed through the doctest.testfile routine
              which does not parse files in the same was as the parser used in
              test(). Previously, when *py files were going through this, if a
              code snippet was terminated with the docstrings's closing triple
              quote and no intervening newline, this caused a problem.

        o SymPyTests()
            - using global sympy_dir
            * add_paths REMOVED
                paths are no longer generated for files
            * test()
                expand docstring
            * get_sympy_dir() FACTORED OUT
            * get_paths() REMOVED
            * get_test_files() ADDED
                This does a straight walk of the directory getting files that
                match the given pattern.

        o SymPyDocTests()
            * __init__
                - blacklist no longer processed here
                - take a new "strict" option
                - use global sympy_dir
            * add_paths REMOVED
                paths are no longer generated for files
            * test()
                expand docstring
            * test_file()
                - use top-level imported doctest
                - sorting only done for broken 2.4 version
                - give an empty globals dict if the strict option is used.
            * get_sympy_dir() FACTORED OUT
            * get_paths() REMOVED
            * get_test_files() ADDED
                This does a straight walk of the directory getting files that
                match the given pattern.
                > importable()
                    tweaked to use os.path.join
            * is_on_blacklist() REMOVED
                these are processed closer to where they are defined.

        o SymPyDocTestFinder()
            New method of finding tests that doesn't miss tests that are
            actually in the file but appear to be coming from elsewhere.
            (See docstring for more info.)

        o PyTestReporter()
            When working in the interpreter under windows, the test
            for tty doesn't work so a test for that attribute has
            been added before trying to access it.

    ==  sympy/utilities/source.py
            - corrected docstring to work with new strict testing.
            - removed a try/except and replaced it with the equivalent if

    ==  sympy/utilities/tests/test_code_quality.py
            If test and doctest are in the bin directory, I wonder if this
            should be there too...or if they should be part of the standard
            test suite like this is.... In any case,

            - the test for trailing space was modified since the way it was
              written meant that the next test would not be triggered. Here
              is an example that shows this test catches \r\n lines as though
              they were white-space terminated lines

                >>> s
                'foo\r\nbar\r\n'
                >>> f=open('c:jnk','w');f.write(s);f.close();dat=open('jnk','r')
                >>> for i,line in enumerate(dat):
                ...     if line.rstrip()+"\n" != line and line.rstrip() != line:
                ...         print ">>",line
                ...
                >> foo

                >> bar

            - also, since the enumeration of the file object will return \r\n
              terminated lines, we can look at the end of the line with .endswith
              rather than look "in" the line.

            - an additional test was added to check for the lack of newline
              at the eof (which is something that fix_whitespace already handles.

    == bin/get_sympy ADDED

    	File added to get the sympy path.

commit fea950e1208490c2d4e2cc179f9d17d1452ec827
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Dec 3 23:28:13 2009 +0100

    guide.txt: fix sign function (the 3rd time)

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 5fb2ad2e419b44ba0bedd6753c511b804b8a1da3
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Dec 2 05:48:53 2009 +0000

    Fix _eval_subs for Basic and Atom.

    * Make Basic.subs recursive, but not Atom.subs, as it should be.
    * Implement tests for Basic.subs and Basic.matches that do not rely
    on any code outside sympy.core.basic.

commit fec31408d975b03c10110d2f9de718562c298c7c
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Oct 19 06:29:40 2009 +0100

    Refactor pattern matching methods

commit bb189c76f9b540febfbe3dc2e42573a3688c2552
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Oct 18 07:14:59 2009 +0100

    Cleanup Basic.matches

    * Copy and remove the parts of Basic.matches specific to Mul.
    * Get rid of implicitly assumed commutativity and associativity.
    * Correct handling of identical terms
    * Remove "signs weeding".

commit b6c24d10f17b32be1863fef8e24e912a65df3bec
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Oct 18 05:03:32 2009 +0100

    Use self as first arg in all pattern matching methods.

commit 121fdadfa06d1113b680a995bef8bc49b4d9554b
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Dec 1 00:18:22 2009 +0000

    Simplify Basic.rewrite

    A dozen lines of code in Basic.rewrite() can be replaced by just one:
    rule = str(rule)

commit e855bee8bc93366d8a188011172125d0e9699073
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Dec 1 19:14:53 2009 +0000

    Remove useless reimplementation of 2 unused methods in functions.

    * _eval_apply_subs was defined in several function classes, yet never did
    anything except returning None. All references to it have been removed.
    * canonize was overridden in most function classes, but without any change
    of behaviour compared to the parent's Function.canonize. All such useless
    overrides have been removed.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 69e453994d18143dd765d6aeddb787dcc9344c65
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Nov 30 21:25:15 2009 +0545

    1698 nullspace dimension test relaxed

    Also fixed formatting a bit.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Chris Smith <smichr@gmail.com>

commit 9feb1397cfbdadec260123937b419fbb96c37022
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Dec 2 21:09:41 2009 +0545

    rewrite of log handling for homogeneous order

commit 02a106acea7699a39b06683398b5ffea80425646
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Dec 1 08:17:50 2009 +0545

    1729, 1730 rootfinding, solver and ode changes

    == sympy/polys/rootfinding
        o made a failing docstring pass

    == sympy/ode.py
        o In ode, a loop over powers tests to see (I believe) whether a power
          has a -1 exponent but it is testing args[0] of the exponent when I
          think it should be just testing the exponent. If the exponent is -1
          it won't have an arg[0].

    == sympy/solvers.py
        o There is a sympy idiom for finding the Symbol atoms that is simpler
          than the method that was being used.
        o When someone is finding the roots of a function numerically, the
          function is going to be much better behaved (especially using the
          default secant method) if any denominator has been removed. Of course
          one may still (for demonstration/instructional purposes) access
          findroot directly with an arbitrary function, but nsolve (being a
          higher level routine) should try to make things work as easily as
          possible with the user input.

    == sympy/solvers/tests/test_numeric.py
        o A test that would fail without the change to nsolve has been added.

commit 6da52cc94684dfca58d5d7ce04df59f49dd2f3b9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Nov 29 17:57:42 2009 +0100

    Assume: fix printing

    Also improved printing logic for strings.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>
    Signed-off-by: Ronan Lamy <Ronan.Lamy@normalesup.org>

commit b8f94c6752ac49587aaaa56c1241b7ee2d47340d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 29 21:36:19 2009 -0800

    Øyvind added to credits

commit a65db9b20c28cd6c454b8cfe12881be7fc3f89a3
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Nov 7 23:47:25 2009 +0100

    Add Matrix.QRsolve method

    This method is for educational purposes, it has not advantage over LUsolve(),
    except for floating-point arithmetics, for which mpmath's optimized functions
    should be used anyway.

    Also improved some matrix docstrings.

    Most of this was implemented by Jochen Voss, thanks!

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 356e808bd97630ff2c96818e30a1f6a118d0d1b9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 29 19:27:16 2009 -0800

    If pyglet.window can't be imported, don't run the tests

commit dce55a79eb759dd462c31236aac6db2e68ebc42a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 29 19:02:09 2009 -0800

    Rename simplifyIndexPermutations to simplify_index_permutations

commit b0ff822bc157e20e0b0d7b49f39e3af8fe90f38a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 29 18:56:26 2009 -0800

    Add more doctests

    Skip one test that has unpredictable ordering and it uses dummy symbols, so
    it's not easy to write the doctest in a consistent way.

commit 3d58bab73698ae146705961cc6544d3fe18c7310
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 29 18:46:13 2009 -0800

    secondquant: a little refactoring + more docstrings added

    The nested functions were put at the module level, otherwise the docstrings
    were not executed properly.

commit 956d681bcbcf07efc3334b891e62281602baf387
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 29 18:13:24 2009 -0800

    Add missing docstrings

commit a280ae7687037a190d44b0372b7a66b444632445
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 29 17:24:14 2009 -0800

    secondquant: removing an obsolete test

    As agreed with Øyvind, this test can be removed (it failed anyway).

commit bc2b7138a58729072bd82474ddb3eef03a894496
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Oct 18 23:03:35 2009 +0200

    Renamed function Wicks -> wicks

    Trying to follow python code style guidelines

commit 58333c44793080443544452130a5ca56d311ee48
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Oct 18 22:38:26 2009 +0200

    Renamed variables in Second Quantization module

    Substituted keywords using ThisConvention with this_other_convention

commit 14c0c63a06906bc2c4e954620c2cfa121fc6793d
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Oct 18 22:24:31 2009 +0200

    Rename variable 'str' -> 'string1'

commit 4b3b1e709b4ff21060af43bec3e37898c7cba58d
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Oct 18 22:16:10 2009 +0200

    Wicks and NO for Bosons will raise NotImplementedError

commit 39c5b981ce73c7dd364e76a83ffd425e62ad8644
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Sun Oct 18 22:15:19 2009 +0200

    Added base class for SQ Exceptions

commit ea79597b383722049e5fb645e3e242831c86d6d1
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 13 19:32:05 2009 +0200

    Fixed some irrelevant fixes needed for all doctests to pass

commit 1357c5476ff8f5bf5cb4fc739c48f6f098435a03
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 13 16:33:12 2009 +0200

    Small fix in contraction, (We label particle index by 'a', not 'i')

commit 7f292324bbdc9a60e0057b498f415d952bc01e93
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 13 15:48:31 2009 +0200

    Small fix in NO.remove_brackets()

    For consistency we want to avoid creating an index with
    both 'above_fermi=False' and 'below_fermi=True'.

    Added some comments

commit d8e75f90c196d620b818ceb674ce26987953e2ce
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 13 18:53:37 2009 +0200

    Doctest for FermionState + fixes

    Renamed:
    FermionState.only_below_fermi  ->  FermionState._only_below_fermi
    FermionState.only_above_fermi  ->  FermionState._only_above_fermi

commit cf0462897b1ec52ddfd4c16d36adfb0f975b3975
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 13 11:53:58 2009 +0200

    Doctest for Commutator + small fix

    If doit() is called for [A,B] where neither A nor B contain second quantization
    operators, we need to catch the exceptions
    	- WicksTheoremDoesNotApply,
    	- ContractionAppliesOnlyToFermionsException.

commit 14abf29faa9187363e1645c323fb2fe2fefb1a1c
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 13 11:53:14 2009 +0200

    doctests, doctests, doctests

commit 6eb83f15bd4e15a7d338855b1f1475b679b757ea
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Oct 12 13:28:02 2009 +0200

    Removes output from test procedures

commit 16da08d51b16431491f3e0c904193c325149c433
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Oct 12 13:26:27 2009 +0200

    Replaces generic exception with new Exception object WicksTheoremDoesNotApply

commit f1568364bb2d41b9f9d570b519aa5dc2e9f676e0
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Oct 12 13:25:20 2009 +0200

    Whitespace errors (tabs -> spaces)

commit 437f14c75d59d3f47eacb7ae222d44b45c780d0a
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Mon Oct 12 13:24:26 2009 +0200

    Explicit import in coupled cluster example

commit 6d5dc944cb1f9ad19742b832a2557986d66c868f
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 6 14:25:54 2009 +0200

    Second Quantization for Fermionic Systems

    The implementation is based on the notion of a fermi surface, and is thereby
    able to treat both holes and particles.  We distinguish hole indices and
    particle indices from general indices by the keywords, 'above_fermi' and
    'below_fermi'.

    >>> a = Symbol('a',above_fermi=True)
    >>> i = Symbol('i',below_fermi=True)
    >>> p = Symbol('p')  			# general, unrestricted index

    Another important aspect is the difference between summation indices and fixed
    indices.  We mark summation indices by declearing them as dummy indices.

    >>> q = Symbol('q', dummy=True)		# unrestricted summation index
    >>> b = Symbol('b',above_fermi=True, dummy=True)  # summation over particle indices
    >>> j = Symbol('j',below_fermi=True, dummy=True)  # summation over hole indices

    These features enables the relation

    	sum_q f(q) =  sum_j f(j) + sum_b f(b)

    Which is important for the current implementation of Wicks Theorem.

    New Sympy Objects:
    ==================

    * Second quantisation operators:
    	- CreateFermion
    	- AnnihilateFermion

        - Implemented __cmp__ method for FermionicOperator:
          quasi-annihilators go right, and quasi-creators go left.  among
          quasi-creators/annihilators, the operators with dagger go left.
          otherwise alphabetical determined by index.

    * Added FKet and FBra as subclasses of FermionState and FockStateBra/Ket
        - FermionState handles orbits with respect to a fermi surface, so that it
          can treat both holes and particles

    * NO() to represent normal ordering brackets.

    * Commutator(a,b) is made a subclass of Function
        - If a,b are secondquantisation operators, Commutator simplifes immediately.
        - Else, evaluation is triggered by .doit()

    * Added tensorclass AntiSymmetricTensor
        - The intended use of the tensor class is to construct for instance a
          hamiltonian operator where the interaction and the fock term would consist
          of SQ operators and matrix elements symbolised by the tensors.
        - Takes tuples of indices as input.  The tuples are wrapped as SymTuples.

    * SymTuple
        - Essentially a wrapper around a tuple.  SymTuple is subclass of Basic

    * Permutation operator class to represent P(ij)[ij] = [ij] - [ji]
        Used by function simplifyIndexPermutations() to simplify Add expressions
        with Fermion operators.

    Exceptions
    ==========
    * AppliesOnlyToSymbolicIndex(Exception):

    * ContractionAppliesOnlyToFermionsException(Exception):

    * ViolationOfPauliPrinciple(Exception):

    * SubstitutionOfAmbigousOperatorFailed(Exception):

    Helper functions (regular python functions):
    ===========================================
    * Wicks()
        - calculates the normal ordered equivalent of an expression.
        - depends on the helper function _get_contractions()

        - Brutal implementation that removes NO-brackets before evaluation.
          So far, all my attempts at intelligent treatment of partially normal
          ordered operators introduced more overhead than the speed gain.

          The idea is that NO._remove_brackets() return a sympy expression that
          has no nonzero contractions.   This method is called upon .doit(), so
          that Wicks theorem can call .doit() and calculate contractions without
          worrying about NO objects.  This happens to be both fast and simple.

          The algorithm depends on a number of features:

          - NO._remove_brackets() is able to handle operators that reach
            both above and below fermi surface, on the condition that such
            operators have dummy indices.  Dummy indices are treated like
            summation variables, so that we may split the expression by substitution:

              Fd(p) ->  Fd(a) + Fd(i)   ( sum over p is assumed )

            where
               - p is an unrestricted dummy index
               - a is a dummy index above fermi level
               - i is a dummy index below fermi level

          - FIXME: NO._eval_subs(self,old,new) is needed to overload assumtion about
            commuting factors in Mul._eval_subs()

    * _sort_anticommuting_fermions()
        - bi-directional bubble sort that keeps track of permutations

    * evaluate_deltas()
        - simplifies expressions by evaluating KroneckerDeltas with summation indices.

    * substitute_dummies()
        - simpify expressions by renaming dummy indices consistently across terms
        - prefers 'a' before 'b'
        - FIXME: algorithm misses some simplifications, could be made more robust.

    * contraction()
        - Gives contraction between two fermionic operators
        - Since we never return an unevaluated contraction, there is no need for
          Sympy.Function overhead.

    * simplifyIndexPermutations()
        - simplify Add expressions with Fermion operators, by introducing Permutation
          operators P(ij) where applicable.

    Tests & Examples
    ================

    * Added a Coupled Cluster example of fermion operators.
        - The equations for Coupled Cluster Singles and Doubles are derived.

    * Lots of tests for new features related to Fermionic operators

commit 68606c0f51a96e891e5b560b452128bcbc705a05
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 6 11:31:03 2009 +0200

    Refactored Bosonic formalism to prepare for Fermionic formalism

    * Introduced base class SqOperator with subclasses CreateBoson and AnnihilateBoson

    * Upgraded KroneckerDelta function (KD).
         - Information about above/below fermi is now used during evaluation of KD
         - KD now orders indices canonically
         - KD can now tell you which index is preffered to keep, and which is the better
         - to substitute
         - KD can now tell you whether it can be nonzero above/below the fermi surface

    * Introduced base class FockState with subclass BosonState

    * The usable State classes are now FockStateBosonBra and FockStateBosonKet,
      exported as BBra and BKet.  These are subclasses of both FockStateBra
      (or -Ket) and BosonState.  (multiple inheritance)

    * updated tests for Boson formalism to comply with refactoring

commit a99c95d59878c220f074995e1bbb251fedd68434
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 6 14:23:34 2009 +0200

    Made preview() use inline latex instead of displaymath

    This ensures that long expressions get line breaks if needed.

commit f74e558e5b6e99803692cfc48b769fb05d2c41c4
Author: Øyvind Jensen <jensen.oyvind@gmail.com>
Date:   Tue Oct 6 14:05:27 2009 +0200

    Added second argument **hints to Derivative.doit()

commit 60b70111bce2e98858f8776b7749372bdc5ac24e
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Tue Nov 3 04:49:13 2009 +0000

    Efficient implementation for And and Or

    Create base class LatticeOp to implement storing arguments of And and Or
    as a (frozen)set.
    Change a few tests to accomodate the fact that the order of their
    arguments is now random.
    Add tests to completely cover LatticeOp without referring its subclasses.

    Signed-off-by: Ronan Lamy <ronan.lamy@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 474bca800f9418eb4b47bbf130a12600daa1efbe
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Nov 2 02:05:10 2009 +0000

    Logic functions code cleanup

    * Add logic functions to sympy namespace
    * Add tests for conjuncts, disjuncts and fuzzy_not
    * Use make_list in conjuncts and disjuncts
    * Split "if foo: bar" constructs into 2 lines to reap the benefits of code
    coverage tools.

    Signed-off-by: Ronan Lamy <ronan.lamy@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 4a9940d7bdf2a958f38c8832c29c80c8c1ef6965
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sun Nov 29 05:36:01 2009 +0000

    Remove explicit type-checking in Matrix initialisation (issue 1515).

    Matrix code is extremely picky about the types it accepts. This allows the
    use of longs, floats, numpy.int32, etc. to specify matrix dimensions.

commit ce7ec856a307144f137dcb3834f2d95e8d14b58f
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Nov 29 17:56:20 2009 +0100

    fix a doctest failing on 64 bit systems

commit 3a62c2f9d3dc9cdf51191a95788b4f4b6c663e86
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Nov 9 22:27:52 2009 +0545

    use A instead of C1

commit d0906fff0dc21ed69369f3cfb77af358f119ec68
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Nov 9 06:02:59 2009 +0545

    1686: linear ODE identification

        A more robust method is used to identify a
        linear ODE.  collect() cannot collect on more
        than one term, and match doesn't pull together
        multiple terms so the added test (a previously
        failing expression) is identified by pulling
        out the coefficients of the terms of interest
        and checking to see that what was collected
        reconstructs the original equation.

commit 1c58c7601e03649f78ba9e4f905b4110d4045089
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sun Nov 29 16:23:14 2009 +0100

    un-xfail an xpassing test

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 92a22253eaa15699b8e9f5a988c6b496f13ed06b
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Nov 13 13:18:15 2009 +0545

    1705 separatevars fix, changes, and edits

        (Jorn Baayen)
        - When the intersection of a terms symbols and the symbols
        specified by the user was found to be unique, the variable
        stored in the dictionary was being popped from the expressions
        symbols rather than the intersection. This (depending on the
        machine) may or may not give the right variable, e.g. none of
        the issues listed in the issue raise failures on Windows.

        (Chris Smith)
        - separatevars either returns a separated expression using all
        variables or returns a dictionary with keys equal to the symbols
        provided. Since one can only provide symbols when dict=True,
        the behavior has been changed so that if any symbols are provided
        that dictionary case is automatically selected.

            separatevars(expr)
                -> expr
            separatevars(expr, dict=True)
                -> dictionary with all symbols in expr as keys
            separatevars(expr, iterable) or
            separatevars(expr, dict=True, symbols=iterable)
                -> dictionary with symbols of iterable as keys

        - The docstring was edited and an example modified to show how
        unspecified symbols will be grouped into 'coeff'.

        - Some minor PEP8 changes were made elsewhere.

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 98f72201d096f83c9eb80bb236a138b7188ecbf4
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Nov 17 15:54:52 2009 +0545

    issue 1708, sympy.abc: use temp var and clean up

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 938058fd4b553b03e1d3e751a2269eb059211e22
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Nov 18 03:26:50 2009 +0000

    General cleanup of trigonometric functions.

    A number of issues have been corrected:
    * Under some circumstances, cos and sin could enter infinite recursion by
      doing arg <-> -arg repeatedly (#1680). Systematic use of .could_extract_minus_sign()
      fixes it
    * Some control paths were disentangled, allowing e.g. asin(2*I) to evaluate
      properly to I*asinh(2).
    * Testing for parity transformations (f(-x) -> ±f(x)) was made systematic,
      many trivial tests presumably related to it were removed.
    * Many tests were added for the less-popular functions, bringing coverage of
      eval() methods to 100%.

    This change causes expressions like sin(1-x) to become -sin(x-1), so tests
    in test_ode.py and test_cse.py and a doc file had to be changed.

commit 30836310d38507233e734367d2f9ce10fb991b9d
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Sat Oct 24 02:37:34 2009 +0100

    Refactor trigonometric function code with no change in behaviour.

    It is always possible to transform:
    if foo:
        return bar
    else:
        blah...

    into

    if foo:
        return bar
    blah...

    This frighteningly large diff consists solely of the repeated application
    of this transform - thus reducing indentation levels without changing code
    behaviour in any way (exception: there are tiny changes in tan and cot).

commit bd8edbf01f102298faeab77877aa2ecaffdede46
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Nov 20 09:07:57 2009 +0545

    fix test

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit cfdfc1396d542d0457320398f851a5a663c1e789
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Nov 18 01:02:29 2009 +0545

    1710, 1711 products fixes

        o sum was not imported so the use in
          _eval_product was failing because it
          was using python's version
        o in sifting out include and exclude terms
          the None value, p, was being added rather than
          t.
        o tests raising these issues are included.

commit 3de0b36f9ea878742cabc7ddef9fe0fd07a293d7
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Nov 23 17:39:21 2009 -0700

    Fixed issue 1448

    The problems were with limit(cot(x),x,0,dir='+') and
    limit(cot(x),x,pi/2,dir='+').  The source was several misuses of S.
    surrounding the cotangent function.  For example, S.Cot was used instead
    of simply cot.  Tests added.

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 5dc7d23dd965d25bfe9308a240135065bad8eeb7
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Nov 24 10:36:43 2009 +0545

    1468c: correction to quartics

    	The polynomial -1 + 10*x - 32*x**2 + 54*x**3 - 27*x**4
    	was not solved correctly by the current quartic's algorithm.
    	The algorithm was replaced by another that solves all
    	previous cases and also solves the one that raised the
    	issue.

    	More tests were added and coverage checked; one of the
    	previous tests was reclassified since (during testing)
    	it was found to be caught by the previously added
    	quasisymmetric case.

    	The simplified flag for roots is also shut off by default
    	now for cubic and quartics since these are usually quite
    	long and the simplification routine takes a long time to
    	make progress on them. If the user selects simplified=True
    	the simplification attempt will be made.

commit d7ea9697b7cef1586279d838468937ca139c8cd0
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Nov 18 23:02:25 2009 +0000

    Added tests for Issue 1098. (units).integrate() == integrate(units)

    Signed-off-by: Ronan Lamy <Ronan.Lamy@normalesup.org>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 3abff22941707276a3d474fd7086ff7a39f87adc
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Nov 11 00:06:45 2009 +0100

    Welcome to SymPy!

commit cacacc30cf65b8edb44efcab0ebe7d02dfb7dde9
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Nov 10 08:53:52 2009 +0545

    1501 edits

commit 9484f05b212b1682056e3112fc9282957dce21db
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Nov 8 11:13:07 2009 +0545

    1501 viwer typo

commit 571d5f4f14f483d0514bb549c6c8be173597a23d
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Nov 7 14:02:15 2009 +0200

    Mark failing (previously commented out) tests as XFAIL.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit fdf01921483fd4d079a42019397d90a3332c29a9
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 15:33:29 2009 +0300

    Add a 'deep' flag to Basic.doit() defaulting to True.

commit 932127f46245bed5dee76ff25b3e2a7dda382ebb
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Nov 6 17:57:14 2009 -0700

    Changed sympify to leave None alone

    Previously, it was converting it into Symbol("None").  See issue 1699.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit cfccef63a2e2ba362c5f03c382a9ec22d9109be6
Author: Oscar Benjamin <oscar@kar-wench.(none)>
Date:   Tue Nov 10 01:04:08 2009 +0000

    Fixed latex printing for rational powers

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 4ddfe22a16ee4d2106cd9ccc077392a89c8a66d7
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Mon Nov 9 19:30:11 2009 +0200

    latex: Add printer for Poly class

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit fff517a845451ca33fc77510bfe62587e92a2a27
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Nov 2 20:37:48 2009 +0545

    1689: sympify(1.0+0J) gives Real(1.0)

    There was an inconsistent behavior between sympify(1.0)
    and sympify(1.0+0J) that has been resolved. Previously,
    sympify would convert any real parts to integers if
    they were numerically the same. The behavior now is to
    return a real representation: if the user has specified
    that a real be sympified then they get a real. Note
    that returning a Real() of whatever they gave may or
    may not return a Real since Real(1) is Integer(1), but
    that is the present behavior of Real and is unrelated
    to this issue.

    A test (as given in the issue) was added.

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 4eeab2682ae10d78c5fdae52c07f6cebbd0835e9
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Nov 7 14:30:29 2009 +0200

    latex: Add itex-compatible spacing to piecewise function conditions

commit 8711f179668d0988fb11f8a0dbec5e5b0a3ad172
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Mon Oct 26 19:40:10 2009 +0200

    latex: Map '<' symbol to '\lt' when in itex mode

commit cac9e3cf5f3026f28b0ac789cf89a7b4e15206f7
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Oct 24 23:20:09 2009 +0300

    latex: Use cases environment for Piecewise functions

commit dc509f96b471ef53b2e9e95a670e555d1407dd2c
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Oct 24 23:00:40 2009 +0300

    latex: Fix formatting of Limit objects

    Update LatexPrinter._print_Limit to the new (?) Limit API. It now
    works again and so I've re-enabled the test.

commit 52012b6edc93e90aad9ae864a476e2159cf1c102
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Nov 7 14:22:31 2009 +0200

    latex: Do not use power of square root as sqrt degree

commit c2355dc86dd681798a817160f9197460dff77145
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Tue Oct 13 23:29:38 2009 +0300

    List all limits in default Sum printer

commit fde30031244bb62a108256820f5c400184f2b71a
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Tue Oct 13 23:29:04 2009 +0300

    Add LaTeX printer for Sum

commit 50f0cf4eb0c85e41df0b9d8f4b84536c59324835
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Oct 24 00:13:55 2009 +0300

    latex: Do not use \limits command when in itex mode

commit 7d7ec03d600a9bacb8e9c619c413f649bb56e93a
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Nov 2 11:15:55 2009 +0545

    correct XFAIL test in ODE

    	The test decorated with XFAIL in test_ode
    	will pass if the same (sub-optimal) solution
    	is used here as is used in the test_Liouville_ODE.

    	Also, the .expand() was removed since it wasn't
    	expanding anything and this made it confusing as
    	to how this test was different than the unexpended
    	one.

commit 4fd6c794ac05796c4849bce036e9d9f2f395f5f4
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 28 13:39:53 2009 +0545

    1650v2: classify_ode clears f(x)

    	The makes functional the purported fixes of the
    	previous 1650 and adds tests. The basic idea is
    	to get ODEs in a form with powers of f(x) removed
    	from the highest order derivative so ODEs like
    	f*f'' - 1 will give the same classification as
    	f'' - 1/f. This is *not* done in the case of the
    	1st order exact ODE.

    	With the changes made by the patch of 1685, expand
    	can be applied to equations coming into classify_ode.

    	A small correction to the Liouville docstring was made.

commit 408e14c3d31bb229c74ce2d18b1d348f48c8d0c3
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Oct 27 04:03:47 2009 +0545

    1687: gosper gets uniform names

    Although the argument list shows variable name `term` as coming
    into gosper, it is referred to as `hyper` and `expr` within the
    routine. I used the same name without but could use some tests.

commit 02568ad3e34cafa1c563c12254d6b988c9de6dba
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 21 23:00:33 2009 +0545

    put return between doctest code and closing quotes

commit 6a69e3e581b7e89315dc10124498c64758c29a60
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Oct 23 13:06:26 2009 -0600

    Fixed issue 1566.  integrate(x, (x, None, 1)) now works.

    This moves sympify from integrate to Integral where it was already
    being called for everything except for the symbol anyway.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 529fcf7798436e3f42e2034869256d40c51910cc
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 12:54:21 2009 +0300

    simplify: Do not attempt to rewrite non-Basic objects

commit 56c3e69cd2dd28d579472deb1bc63610676e8a85
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 12:38:00 2009 +0300

    integrals: Flatten limits tuples in Integral constructor

commit 54e26011ec3a14278b31592f331caab09fe4407d
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 12:31:06 2009 +0300

    concrete: Flatten limits tuples in Sum constructor

commit 53a104f59a52aa8c4f60a98f2f9ab2bb66806cab
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Nov 6 09:58:51 2009 -0700

    Small fixes relating to issue 1685

    This changes a collect() call in classify_ode() to work with the new
    functionality and it changes the docstring of collect() to note the
    change.  This also fixed some formatting of docstrings in simplify.py.

commit 6ef04d0e738fedf1d404d303f73189fae5f378db
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Nov 6 09:17:26 2009 +0545

    1468b updates and err msg changes

        === /sympy/polys/polynomial.py
            o change how error messages are handled to avoid deprecation warning
            o doctest edits
            o Poly can be instantiated with a list of coefficients
            o small test that low-level instantiation of Poly was done correctly

        === /sympy/polys/rootfinding.py
            o quasi-symmetric case added to quartic rootfinding
            o tidy up docstring
            o roots_rational() docstring edited
            o roots() doctest edit
            o remove assertion that poly is univariate since
              there is a multivariate test preceding it

        === /sympy/polys/tests/test_polynomial.py
            o docstring tidying

        === /sympy/solvers/tests/test_solvers.py
            o new test with multiple rational powers of x

        === doc/src/tutorial.txt
            o e5d801 had a reference to pngview that should have
    	  been preview.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 1b7eab8d0234ce3fecaaef45a9410222da2ebf66
Merge: 14efc26 8918927
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Nov 6 21:32:47 2009 +0100

    Merge Jorn's branch i1651

    Conflicts:
    	sympy/functions/elementary/tests/test_piecewise.py

    Signed-off-by: Jorn Baayen <jorn.baayen@gmail.com>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 89189274fb42ae918514c1793676865436895be5
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Nov 6 13:55:01 2009 +0100

    fix whitespaces

commit ff89d918d4729b956eb64471ed308bcf3a2d585d
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 28 13:37:40 2009 +0545

    1685: collect() dropped terms with derivatives

      As the terms of the Mul's making up
      an additive expression were parsed,
      a flag was being used to keep track
      of whether the Mul had a derivative
      or not. The test was being based on
      the grouping pattern instead of the
      terms of the Mul. This has now been
      corrected and tests have been added.

commit cff342534260e19456595b90461db7835e1171af
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Aug 17 18:19:40 2009 +0545

    Issue 1468: cubic, quartic, roots, Poly mods

    * Poly docs have been expanded. I ended the docstring with
      a caution about using methods 2 and 3 to instantiate. It
      seems that it would be a good idea to test at least one
      monomial to see that it is not an integer...it wouldn't cost
      much and it will save a lot of headache for the day that it
      happens...but I will leave that for someone else to decide
      on.
    * a new instantiation method was added:
      a list of univariate coefficients can be given:
      Poly([2,3], x) -> Poly(2*x + 3, x)
    * tests were added to make all added features 100% covered
      and to increase coverage of other portions.

    * cubic_roots and quartic_roots have been expanded to
      give solutions to all coefficient types, i.e. they don't
      rely on roots() weeding out certain classes of polynomials.
    * I keep hoping that there is some other problem hiding that
      keeps quartic from working, but it appears that it only works
      for certain conditions and does not provide a generally valid
      solution.

    * roots() now has an expanded docstring
    * roots() also accepts a list of coefficients of a univariate
      polynomial for which a dummy symbol will be used. The user
      never sees this dummy variable since only solutions are returned.
      Only a LIST of coefficients is permitted to be consistent with
      the instantiation of Poly with the coefficients.
    * roots() also tries to do the obvious thing if an expression with
      only a single symbol is given to it and similarily, it doesn't
      complain now if it gets a multivariate Poly but a single symbol
      as in Poly(mv, x) or a Poly() along with a symbol. It seems that
      if the roots() is already going to take either an expression with
      a symbol to select which one is solved for that it might as well
      let that expression be given as a Poly instance, too.
    * quartics is giving much more compact expressions so the default
      quartics=True semantics has been enabled in line with the
      docstring's claim.
    * only quadratics have simplification done to the roots. Nothing
      is done to the roots of the cubic or quartic as these tends to be
      very complicated and don't simplify or expand down to something
      compact.

    * all throughout polynomial "an univariate" was replaced with
      "a univariate" consistent with the word being pronounced as
      "yoonivariate" rather than "oonivariate"...and the an-before-
      vowel rule corresponds to *pronunciation* not spelling.

    /c

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>

commit 7647e02997f1b70156543a4dc490936e1a0e7803
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 13:39:03 2009 +0300

    piecewise: Support ExprCondPair arguments in constructor

    Signed-off-by: Jorn Baayen <jorn.baayen@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 410b7bef63c0a62dd095b278c73bf369462c4fdb
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 13:28:31 2009 +0300

    Basic.__contains__(): Do not assume all arguments to be sympy types.

    Signed-off-by: Jorn Baayen <jorn.baayen@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit f7c41a36c5530956195dae2a786d9a746dfb598a
Author: renato <renato.coutinho@gmail.com>
Date:   Thu Oct 1 00:31:24 2009 -0300

    1658: correct derivatives of re, im, abs and arg for complex arguments

    Signed-off-by: Renato Coutinho <renato.coutinho@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4a3be1697492fbbfa25a1eb37b0ad1806d65d2b3
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 28 13:35:29 2009 +0545

    issue 1659 tests

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>

commit 3705c08ee81a058e4f81d3eae16976f8222c262e
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:41:15 2009 +0200

    preview: set default output to png

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2011bf1f0530ae5131b0c9d87e0347bf506203f2
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:37:29 2009 +0200

    preview: remove trivial wrappers bloating namespace

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit de6e159cd9808805c285d0ba69ee65582f436957
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:36:17 2009 +0200

    preview: docstring update, use os.system instead of pexpect

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 343bdd92b356c1869fb9bcf466517d4e75f32423
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:32:36 2009 +0200

    preview: update default viewer list

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 16f6ed28f009417b6ab0233b81fc4319bf65c1b4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 23 13:17:12 2009 -0700

    python2.4: import all in test_simplify.py

commit 14efc261561d9c480d30b08503abe985b3a4c4ec
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Nov 6 13:55:01 2009 +0100

    fix whitespaces

commit fa3d4c7168327e56afc46952e94ff1ed28008946
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 28 13:37:40 2009 +0545

    1685: collect() dropped terms with derivatives

      As the terms of the Mul's making up
      an additive expression were parsed,
      a flag was being used to keep track
      of whether the Mul had a derivative
      or not. The test was being based on
      the grouping pattern instead of the
      terms of the Mul. This has now been
      corrected and tests have been added.

commit af53d18f0b5582c28826af5a1463b7cd9af2d97a
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Aug 17 18:19:40 2009 +0545

    Issue 1468: cubic, quartic, roots, Poly mods

    * Poly docs have been expanded. I ended the docstring with
      a caution about using methods 2 and 3 to instantiate. It
      seems that it would be a good idea to test at least one
      monomial to see that it is not an integer...it wouldn't cost
      much and it will save a lot of headache for the day that it
      happens...but I will leave that for someone else to decide
      on.
    * a new instantiation method was added:
      a list of univariate coefficients can be given:
      Poly([2,3], x) -> Poly(2*x + 3, x)
    * tests were added to make all added features 100% covered
      and to increase coverage of other portions.

    * cubic_roots and quartic_roots have been expanded to
      give solutions to all coefficient types, i.e. they don't
      rely on roots() weeding out certain classes of polynomials.
    * I keep hoping that there is some other problem hiding that
      keeps quartic from working, but it appears that it only works
      for certain conditions and does not provide a generally valid
      solution.

    * roots() now has an expanded docstring
    * roots() also accepts a list of coefficients of a univariate
      polynomial for which a dummy symbol will be used. The user
      never sees this dummy variable since only solutions are returned.
      Only a LIST of coefficients is permitted to be consistent with
      the instantiation of Poly with the coefficients.
    * roots() also tries to do the obvious thing if an expression with
      only a single symbol is given to it and similarily, it doesn't
      complain now if it gets a multivariate Poly but a single symbol
      as in Poly(mv, x) or a Poly() along with a symbol. It seems that
      if the roots() is already going to take either an expression with
      a symbol to select which one is solved for that it might as well
      let that expression be given as a Poly instance, too.
    * quartics is giving much more compact expressions so the default
      quartics=True semantics has been enabled in line with the
      docstring's claim.
    * only quadratics have simplification done to the roots. Nothing
      is done to the roots of the cubic or quartic as these tends to be
      very complicated and don't simplify or expand down to something
      compact.

    * all throughout polynomial "an univariate" was replaced with
      "a univariate" consistent with the word being pronounced as
      "yoonivariate" rather than "oonivariate"...and the an-before-
      vowel rule corresponds to *pronunciation* not spelling.

    /c

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>

commit 1c51ea0aff99d2ecff604077de343fc7447e9224
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 13:39:03 2009 +0300

    piecewise: Support ExprCondPair arguments in constructor

    Signed-off-by: Jorn Baayen <jorn.baayen@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 3b138d9a1808524df1b6c9e833a155753c2cf2eb
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 13:28:31 2009 +0300

    Basic.__contains__(): Do not assume all arguments to be sympy types.

    Signed-off-by: Jorn Baayen <jorn.baayen@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 7849d3d19a7e9d0d29f724db21528fe082baebe5
Author: renato <renato.coutinho@gmail.com>
Date:   Thu Oct 1 00:31:24 2009 -0300

    1658: correct derivatives of re, im, abs and arg for complex arguments

    Signed-off-by: Renato Coutinho <renato.coutinho@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 45f77b9ab9a2b2b907aa63521c0405760bedf13e
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 28 13:35:29 2009 +0545

    issue 1659 tests

    Signed-off-by: Chris Smith <smichr@gmail.com>
    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>

commit a04942d1073ed5d031b2f85e412578d7e33d867a
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:41:15 2009 +0200

    preview: set default output to png

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e5d801a9670b6d48fb1bee777c9e3599ad5bfb94
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:37:29 2009 +0200

    preview: remove trivial wrappers bloating namespace

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit eddd4d27dfc468fd94df08cd8dd521a35f6a7d21
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:36:17 2009 +0200

    preview: docstring update, use os.system instead of pexpect

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 648155e41986d56033bba656f31963d7af14dd8f
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 26 17:32:36 2009 +0200

    preview: update default viewer list

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit afb1fe382040a397abfe172f64a4e81cdc06546e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 23 13:17:12 2009 -0700

    python2.4: import all in test_simplify.py

commit 978f42f3bd10896fff0da87ba72d5c4197e12434
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 20:11:50 2009 +0300

    solve docstring: Mention that piecewise functions are supported

commit 06f97380bf210b23309e00e0163a822418c26eef
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 20:08:31 2009 +0300

    piecewise: Fix doctests

commit 5117c3b8111a71e2bf9143a45d88b636c9434311
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 18:08:14 2009 +0300

    piecewise: Evaluate entire integral interval, not just initial chunks.

    o Piecewise._eval_interval():

      Evaluate the last 'unclaimed' interval using the default expression.

commit 50228a80a154f552ca8677194578933f7d3b9a2e
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 17:51:43 2009 +0300

    piecewise: Added tests for integrate and solve

commit 2581e2145840c5b15296d20dd251983d6dab2d90
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 17:42:12 2009 +0300

    piecewise: Do not piecewise_fold non-Basic items.

commit 0479036515ef7de38c0a990e9bfbede5781ead3d
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 17:53:06 2009 +0300

    solvers: Add a strategy for solving piecewise functions.

commit a81ac78247653103acf69f4a129ea7d8f56566fa
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Fri Oct 23 16:22:37 2009 +0300

    integral: Call piecewise_fold() on piecewise functions

    Any embedded piecewise functions need to be brought out to the
    top level so that integration can go into piecewise mode at the
    earliest possible moment.

commit 2517afd12b31c5d1ddb5415d22c709f38fbc3f63
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 26 11:43:42 2008 +0100

    Adding piecewise_fold to take an object that has a piecewise arg and turn it into a piecewise object.

commit 718c160c0f5f6ed0a3e6c8b207e67f9023d943f4
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 23 09:39:29 2009 +0545

    use iff for 24 compat

commit be030c297f7c3bb4150934c2e86c0acc5846ed6e
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 11:34:20 2009 +0545

    1558: limit default expansion of roots

        == sympy\core\mul.py
           expression expanded indiscriminantly; fix expanding and
           contracting with rational exponents

                   Philosophy: sympy should never return an expression given in
                   variables that would give a wrong answer when values are
                   substituted back into that expression.

                   When there are rational powers of negative bases, those bases
                   cannot be split up: sqrt(x*y) is not sqrt(x)*sqrt(y) in general
                   unless x and y are nonnegative. If nothing is known about the
                   sign, then that quantity is left under the radical. It can be
                   pulled out if desired with separate and put back with powsimp.
                   Both of those allow modifications that go against the above
                   philosophy, but I haven't yet come up with a reasonable fix.

                   THE ISSUE When roots are expanded as in (a*b)**e --> a**e *
                   b**e the expanded result will be off by a factor of a root of
                   -1 if e is a rational number with non-trivial denominator. The
                   factor needed to correct it is

                   correction = (-1)**(2-A*e)

                   where A is 2*(nn//2) and nn is the number of negatives in the
                   arguments that were expanded (e.g. a and b for (a*b)**e being
                   expanded to a**e * b**e).

                   The reason there is a problem is that when terms are negative,
                   their signs cancel for every pair of negative terms *inside*
                   the common root. When those terms are expanded outside the root,
                   a factor of (-1)**e is introduced--and there might be several
                   such terms introduced. All that would have been produced (if
                   the arguments were not expanded) is a *single* factor of (-1)
                   **e. So the correction factor is computed in a generic sense so
                   that once the signs of terms are known, the proper cancelling
                   of the spurious (-1)**e terms will be eliminated.

                   EXAMPLE if a = -1 and b = 2 then nn is 1, A = 0, and fix = 1
                   (i.e. no correction factor is needed) but if b = -2 then nn = 2,
                    A = 2 and fix = -1**(2-2*e) (so if e is 1/2 the answer is off
                   by a factor of -1 from what it would have been if the two terms
                   were not expanded). In this latter example, the answer is
                   technically right, giving one of the roots of -2 but this
                   result might not be expected; one might be expecting the
                   primary branch solution, thus the raising of issue 1161 and
                   issue 896. Since the roots of -1 can generate both real and
                   imaginary components when e is not 1/2, e.g. (-1)**(1/3) = .5
                   + . 866*I, it is possible that an answer looks "way off" when
                   the roots are expanded. Taking the previous example with a, b =
                   -1, -2, a**e * b**e -> -0.63 + 1.1*I instead of 1.26.

                   So, for now, in keeping with the spirit of the previous code,
                   this modification tries to expand as much as possible:
                       - symbols that are negative are pulled out with a neg
                         while leaving a negative behind under the radical
                       - symbols that are positive are pulled out
                       - unknown symbols are left under the radical
                       - if there is a leftover negative sign from a numerical
                         literal or from negatives that were pulled out, that
                         will appear as (-1)**pow separated from the other
                         unknown terms. (Alternatively this could be modified
                         to only do so with sqrt(-1) = I and otherwise leave
                         the negative with the unknown terms.

        == sympy\series\tests\test_limits.py
             o had to split up sqrt args in test_heuristic

                   Products are no longer separated by default unless something is
                   known about their sign. And since nothing is known about the
                   signs of the functions they aren't split up.

        == sympy\solvers\tests\test_ode.py
             o put the sqrt together

                   This makes this test compatible with default behavior of sqrt
                   which no longer separates terms about which it doesn't know the
                   sign.

             o also encountered a term where an alternate but equivalent
               form for the ode solution was returned so I added this
               alternate form, too.

commit b6cf27e07cc08f4bd0c014e2d0cbc99aa0359a11
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Oct 22 19:57:06 2009 -0700

    The docs tests are fixed now

commit 17145c7bb6e790c0a117163c36bd7ed7bca1b142
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 10:52:16 2009 +0545

    some exact chemistry convenience units added

commit 2021cc2cd799832de941ea82b2d9bb406b9f2a71
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 10:48:55 2009 +0545

    change format string to use % instead of *

commit a634a62ee2987f577be8ad18774dc2ea98b721c3
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 10:32:14 2009 +0545

    1444: ilcm syntax and similar error in risch

        == sympy\solvers\solvers.py
           1444: ilcm in solve has wrong syntax for more than 2 arguments
           it has worked until now because it's never had more than 2
           arguments.

        == sympy\integrals\risch.py
           correcting a potential error

              I don't know if the numerator of the expression in the
              integrate routine of heurisch can ever be anything other than
              an Add, but if it can be, the current code will fail. If it's
              not an Add it's being made into a list and then a loop over
              numer.args is being run afterwards. Since it's never been
              anything but an Add there has never been a problem, but I've
              changed to code to reflect that one wants to iterate over the
              args of the Add or else the whole expression (in which case it
              is put into a list).

        == sympy\integrals\tests\test_risch.py
           Mathematica typo fixed

commit f3de4f072db823f6e7df6c9f041201e4eb8b8fdb
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 09:59:37 2009 +0545

    1632: nsolve matrix of Eqs and solve args options

        == sympy\solvers\solvers.py
           o edit docstring
           o sympify everything up front
           o simplify how symbols_passed is made
           o edit code to put space between comma separated items:
           o solve now tries to "do the right thing" in terms of arguments:
             - if no symbol is specified and there is only one symbol
               in the equation, then that is the one solved for.
    	 - If there are multiple equations and the same number of
               symbols in those equations, then the dictionary of solutions
               for the system of equations is returned.
             - If there is a single equation with more than one variable
               one might want to look at solutions for the different
               variables so several variables can be specified for the *single*
               equation.

        == sympy\solvers\tests\test_numeric.py
           test a numerical system of Eq's (which previously failed because
           the Eqs weren't being turned into non-Eq form

        == sympy\solvers\tests\test_solvers.py
           o swapback edit (as per vks review)
           o different types of solve args
           o moved a test up with other tests
           o the test for solving for pi in test_polynomial1 was
             moved to test_solve_args and the one with no arg was removed
             since that is ok, now.

commit 448b0e37a3cfeb5a7e721cf69ee9565925d381ed
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 09:03:29 2009 +0545

    1643: exact logs values

        == sympy\functions\elementary\exponential.py
           o return exact log values (or at least reduced values) when
             possible:

               log(b**m*x, b) = m + log(x)/log(b) and is computed by
               checking for the multiplicity of the base in the
               argument of the log()

           o corrected a piece of code in a comment
           o deleted a piece of dead code which, AFAICT,
             would make no sense if it were ever implementing.

        == sympy\functions\elementary\tests\test_exponential.py
           test exact logs like log(4, 2) or log(9, 3)
           and partial exact logs like log(6,2) = 1 + log(3)/log(2)

commit 9d234a2fe83ffbf4256c486ca9618625b1c99a2d
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 08:55:18 2009 +0545

    1556: evalf for (a+i*b)*(c+~0i)

        == sympy\core\evalf.py
           o 1556: complex accuracy: standardize names

             When a complex number multiplies another number that has an
             insignificantcomplex part, the result also has almost no
             significant imaginary part. This is because the evalf.cmul
             routine (which multiplies two complex numbers) looks at the
             accuracy of the re and im parts of the number and picks the
             smallest one instead of only looking at the overall uncertainty
             of each number. I can understand losing significance when
             finding a difference in two numbers, but when adding (the cross
             terms of the complex product) you shouldn't be losing digits.
             The approach taken now is to assign the smaller of the overall
             uncertainties to the re and im parts of the result.

           o remove cmul helper
           o standardize names
           o keeping track of working imaginary accuracy
           o change what comes out when in verbose mode

        == sympy\core\tests\test_evalf.py
           o complex accuracy tested
           o One of the tests that was evaluated to 15 places was reduced to
             6 places.

commit b3f7e6bbae92ee0cf7c286a7d26ce0df899e62c6
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 08:32:59 2009 +0545

    1634: better comparisons and minor code edit

        == sympy\core\basic.py
           o Smarter comparison for relationals implemented:

             Here is an interesting example where one thing works
             and one doesn't, even though they are (to the human)
             almost the same:

                In [124]: pi < 0
                Out[124]: False

                In [125]: pi > 0
                Out[125]: -pi < 0

              pi<0 is recognized as a number comparison and goes to
              lt of numbers.py whereas -pi is an expression and calls
              up the basic.py lt routine.

              This patch makes the basic relational operators return
              a True or False if the sign of the quantities involved
              can be determined. This will result in more answers
              rather than restatments ('True" instead of "-pi < 0").

           o In as_coeff, "expr" was changed to "args" to avoid confusion

        == sympy\core\tests\test_basic.py
           test smarter relational tests

commit 472004fdf9ebb3b9df5b85191741b09a98633d57
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 06:40:03 2009 +0545

    1618: seterr divide flag setting is ignored

        == sympy\core\numbers.py
           seterr divide flag setting is ignored.

            seterr() now clears cache on change in value of the divide flag;
            previously, if the "divide" flag was changed to govern the
            result of 0/0 nothing would change if an attempt at 0/0 had
            already been made because this value was stored in the cache.
            Now, if the flag is being changed the cache is cleared so the
            new behavior will be triggered.

        == sympy\core\tests\test_numbers.py
           tests added.

commit e54a491468ec403354ad20df1d1c0d808cc39afd
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 06:32:07 2009 +0545

    1558: NumberSymbol and atoms() args

        == sympy\core\__init__.py
           import NumberSymbol so one has access to this when specifying
           the types of atoms to return

        == sympy\core\basic.py
           o docstring edits in atoms
           o _atoms: modify so implicit types works no matter where the implicit
             type is given

               atoms() will take as arguments anything that is loaded in
               core/__init__.py By default it returns atoms that are Number,
               Symbol or NumberSymbol but if you try to use the argument
               NumberSymbol alone, it fails because this has not been imported
               in core's __init__.py so I made it do so.

               There is also an interesting issue of a few things defined in
               numbers *not* being what you think they are: I and zoo do not
               derive from NumberSymbol, they derive from Atom (and that can't
               be changed without breaking things). So if you want to find
               them in addition to other number symbols you might try
               eq.atoms(I, NumberSymbols)...but this can cause problems since
               if implicit things are listed first in atom's args, only those
               sorts of things are returned. Changes to make sure that all
               things given as args are returned by atoms() have been made.

        == sympy\core\tests\test_basic.py
           test NumberSymbol and I args to atoms

commit 562cd208d5e44232c316691325c981a34302fcb1
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 06:02:21 2009 +0545

    1630: mul had a reference to s.base

        == sympy\core\mul.py
           There was an s.base term in the loop over o; both loops have
           been collapsed into a function now and the problem corrected.

        == sympy/core/tests/test_subs.py
           Ryan Krauss's test are included.

commit 22eeba0b7b16435007350ed1743076f421dd4a03
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 05:36:06 2009 +0545

    1495: could_extract_minus_sign infinite recursion

    	== sympy\core\basic.py
    	   could_extract_minus_sign()

    		A new approach for is_Mul is implemented where infinite
    		recursion is avoided and the case where there is an odd number
    		of minus signs in numberator and denominator gives a True value
    		for whether a minus sign can be extracted or not.

    		The is_Add portion was re-written to make a single pass through
    		the args rather than two passes (with count).

    	== sympy\core\tests\test_basic.py
    	   tests included

commit 3a1aa58edf443c2a0b9c401eadaa194e1eb87f94
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 05:17:37 2009 +0545

    1584: as_numer_denom() changes esp for roots

        1560 related minor changes, too.

        == sympy\core\basic.py
           A note about future possiblility for as_numer_denom was written.

        == sympy\core\power.py
           as_numer_denom()

               This was totally re-written. If nothing is known about the
               exponent's sign then we don't know which part will be the
               numerator or denominator. If the exponent is an integer then
               normal power rules apply. But if the exponent is a rational
               then we have to watch out for the negative denominator. This is
               handled by moving the negative to the numerator and negating
               the negative denominator (making it positive).

               When given something like (n/d)**-e this is always 1/(n/d)**e
               and whether this becomes d**e/n**e or not depends on d. Do not
               rearrange this as (d/n)**e and then make the decision based on n.

        == sympy\core\tests\test_basic.py
           test as_numer_denom with oo and zoo

        == sympy\core\tests\test_eval_power.py
           as_numer_denom() for powers tested

                One of the previous tests was incorrect:
                  sqrt(1/neg) =
                  sqrt(-1/-neg) =
                  sqrt(-1)/sqrt(-neg) =
                  I/sqrt(-neg) != 1/sqrt(neg) = -I/sqrt(-neg)

                A series of new tests is added.

               N.B. It is important on tests to make sure that you are testing
               what you think you are testing: there are two tests in the
               suite where a power like expression is assembled as (n/d)**pow
               but because of standard rearrangement of (n/d)**pow e.g. for
               sqrt((-1/(1+sqrt(3)))) which becomes I/(1 + 3**(1/2))**(1/2)
               you end up with a Mul instead of a Pow.

        == sympy\core\numbers.py
           minor changes to _eval_power() to better use already computed temp
           variable and to eliminate a piece of dead code refering to a case
           of "e < 0" which has already been handled in the code that precedes
           it.

commit e310b069b275109374583b671c59413ed03b4e72
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 04:23:58 2009 +0545

    1648: FunctionClass test for relational ops

        == sympy\core\numbers.py"
           FunctionClass test added to relational operations where
           applicable.

            Issue 1648 raises a case where a comparison between a Real and
            cos (as opposed to cos(x)) causes an error. The reason for this
            is that cos is comparable but not evaluable so a test was added
            before that test to catch FunctionClass items. This change has
            been made to all of Number.py's __eq__ and __ne__. Changes to
            relational operators < , <=, >, >= have not been made since
            these relational comparison's don't make sense: is cos > .1?
            Perhaps a more explicit error could be raised in these cases,
            but that has not been done yet.

            There was a redundant test, "if isinstance(self, Number)", that
            was removed. self is by definition the same type as the class
            that the function is being called in.

        == sympy\core\tests\test_numbers.py
           o typo inifinity -> infinity
           o test relational comparisons of equality and inequality between
             number types and FunctionClass.

commit e330d499125e57f29f8657775dff15670b62dd94
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 04:10:26 2009 +0545

    1652: complex conjugate compare and simplify

    	== sympy\functions\elementary\complexes.py
               complex conjugate comparison and simplification doesn't work

    		The re and im parts of a conjugate(x) are now computed.
    		Previously, the argument wasn't being checked to see if it was
    		the function "conjugate"

    		Although the docstrings for re and im in complexes
    		say only elementary analysis of arguments is done, checking
    		to see if the argument of re or im is the function conjugate
    		is easy enough to do.  With the current change,
    		re(conjugate(x)) returns the real part of x and
    		im(conjugate(x)) returns the -imaginary part.

    	== sympy\core\tests\test_complex.py
               tests added

    	== doc/src/modules/evalf.txt
    	   corrected doc example

commit faa45a0955894565d574ec3e822dbc2e93ea0ffd
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 03:48:18 2009 +0545

    1670: f[:] should be f.args

    	I think that sums_products is obsolete, but there is a reference
    	to f[:] that should be f.args. A test has been added for it that
    	tests that piece of code. There is much more that is untested but
    	I don't want to add more if this is a more or less obsolete piece
    	of code.

commit 3d0f8b437488bf84aef9f0e5595f1ff37d6a81ce
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 08:14:52 2009 +0545

    1609: sign(x).is_zero and sign(sign(x)) is sign(x)

        == sympy\functions\elementary\complexes.py
           o sign(sign(x)) = sign(x)

               The sign functions shouldn't nest.

           o The sign of a product has also been stripped down to retain
             only the items whose sign is not known so that if p is positive
             and x's sign unknown, then sign(p*x) will return sign(x) just
             as sign(2*x) returns sign(x)

           o self[0] error

               The test "sign(x).is_zero" used to fail because self[0] rather
               than self.args[0] was being queried.

           o make_list is used to replace other code

        == sympy\functions\elementary\tests\test_complexes.py
           o test sign(0).is_zero
           o test that sign(sign(x)) === sign(x)
           o test that things with known signs are removed from args

commit d3fbcdd1cdf54215c73889535cf7daf29053c0c5
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 03:29:03 2009 +0545

    1661 factorint and multiplicity calls to trailing

    == sympy\ntheory\factor_.py
             o make multiplicity(2, n) call trailing(2,n) since that's the faster
               (and appropriate) routine and "trailing" is not itself a very
               descriptive name. (Maybe it could be called ilog2.)

             o factorint(3,2) fails
               when a limit of 2 is given this is larger than "low" and an
               error is generated. A test is made to make limit the greater of
               the given value or 3 or something near the sqrt(n) (this part
               is unchanged).

    == sympy\ntheory\tests\test_ntheory.py
             o add some tests to make sure limit is working on factorint.

commit 28ab18ef18e0b816ae1c8880c23b57948199c96a
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 08:26:44 2009 +0545

    iff is 'foo if cond else bar' alternative

        == sympy\utilities\iterables.py
           iff added

            This is a replacement for the Python 2.5+ "foo if cond else
            bar": iff(cond, foo, bar) If one has expression that you don't
            want evaluated unless the condition warranted it, send them as
            a lambda, e.g. if 1/x if x !=0 else x becomes iff(x!=0, lambda:
            1/x, x). Function arguments are always evaluated on sending, so
            if 1/x wasn't wrapped in a lambda and x were 0, a division by
            zero error would be raised.

            By providing this anyone wanting to use that structure will
            have a standard way of doing so and this will permit and easier
            updating of code from 2.4 to 3.0.

commit adbb1d594fef084e296e63c40f162f2874411c17
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 02:30:53 2009 +0545

    1653 use list comprehension/generators and make_list

            o List comprehensions, rather than iterators, seem to perform
              better. Where possible, (*(...for...in..)) was changed to
              (*[...for...in..]).

              >>> timeit.timeit('sympy.Add(*[ai for ai in a])',
                                'import sympy\na=[sympy.S(1)]*10')
              17.350550419116189
              >>> timeit.timeit('sympy.Add(*(ai for ai in a))',
                                'import sympy\na=[sympy.S(1)]*10')
              22.278449076628021

           o Use make_list to replace (sometimes discontiguous) portions
             of code that do what make_list was made for: return a list
    	 of the arguments of an expression of a certain type (or
    	 types) or else put the whole expression in a list if it
    	 is not that type, e.g. make_list(x+y, Add) -> [x, y]
    	 while make_list(x*y, Add) -> [x*y]

commit 5fb31111ec73a7320feec51e202bc7a4817ae19b
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 02:21:38 2009 +0545

    1653: remove [:] where possible

        "[:]" was removed from things which don't need to be made into copies
        of a list, e.g. things like len(l([:]) were changed to len(l)

        Depending on how long the list is, this can be significant in terms of
        absolute time differences (though I'm not sure how it affects the
        overall performance of sympy processes):

            >>> timeit.timeit('len(a)','a=range(1000)')
            0.32844900678717792
            >>> timeit.timeit('len(a[:])','a=range(1000)')
            10.253066521024316

commit 396aabb46f1231f87c8bf4296ce26c48fe3d1d6f
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 09:16:32 2009 +0545

    add tests for some nonsimplifiable items

        Just added a single line of tests as a safeguard against changes
        involving signs or simplification.

commit aa0df0f4b11546dd88bcc3bea22a3883bfb5bbdd
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 03:21:30 2009 +0545

    docstring edits

        o several minor docstring edits

        o "an uni" becomes "a uni",
          All throughout polys, "an univariate" was replaced with "a
          univariate" consistent with the word being pronounced as
          "yoonivariate" rather than "oonivariate"...and the an-before-
          vowel rule corresponds to *pronunciation* not spelling.

        o in simplify.py's powsimp()
          removed comment about combining bases with non-numeric exponents
          because there is no test for numeric exponents as far as I can see.

        o in geometry\util.py an addtional comment is added to improve one's
          use of intersection() which was inspired by issue 1649.

        o add comment to python_bitcount

        o reformat long lines

        o add docstring to Real about instantiating from tuple

commit 6b97b1476115370fdd65b5fc30413552ec32e170
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Oct 16 01:40:04 2009 +0545

    eof and whitespace errors

commit 7805a3fb1329a954e219c4e838862fcfd533990a
Author: Kevin Goodsell <kevin-opensource@omegacrash.net>
Date:   Mon Oct 12 11:14:03 2009 -0700

    Make Integer and Rational convert args to int/long

    Also allows more argument types. This includes several
    related changes:
    * Use cacheit instead of Memoizer to avoid strict type-checking.
    * Allow unicode in addition to str.
    * Allow Rational(Rational(...)).
    * Update tests.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d22e9e282093572d38551d5ff9ce8b1cb15e01e5
Author: Ryan Krauss <ryanlists@gmail.com>
Date:   Fri Sep 11 06:28:55 2009 -0500

    Tests for mul subs

    Created 5 or so simple tests for substitutions involving mul

commit 93a50a2c4185c9e4f1b2a367372d657f7f2c755a
Author: Ryan Krauss <ryanlists@gmail.com>
Date:   Fri Sep 11 06:02:13 2009 -0500

    Fix subs bug with negative exponents

    This commit fixes the bug but doesn't include the tests.  The tests
    will be in my next commit.

commit cb7e0ee64ea668cb354485b34bf54790e67d8fc5
Author: renato <renato.coutinho@gmail.com>
Date:   Sat Sep 26 21:41:13 2009 -0300

    Fixes issue 1655: derivative of conjugate evaluates to conjugate of derivative.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ca25b2412e8eec34fcf219287077289713f8f1ec
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sun Oct 4 23:41:38 2009 +0300

    Add support for output in itex format.

    If 'itex=True' and 'inline=False', then instead of enclosing latex output
    in an equation environment it will be enclosed between '$$' on both sides.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 601923d0c32e2c0f2a759780bbceaa6f245bd6a5
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 14 10:37:01 2009 +0545

    1666: recursive limit error

    When core/function.py's _evalf_nseries() isn't dealing with an expanded
    and unexpanded form that are the same it calles for nseries of the same
    expression rather than using a different form. This patch fixes that and
    adds tests to raise the _eval_nseries() coverage to 100%.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 598fc2b801194af753a9dd840be775b4e7eb9f1d
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Mon Jul 13 19:26:10 2009 +0100

    Don't check expensive properties in test_pickling.py:test_geometry

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c586b0a1be6c1368554a13e3ce3422d86d132940
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Oct 15 13:32:17 2009 +0545

    1669: strip_whitespace handles eof error

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit baaaaa4cbfd9d523ad3943f802697dcecb6f49a8
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Oct 15 15:13:11 2009 +0545

    1664; nonsymbolic systems may need basis recalculation, too

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2f7396a0f66b17de431c250bef9e5a30a87f00de
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Oct 14 23:55:13 2009 +0545

    1664 eigenvector multiplicity

    The test in the eigenvector routine is that the length of the basis
    (the geometric multiplicity) be the *same as* the algebraic multiplicity,
    http://www.ms.uky.edu/~lee/amspekulin/eigenvectors.pdf {see pp. 16, 17}.
    The condition perhaps should be that len(basis) <= k. All matrices tests
    still pass with that change.

    See also, http://www.ee.ic.ac.uk/hp/staff/dmb/matrix/eigen.html#GeomMult

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6edb66390334a24e5646039daf2bde49e962dd5d
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Jul 30 16:04:42 2009 -0600

    Fixed a bug where powsimp() with deep=True would not combine some exponents

    See the added tests for examples of what was not working.  The main
    case was powers inside of a power that was multiplied by something, such
    as x*(x**y*x**z)**x or exp(x)/(1 + exp(x)*exp(y)).

    Unfortunately, powsimp() does not call separate() anymore, so things
    like x**n*(x*n)**(-n)*n will only be simplified to n*n**-n,
    not n**(1-n).  You can call powsimp() a second time to fully simplify
    that expression.  This is because separate() was causing things like
    (z**x*z**y)**x to change into (z**x)**x*(z**y)**x, and so the exponents
    of z were not being combined, because 'exp' is always run before 'base'.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a0da2be0aa826a947e8f87a50f550f5cbecb33e7
Author: Eh Tan <tan2tan2@gmail.com>
Date:   Wed Oct 7 13:41:06 2009 -0700

    Simplify more trigonometric expressions

    This patch simplifies the following formulas:

    a * tan(b)**c * cos(b)**c  -->  a * sin(b)**c
    a * cot(b)**c * sin(b)**c  -->  a * cos(b)**c
    a * tan(b)**c / sin(b)**c  -->  a / cos(b)**c
    a * cot(b)**c / cos(b)**c  -->  a / sin(b)**c

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 75f456eb135d3f2e66e7be614b84a6fa880851b2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 7 13:46:12 2009 -0700

    Fixes ode.py to work in python2.4

    Just the "any" function had to be imported from sympy/utilities.

commit e85ae4436e22641ebc49d06b04673952bf42b9a3
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Sep 19 13:30:16 2009 +0545

    #1650: Bernoulli handles f(x) in coeff

commit 4520e9102aba46337a6fae161b44b7c2ceae3660
Author: Chris Smith <smichr@gmail.com>
Date:   Fri Sep 18 20:43:59 2009 +0545

    remove nth_match from ode

commit a6a6d66d7c025691b7ae96265d8ae492f970fa90
Author: Chris Smith <smichr@gmail.com>
Date:   Mon Sep 14 10:29:58 2009 +0545

    coeff should be exact match

    When asking for the coefficient on some term, coeff sends a
    request to collect...but although an expanded expression is
    traversed, since the exact flag has not been set to True,
    terms with f(x) IN them (rather than being f(x) terms exactly)
    are tallied up. This patch passes exact=True to collect. Any
    routines depending on the faulty behavior of coeff will need
    to be re-written. The portion of ode.py that depended on this
    behavior has been rewritten and now all of sympy, as far as
    tests are concerned, are compatible with the corrected coeff()
    behavior.

    small grammar correction make in docstring, too.

    The test that identified this problem has been added to the suite.

    This also includes changes to numbers.py with regard to creation
    of Reals from tuples.

commit a9a20e6450296f06115525edd8bef7ac7ae50d73
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Sep 8 23:55:05 2009 -0600

    Fixed .as_coeff_terms to not expand exponents in the exponent of a Pow

    This was causing something like exp(exp(x + y)) to automatically split
    into exp(exp(x)*exp(y)) because exp(x + y).as_coeff_terms() was
    (1, (exp(x), exp(y))). It now returns (1, (exp(x + y),)).

    Also note that prior to this commit, Order(exp(x + y)).expr would return
    exp(x)*exp(y), but now, the opposite happens.  Order(exp(x)*exp(y)).expr
    returns exp(x + y).  Note that internally, it is stored as exp(x + y),
    which is needed for some algorithms.  You can easily switch between the
    two using expand() and powsimp().

commit 1e564e00b0179241eb70dfea6e5d98f3e822b4f6
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Sep 8 23:52:21 2009 -0600

    Made diff work the same was as Derivative.__new__

    See issue 1554

    You can now do diff(f(x), x, x, x) to get the same as diff(f(x), x, 3).
    This has also been fixed to work correctly with @vectorize().  Just put
    the multiple symbols together in a tuple.  For example, to get each of the
    first and second partials of f(x, y), you could do
    >>> diff(f(x, y), [x, y, (x, x), (x, y), (y, x), (y, 2)])
    (note the (y, 2) is the same as (y, y)).

commit 1e02777b56d74c8f37567b68187f92af4c012b16
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Sep 8 23:49:34 2009 -0600

    Made Derivative not reverse the order of the symbols with evaluate=True

    For example, before this commit:
    >>> Derivative(f(x, y, z), x, y, z, evaluate=True)
    D(f(x, y, z), z, y, x)
    >>> Derivative(f(x, y, z), x, y, z, evaluate=False)
    D(f(x, y, z), x, y, z)

commit 78ec1285ca7a9fb4683474ff82bdaa9b075601ca
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Sep 8 23:47:27 2009 -0600

    Made 0th Derivative return the function, even when evaluate=False

    The reasoning behind this is that there is no good way to pretty print
    this (before this patch, it results in a traceback), because you cannot
    access the symbols that do not appear, and pretty printing the function
    when it is a Derivative class is misleading.

    Tests to follow in next commits.

commit bf9d6bbff7325a931c2a0a8a0c9d9a637c6d1337
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Sep 8 23:44:49 2009 -0600

    Fix doctests in core/functions.py, which were not being tested

    See issue 1641.

commit c43a2394547d2aacbcce169b5fecaec541510dbf
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 2 21:23:57 2009 -0700

    Fixes the pickling tests

    Previously it failed by importing the interval.py, which was renamed to
    sets.py. Surprisingly, our buildbots didn't notice this, I think because the
    interval.pyc was still there.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0a05899c62c54a78f0a9824ccfd2c438d2597c4b
Author: Fredrik Johansson <fredrik@airy.(none)>
Date:   Fri Oct 2 20:31:25 2009 +0200

    Fix bug in evalf_add (#1659)

    It was erroneously throwing away terms where mantissa widths differ.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fbb11edab44c739dfd8050fc44f5be85ca2dde1a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Sep 28 14:13:41 2009 -0700

    docs update: sympy.core.interval renamed to sets

    The interval.py was renamed to sets.py, so the docs were updated too.

commit f725e066cd9371d7777bcfb08f432dc83a67165a
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Mon Sep 28 23:46:00 2009 +0300

    Prefix methods that override Set methods with underscores

    This is to get them off the documentation radar.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7b702792e6aa371caf5a453302cc18a7344dabbb
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Mon Sep 28 23:25:28 2009 +0300

    Add more doctests to Set and Interval

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f5b7d29c172bd6c21f6f1f60ef747feee187370f
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Mon Sep 28 22:20:20 2009 +0300

    Add tests to cover all of sets.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3c3ebd2b12a1762bc13076e62a67d5744ba46a1e
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Mon Sep 28 21:35:46 2009 +0300

    Add more tests for Interval constructor

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5b735b1b17019c54c06af700833ee3e1e1cfb6de
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Mon Sep 28 21:34:44 2009 +0300

    Escape curly brackets in LaTeX formatting for sets

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ba8696768da4196ac3f66ed0657db80c38081e18
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sun Sep 27 14:14:23 2009 +0300

    Rename 'interval.py' to 'sets.py'.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 53c41bf9a0e279d249060961c2ca56cbaf2e86af
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sun Sep 27 13:37:43 2009 +0300

    Implement Interval.evalf()

    Interval.evalf() now evaluates a sympy Interval into a mpmath 'mpi'
    interval.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 74e3d29b4b73246aa56cdb0fd9caf05a83c102b3
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Sep 26 21:03:44 2009 +0300

    Add 'from sympy import *' to doctests

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b7e55e9ee0f77517e4906f13267d0804a9e37a0d
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Sep 26 20:31:22 2009 +0300

    Remove superfluous bit of Union documentation

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 662d8aed444bd786ece017035edfa915ccc7c286
Author: Jorn Baayen <jorn.baayen@gmail.com>
Date:   Sat Sep 26 15:46:04 2009 +0300

    Improve set support

    Changes made (core):
    = __init__.py:
       o import Set, Union and EmptySet

    = interval.py:
       o add generic Set base class
       o change Interval to extend the Set class
       o allow open and half-open Intervals (added 'left_open' and 'right_open'
         properties)
       o add inf, sup, complement and measure properties to Interval
       o implement intersect() and contains() methods on Interval
       o add a Union class to represent Set unions
       o add an EmptySet class to represent the (singleton) empty set

    = tests/test_interval.py:
       o added tests for the Interval, Union and EmptySet classes

    Changes made (printing):
    = latex.py:
       o add LaTeX printing for Interval, Union and EmptySet
    = pretty/pretty.py:
       o add pretty printing for Interval, Union and EmptySet
    = pretty/pretty_symbology.py:
       o include Unicode for the set union and empty set symbols
    = str.py:
       o print intervals as open or half-open if applicable
    = tests/test_latex.py:
       o added tests
    = tests/test_str.py:
       o added tests

    Changes made (doc):
    = modules/core.txt:
       o include Set, Interval and Union documentation

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5c40a877a8827c5dbd0b9184bdedc0d0bf472cbf
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Wed Sep 2 14:45:09 2009 -0700

    Modified _eval_expand_multinomial.

    When expanding instances of Pow with a negative integer power, we don't need to
    call .expand(), instead we just need to call _eval_expand_multinomial().  This
    patch reflects this change and should speed things up a bit.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 96b3c60f9668aa8451762877a8fb62a5199cdb78
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Sep 1 11:39:47 2009 +0545

    Wilds now exclude functions

    Changes made:
    = basic.py
        o __contains__ now affirms the presence of a function, so now cos
          in cos(x) is True
        o .has() has been tightened up

    = test_match.py
        o test_exclude() has the tests demonstrating the proper exclude
          behavior when functions are included in the exclude list. These
          were not working previously because "cos in cos(x)" was False.

    = simplify.py
        o in logcombine related code,
            - several times something like i.has(log) was used when what
    	  was intended was isinstance(i,log)
            - eliminated a recursive condition in logcombine
            - there was some dead code eliminated from the expr.is_Mul
    	  portion of _logcombine and a (now) unnecessary exclusion
    	  on variable 'a'

    = solvers.py
        o tightened up the iteration over symbols to now use enumerate;
          this gives, as before, perhaps non-consecutively numbered temporary
          values, but this doesn't matter since these are for internal purposes
          anyway.
        o put a self-explanatory note about the swap_back swapping at the
          end of the solve routine.

    = test_solvers.py
        o put a self-explanatory note about the swap_back test.

commit ae528b0c9d2646574f10852cbc5bfd757602fd18
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Aug 28 13:24:39 2009 -0700

    Remove the SKIP from doctests (doesn't work with python2.4)

    We just use ">>" instead of ">>>", that way the test will not be executed

commit 17b43060a15d48a98ce0072c1c306b77c15dd822
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Aug 28 13:19:14 2009 -0700

    Import all correctly in ode.py to work with python2.4

commit 49d188acead94be164124ca0c504039a0fc4b9c9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Aug 28 13:01:47 2009 -0700

    Import any/all properly so that things work with python2.4

commit a226e2efe227d0120932224f5f973d317086da89
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Aug 28 00:04:32 2009 -0600

    Manually renumber solutions in tests to maintain platform independence.

    _renumber() from within constantsimp() has been moved out and renamed
    ode_renumber().  It uses Basic._comapre_pretty, which is not platform
    independent, so the numbering of the constants from a solution on one
    machine may be different than the numbering on another.  The way to test
    this is to run ode_renumber() on the solution of any ode of order > 1,
    which will canonize the order for that machine.

    There is a strange thing that happens sometimes where Basic._compare_pretty
    cannot renumber the arguments correctly either way.  For example,
    compare (C1 + C2*x)*sin(x*sqrt(2)) + (C3 + C4*x)*cos(x*sqrt(2))
    and (C1 + C2*x)*cos(x*sqrt(2)) + (C3 + C4*x)*sin(x*sqrt(2))
    on a 64-bit machine.  For this reason, the tests test both the
    original solution and the renumbered solution.

    Hopefully fix ode tests on 64-bits

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 55eaaf6145b327243d15d81b79aba803c008230e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 24 00:20:42 2009 -0600

    Change name of deriv_degree() to ode_order()

    This name is more explicit, because it has the word "ODE" in it, and it
    uses order, which I think is better than degree because degree is also
    used for polynomials and is more consistent with other uses of order in
    the ode module.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e11ec9398d0af2100975ef913c1d3bac84cbeb28
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Aug 23 20:51:40 2009 -0600

    Added an option to wronskian() to let you choose what determinant method to use

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 69beacc9ab03b7fd6f20f890106346e9c233d1ca
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 20 14:35:26 2009 -0600

    Changed checkodesol() to return a tuple

    The tuple is either (True, 0) or (False, expr), where expr is the
    expression that it could not reduce to 0.  It also now raises
    NotImplementedError if it fails.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3cbce4e6357d8086b8927126776fa9f82ad9c50b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 20 12:39:08 2009 -0600

    Fix some issues in ode.py that would fail in earlier Python versions

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8f7e0d69b9cae281b94467de6df8c26f08630497
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Aug 18 23:17:13 2009 -0600

    Start some internal functions with '_'

    The functions are _solve_variation_of_parameters() and
    _solve_undetermined_coefficients.  This is for example
    so they won't be caught by the doctest coverage test.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 74aae9c38573aacfccc8c71596393d3b5e26ac8d
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Aug 18 14:08:57 2009 -0600

    Fix checkodesol() to return False when it fails

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0724839373cf5bba96bec51fcf9ea8d5503b40c3
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 17 22:37:07 2009 -0600

    Made 1st_homogeneous_coeff_best not call odesimp when simplify=False

    I also added some information on the simplify flag in the how-to.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5e5b91d118faa48c1f5bdfcc8baa4b0ac0e09790
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 17 10:37:12 2009 -0600

    Small fixes to the ode module

    This is the final commit for the GSoC 2009 period for my ODEs project.
    Thanks for everything SymPy!

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4e2056c1f9c151bbb07645568d1f13cf260fc3a1
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 17 00:07:10 2009 -0600

    classify_ode() now uses a function instead of match for nth linear odes

    This fixes problems that were resulting from bugs in match (see issues
    1429 and 1601).

    This also adds all tests that failed under the match bugs.  It fixes a
    bug in the undetermined coefficients code where sin's and cos's were not
    alternating correctly, leading to incorrect results.
    solve_variation_of_parameters() will now not attempt to simplify the
    Wronskian if the simplify=False flag is used with dsolve(). This leads
    to much faster results for complex wronskians with the
    'nth_linear_constant_coeff_variation_of_parameters_Integral' hint.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b80806d590d7cef2b19b1d64ee2d760128d4207d
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Aug 16 21:42:55 2009 -0600

    Added function checkodesol() that checks solutions of odes.

    This used to be checksol() in test_ode.py, but I was able to make
    it general enough to warrant adding it to the main ode module
    and importing it into the global namespace.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f2a8f529d5baa71e04f10ca4306cbf0e5145f8a6
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Aug 16 17:52:37 2009 -0600

    Minor ode docstring fixes

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1e5e5054128d51bdd5a5f43501705a74c532a65a
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Aug 16 00:35:13 2009 -0600

    Skipped some slow ode tests and fixed undetermined coefficients tests

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e8641acc2bad996ece506a6a9f485398270a7fe7
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Aug 15 23:26:05 2009 -0600

    Added docstrings to all ode.py functions.

    This includes adding a docstring to every internal
    method, including an explanatory docstring on each hint function
    explaining the ODE solving method employed and giving an example.

    In addition, I added docstrings to all internal functions so
    that you can tell what they do.  I also added an extensive guide
    to the module docstring on how to add new ODE solving methods
    using the hints engine.

    Also created ode.txt in the Sphinx docs that pulls in all of the
    relevant docstrings.

    This commit also adds simplify key to dsolve(), which lets
    you disable constantsimp() and function solving.  Also, dsolve()
    now will put the NotImplementedError object in the dictionary with
    hint='all' instead of failing if a method raises it.

    And I finally removed all of the code from the old module.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 57385af2742649f9a7ab7393094073077a1bd5a6
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Aug 15 23:20:54 2009 -0600

    Added some more tests to test_ode.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6176c1fb93facddbf859c83690c05f8c6119350e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Aug 14 17:15:50 2009 -0600

    Implemented working version of undetermined coefficients and tests

    A few of the tests are commented out because a bug in matches prevents
    classify_ode from recognizing it as a nth order linear ode.
    See issue 1429.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ef4180c2488fb22402ae745196200608d42a7a93
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Aug 14 17:14:55 2009 -0600

    Added *args and more docstring to numbered_symbols

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e12fb20c2405b4fdcac8dff980c0b6637c46ec06
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 13 00:07:45 2009 -0600

    Refactored old ode tests into one test and upgraded checksol()

    checksol() now works with most 1st order implicit solutions.
    Thanks to Chris Smith for suggesting the new method that it now uses.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 32391d5ba1b55642e3cc1303667d6bdaf564498e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 13 00:06:22 2009 -0600

    Finished _undetermined_coefficients_match()

    It now returns a set of linearly independent solutions for the trial function.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5e7eaa612aa9bff05a84142830b5d959426b5729
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Aug 11 22:43:59 2009 -0600

    Added separable tests

    Also refactored some tests and fixed some ode code.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 354de9654e31847e5b8db5c0936febf3edcfb202
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 10 22:31:34 2009 -0600

    Several ode changes

    Add best_hint key to be returned from hint='all' that tells which hint
    is the one that the solution from 'best' came from.

    Fixed corner case in homogeneous coefficient solver.

    Fixed several tests.

    Started adding separable equation tests.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2829caf0d32359a6dfe6814a464ad741262a1392
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 10 22:29:15 2009 -0600

    Made wronskian work with empty matrices

    This is necessary to apply variation of parameters to first order odes,
    such as f(x).diff(x) - sin(x)

    The determinant (and thus the wronskian) of an empty matrix is defined
    to be 1.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit dd2997ad8fd471d8af44c6731a9193d336df9a81
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 10 09:54:33 2009 -0600

    Fix all existing ode tests to pass

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d24dcd144a9b0d47461e8fc6442eb3fd080636f1
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Aug 8 21:46:01 2009 -0600

    Fix for issue 1429

    match was not matching certain expressions because Add.combine_inverse
    was not accounting for un-distributed minus signs.  The fix is to call
    expand_mul() in that function.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d212e220acd2a64bebb66b8c7cd31bbdaf10ce70
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Aug 8 10:23:41 2009 -0600

    Started work on undetermined coefficients and other bug fixes

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 309f105fc01a91401ee4ec55d671192a56e69659
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 6 19:11:09 2009 -0600

    Rewrote ode module using hints

    You can now choose among the various methods for solving an ODE when
    using dsolve, which is useful as many ODEs fit more than one form and
    the different solvers will often return solutions in slightly different
    forms.

    Use classify_ode() to find the hints matched by an ODE, and pass the
    hints to dsolve as dsolve(ode, func, hint=<hint>).  There are also other
    features such as meta-hints and a method for choosing the best of all
    possible solutions.  See the docstring on classify_ode for more info.

    This also highly restructures the ode solving engine, moving matching
    (classify_ode), solution solving (odesimp) and even integration
    (_handle_Integral) into their own functions, and giving each hint its
    own helper function (ode_<hint name>).

    This is still a work in progress.  There are still some bugs to flatten,
    quite a bit of documentation to write, and some code to clean up.  But
    for the most part this the hints engine works with this commit.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3a7f440c86117f17f3fcc1e89c8a90c7d334ced9
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 6 15:09:13 2009 -0600

    Made Integral.doit() work for nested Integrals

    This also changes piecewise.doit() to handle non-Basic args and adds a
    simple Polynomial.doit(), for compatibility with tests.

    This aso fixes Integral.__getnewargs__ so that if x is an Integral
    instance, than x == x.new(x.__getnewargs__(x.args)) will always return
    True

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit cf781bcb2323a91fd0060b8df9e14de3ed40d451
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 6 11:11:13 2009 -0600

    Changed AssertionError's and TypeError to NotImplementedError's in solve

    This way, subroutines only have to check for NotImplementedError to see
    if an solve() fails.

    See issue 1425

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b405eca6d087a67b5846784cbbb725b9bbda0e33
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Aug 6 11:08:17 2009 -0600

    Modified Basic.has_all_symbols() and Basic.has_any_symbols() to work with tuples

    It also now works with noninstances of Basic, such as None.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 03f56ccc82cfe15e5bed5fcdf896fd1231f49a52
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Aug 4 00:12:10 2009 -0600

    Changed Integral so that it can evaluate only the upper or lower limit

    You do this by doing setting the other limit as None, as in
    Integral(x**2, (x, None, 1)), which returns 1/3.  I did this by
    modifying _eval_interval in Basic, so that now has the same behavior.

    This also changes the printer to print an empty string for any empty
    limits.

    It fixes Integral._eval_subs to account for None upper or lower limits

    Also added tests, including printer tests.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6357b74ff29e29a8652494f8ea9cb33a0b6c742e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 3 21:00:08 2009 -0600

    Moved last remaining ode tests in test_solvers.py to test_ode.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8c7f5005920e6c8aa465afea45b7cd940ce052fb
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 3 20:56:27 2009 -0600

    Fixed imports in ode.py

    Also started to do more work on hints engine.  Changed Equality to Eq
    everywhere in ode.py.

    Fixed deriv_degree to work properly with the func argument and added tests.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2c7147f4c679a77ace199e2ccaaad5ba6bf6bd4f
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 3 14:09:33 2009 -0600

    Moved all ODE solving code to ode.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 898bc42648db3f4a16ff9e5ee117931187e581a3
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 3 13:52:41 2009 -0600

    Started copying match expressions to classify_ode()

    I have also extended the docstring to represent what is to come.
    I haven't tested any of the moved functionality yet.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8ebc33b6fb494f7ddec04e76b939a0a1b929cc92
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Aug 3 11:50:20 2009 -0600

    Added solver for Liouville ODEs

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b81c4e71a5f7ed49135bb7ca503b72f7ec26c714
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Jul 30 11:18:55 2009 -0600

    Use list comprehension for newargs in constantsimp

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4f674c5e116b1859d793dca77b53c82cfb640323
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Jul 29 11:52:10 2009 -0600

    Started to get homogeneous norder to work with RootOf roots

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 749ca541a42505a002fade81d59c3775aff623ff
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Jul 28 15:17:15 2009 -0600

    Added beginnings of variation of parameters

    This technically works, but the wronskian needs to be simplified better.
    Also, it hasn't been highly tested yet.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 779c1af24a9462040b6c30d32e4ef9d3becd3761
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Jul 28 13:48:44 2009 -0600

    Added an XFAIL separatevars test

    This is of a case that requires advanced factoring (factoring of
    non-symbols) to separate the variables.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 266b5ce02fc07aef5563c6ac9f86707cba6bcd99
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jul 27 19:41:33 2009 -0600

    Changed constantsimp renumbering to renumber in printing order

    Also started implementing variation of parameters.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3b9fba3dd33851ee4dab14fc8935b898f6e76a2e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 19 17:18:49 2009 -0600

    Added nth order linear homogeneous ODESs with constant coefficients solver

    This adds several tests, including all homogeneous ode tests from
    Ordinary Differential Equations by Tenenbaum and Pollard book

    with '#' will be ignored, and an empty message aborts the commit. # Not
    currently on any branch. # Changes to be committed: #   (use "git reset
    HEAD <file>..." to unstage) # #	modified:   sympy/solvers/solvers.py
    sympy/solvers/tests/test_ode.py #	modified:
    sympy/utilities/iterables.py # # Untracked files: #   (use "git add
    <file>..." to include in what will be committed) # #	.coverage
    patch

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 96bb0cee9abc43b9e310d065236ef0969f37ac79
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Jul 15 11:24:07 2009 -0600

    Added constantsimp(), a function that simplifies arbitrary constants

    This is made to be an internal function for dsolve().  It does
    simplifications like x + C1 + 2 => x + C1.  It also renumbers the
    constants in an expression, so x + C4*x**2 + C3*x**3 will become
    x + C1*x**2 + C3*x**3.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ecaa4998e5759bfd6818649ed9b6db4028d54f63
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 19 14:40:11 2009 -0600

    Small fixes to dsolve

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 235f0970523abb35d27218db16bc2eb94f5ddb71
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 19 14:39:17 2009 -0600

    Started adding docstring for classify_ode

    The function will classify odes in the new hints engine that is to come.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 32f91cf7d7fbca74ce6d076baa2adcdb3304b057
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 19 14:37:07 2009 -0600

    Started solver for nth order linear ODEs with constant coefficients

    Tests will come in a later commit.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d8e727fc245a45ac1da092dea86f7d2d1d9a78f1
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 19 14:35:49 2009 -0600

    Added solver for 1st order separable differential equations

    This replaces the Bernoulli corner case.  Tests will come in later
    commits.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b5395c2675f649f6857ce0ee2ad1e971860eeaca
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 19 14:34:30 2009 -0600

    Clean up some comments and docstrings in solvers.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a7f1a38b55533f6b252908174053a59619f6195f
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 19 14:32:08 2009 -0600

    Moved numbered_symbols from cse_main to utilities/iterables

    Also made it work with Wild and replaced similar function in
    homogeneous_order.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2d5b68bbb8eabae168214910190e262b5f5cb465
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Jun 27 11:52:46 2009 -0600

    Added function separatevars, which separates functions multiplicatively

    Namely, it will attempt to rewrite a fuction F(x,y,..) as P(x)*Q(y)*...
    Also added tests.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit dc6fd249e47d9c96ef46f489e9264af3b243d476
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Jun 4 18:28:11 2009 -0600

    Fixed Function.is_commutatative

    Function now returns is_commutative False if any of the arguments are
    false.  Also added some tests.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6e7f991d98fbba008a4fd72933b594b866b3ad4a
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun May 31 21:43:49 2009 -0600

    dummyvar in homogeneous_order now works for any number of symbols

    dummyvar is an iterator of dummy symbols.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit eb664485863a12c3e131b840cb3a5d7b6fa4b69c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun May 31 21:40:13 2009 -0600

    Changed assumePosReal to assume_pos_real in homogeneous order solver

    This was changed in logcombine as per Python standards, and needed to be
    changed here.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit cbf1c966446ec09dc5e38d51f3e37f997d609a2a
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 29 23:36:47 2009 -0600

    Finished up first order homogeneous differential equations

    They now properly return an Integral class if the equation cannot be
    solved explicitly.  Also, I added a ton of tests (every one from my
    text!).

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit dca49267c5faee2eca92727f42820a85ca89afa4
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 23 11:00:12 2009 -0600

    Small homogeneous_order fixes

    Updated docstring for homogeneous_order and added a test to help verify
    that what those new docs say is correct.

    Made homogeneous_order return sympified numbers, so that it can
    recognize that 0 is the same as S.Zero. Also added a test for it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0298aec8d2b08b58ad58a7f3d707777caa077c3c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 22 23:54:57 2009 -0600

    Rearranged tests in test_ode.py so that tests that should XFAIL now do

    There are various reasons that tests XFAIL.  See the comments for more
    info.  None of them are strictly the fault of dsolve.

    Also added trigsimp to checksol.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 119eee61952212f27a8bb1c0ae89f337ed4ecc0e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 22 23:50:34 2009 -0600

    homogeneous_order now works for symbols that are functions

    I have put stringent requirements on the functions, perhaps more so than
    is really necessary.  The functions must appear in the expression with
    exactly the same arguments as provided in the symbols to be checked.
    Also, every symbol in the argument of the function must also be a symbol
    called in symbols (I am not sure if this is truly necessary, but I want
    to play it safe, and so far, only dsolve() uses this, which does nothing
    even close to this).

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1540b760b33dc29164cf0ee2746e36e0c4dcfb88
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 22 23:45:33 2009 -0600

    Added first order homogeneous differential equations support

    These are equations of the type y'=f(y/x).  These can be solved
    generally.  I will add more tests later.  These all can be transformed
    into two different solutions with two different integrals.  The function
    heuristically attempts to return the best one.  The integrals for these
    functions are usually hard ones, so sympy often fails at them or returns
    results much larger than they need to be.  Because it attempts both
    integrals, usually at least one of which is difficult, these can take
    longer to compute than other ode types.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c6ce35d44503a0f10700fe78ea048150b0253e87
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 22 16:19:12 2009 -0600

    Changed homogeneous_order() to accept any number of symbols

    Also update tests to reflect this.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2587d8d9f9001e11190982d6746a6e6ac57ce264
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 21 11:34:42 2009 -0600

    Serious fix in exact engine

    The test was not even correct (I was taking a.diff instead of r[a].diff,
    so it would always pass.  I was also taking the wrong diffs anyway.  The
    tests worked because they were exact, but any non-exact equation that
    fit the form f(x,y)+g(x,y)*y'=0 would have returned a wrong result.
    This has now been fixed.  When I get homogeneous in, I will have tests
    of several functions of that form that are not exact.

    Also added note on future return of RootOf from solve.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit af84a9d5d6633b76bfad24cb51edfb4a61449bce
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 21 11:33:56 2009 -0600

    Changed doctest in ratsimp so that it can actually be tested.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8fbb041121e14c02000d07c0e481250ed0aaa69c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 21 10:39:43 2009 -0600

    A bunch of small changes

    Fixed white space, added some comments, fixed corner Bernoulli case,
    removed TypeError check in dsolve, fixed redundant function calls,
    removed duplicate C1 assignment, and made some spelling and grammar
    fixes in solvers.py and simplify.py. Some of these are changes from
    British English to American English (behaviour).

    Added an XFAIL test for when it would be nice to expand an expression with
    an Integral in it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 547874d9bc75355e133c1c56c2c2db2632dd322d
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 21 00:07:59 2009 -0600

    Added homogeneous_order function

    Read the docstrings for more on this.  It returns the order of a
    homogeneous function and None if it it is not homogeneous.  A function
    f(x,y) is homogeneous or order n if f(xt,yt) == t**n*f(x,y).  This only
    works on functions of the type g(f(x), x), which are the types of
    functions that dsolve will be passing to it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f035128aca7e9d718a508561579d19fa13135646
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 16 23:19:41 2009 -0600

    Small dsolve fixes

    Made x0 and y0 dummy variables, minor updates to dsolve docstring, and
    change map(Symbol) to symbols

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3aa5b71193458d2ed3aea8d8a8893164a6fc51e3
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 16 17:23:25 2009 -0600

    Added a test of an exact equation that returns the wrong answer.

    The equation is exact and it fails, but it is also homogeneous, so it
    should be caught by that when it is implemented in the next few days.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b045283ba01e0e6d672d90aa59da2728d1763df2
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 16 17:22:48 2009 -0600

    Changed all tests so that they pass with dsolve returning Equality's.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 447f44cfc93bbe693a55cf4cb50e01c5723c5130
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 16 17:21:03 2009 -0600

    checksol now works even when the solution is not solved explicitly

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6232897574dd8b935700bc15d892a1afbaac58ba
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 16 15:38:48 2009 -0600

    Small dsolve changes

    The changes are a minor reformat to dsolve docstring, dsolve now returns
    an Equality in all cases, added another except to not bother solving the
    solution, and changed C.log to log, since log was imported.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 098885c7ce86cea8b23027a076b68a68d5f539b4
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 16 15:14:46 2009 -0600

    Cleaned up the tests in test_odes.py.

    Started moving tests from test_solvers.py to test_odes.py.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a3e1f9731f9f707648b22bd4f6b7a8cfadb761d8
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat May 16 12:06:08 2009 -0600

    Made the exact differential equation solver stronger

    It is now capable of solving equations with singularities.

    Also added a test for an exact ODE with singularity

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b7f31ced33eaf8cd6449696970e06a8aa4169cd3
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 15 20:15:50 2009 -0600

    dsolve now attempts to solve exact solutions explicitly for f(x)

    If it can't it will just return an implicit Equality.

    Also added a test for an exact differential equation whose solution can
    be solved explicitly for f(x)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 53c43be219b5150807c5a5fef87deec0ae07a62c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 15 19:51:04 2009 -0600

    Changed y to a dummy variable

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 53130390c9a80103ce321acdb8b423c7db40138e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 15 12:13:55 2009 -0600

    Added Exact Differential Equation Case

    Also added test for exact differential equation.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1f75574a3ce5e61a3bc6adf00f6f5d3672ee8a9e
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri May 15 12:13:16 2009 -0600

    Cleaned up Symbol('C1')'s.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7df83178615136eb73aed9646c2b0189d1f16df4
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Aug 8 16:34:11 2009 +0545

    use swap_back in solver and add a test.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 126d72185050558aa9d5aee64fbba088fd091c35
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 20 12:47:48 2009 -0600

    Added a docstring to _logcombine

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 842db59db320debf85cea6c5bf6a457c4331a48f
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Jul 11 17:29:04 2009 -0600

    Added function logcombine

    This function takes expressions like 2*log(x)-log(y) and turns them into
    log(x**2/y), assuming that the arguments of the log are positive and the
    coefficients are real.  You can override these assumptions by doing
    assume_pos_real=True.

    The function is very robust.  It even does equalities and logs inside of
    functions (like acos(-log(x))), as well as logs multiplying each other
    (log(x)*log(y)), though combining can be arbitrary at that point
    (log(x**log(y)) or log(y**log(x))).

    This is roughly the inverse of expand_log, though not strictly so.

    This also adds several tests for the function, including an XFAIL test
    that is similar to Issue 1274; match fails because 2/3 is used instead
    of Rational(2,3).

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a1cb9cb315e1079fdc3f851cfd46290e2a58e665
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Tue Aug 25 14:22:41 2009 -0700

    Import any so that Python2.4 and lower work with block diagonal code

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit cb82c561d0c8f9a710cc0c0c75c0be347335b1ea
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Tue Aug 25 11:29:11 2009 -0700

    Implemented block diagonal methods in Matrix class.  Improved doctests.

    Implemented:

    1)  Matrix.get_diag_blocks() -- returns a list of the smallest square matrices
    from the main diagonal.  If self is degenerately block diagonal, it will return
    a list with one element -- self.

    2)  block_diag(matrices) -- creates a block diagonal matrix given a list of
    square matrices.

    3)  Matrix.inv() -- added boolean keyword argument "try_block_diag" so that
    inversion of block diagonal matrices makes intelligent use of the block
    diagonal structure.

    4)  Added one empty line to all the doctests in sympy/matrices/matrices.py so
    that bin/doctest sympy/matrices/matrices.py no longer fails.

    These block diagonal tools significantly improve the speed of block diagonal
    matrix inversion, and provide easy ways to construct block diagonal matrices.

    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6e7b53c584c86324705e0a50fbe66ec9f818b034
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Tue Aug 25 11:20:54 2009 -0700

    Changed Matrix.lines to Matrix.rows throughout Sympy.

    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c0a37341702aeb79e1f96e0987e1da0bf16d0125
Author: Bill Flynn <wflynny@gmail.com>
Date:   Tue Aug 25 09:26:41 2009 -0400

    Quick fix for mul.py subs failing

    Fixed when old had x**n and self has x**m where n > m.

    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 65f802573e5963731a3e7e643676131b6a2500b8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Aug 24 22:25:23 2009 -0700

    Bill added to credits

commit 258ca2aeefa8dd8db84189db7731a12edc5fb7d9
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Aug 19 17:17:07 2009 +0200

    Use efficient integer representation across ask() method

    Using always this integer representation eliminates the need to convert
    between symbol and integer representation, which was a bottleneck in previous
    implementation.

    This represents a very big performance boost, query test suite becomes
    10x times faster on my lapton.

commit 7c899db35963da3d151215af68a4cc7cf4df8deb
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Aug 18 20:09:13 2009 +0200

    Efficient internal representation for DPLL algorithm.

    I did not delete any methods, but added new ones with _int_repr suffix.
    dpll_satisifiable uses by default integer representation.

    This represents a performance boost for all functions that make
    use of sympy.logic.satisfiable (e.g. query and refine module)

commit 4e5195d303eca6997c77b57144ee45829b70a2ba
Author: Bill Flynn <wflynny@gmail.com>
Date:   Sat Aug 22 11:55:47 2009 -0700

    Fixes Mul's substitution

    Lots of tests written. Previously it was essentially broken, now it works both
    for commutative and noncommutative symbols

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7fc20ee26e721c8ddec4596f99399c49edb9a397
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 22 12:33:39 2009 -0700

    Comment out doctests that fail on buildbots

    Currently several doctest examples fail on buildbots, so we just comment them
    out, until someone figures out how to fix it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2984a5b0add199650cc210b0e2c1cd31fc80a4aa
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 15 18:35:11 2009 -0600

    SKIP the test, that is platform dependent

commit 8afb96b72e891e0e9cd4134d0081ee3d914f6652
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Aug 14 11:52:50 2009 -0600

    Docstring added to _matches_commutative

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 9c26acdd665ddd21b31004679b86c009c1ff0d6d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 13 12:48:27 2009 -0600

    Doctest added to the AskBoundedHandler class

    It should be added to all methods, but for now at least the class docstring now
    has it.

commit 122a847cb63e6c20f9a11e690026b25ac200c88b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 13 12:35:22 2009 -0600

    Doctests added to refine_abs, refine_Pow and refine_exp

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 74bb3c79798d04e5a0a64eb67b015e8b6f315e2c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 13 12:28:56 2009 -0600

    How to write docstrings added to sympy-patches-tutorial

commit dd679c2751ac0900c47302fd6187ae9eea60918f
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 9 01:42:36 2009 +0200

    Implement refine module

    This module is responsible for simplifying an expression given
    assumptions on its objects.

commit 7bd9efdad156ebaa946f63c479b4136534e71e9c
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 16 19:14:17 2009 +0200

    Implement __mod__ in class Infinity

    oo % number now returns NaN instead of rasing an exception

commit a832947cfff1f72cc30f2760ffce9b1442fd0ba3
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Aug 10 09:11:05 2009 +0200

    queries module improvements

    Some code has been simplified, added docstring, bugs fixed and test added.

commit 0bad1e73564f269b4333b759c21ac1a0335a0dba
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Aug 10 09:10:52 2009 +0200

    logic module improvements

    Speed improvements and function fuzzy_not implemented

commit c4c6b50b9e3ce35cfe47fe6c299c09df8853c877
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Aug 13 13:58:35 2009 +0200

    Make sure that mpmath understands sympy numbers

    Implemented it for Integer and Rational, added tests for these and Real.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5be916dd1875cff5a1159acc1edb54d0dae9d322
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 9 18:53:35 2009 -0600

    Install assumptions and queries in setup.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e47d58e338fb379341eda76abfc5744e723871b0
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Aug 10 19:58:44 2009 +0200

    Add an option to run tests in random order

    Just run

    >>> sympy.test(sort=False)

    or

    $ bin/test --random

    This is to make sure that the test are independent of each other. The motivation
    to do this is that sometimes tests in sympy are failing if not executed in a
    certain order, see [1].

    [1] http://groups.google.com/group/sympy/browse_thread/thread/a0900b89e7b5000f

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f695f92dfe1e45e88eff5c14e22aebb39dfbf2a4
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Jul 24 22:24:48 2009 -0600

    Changed discriminant so that it requires a symbol.

    This allows you to find the discriminant of a multivariate polynomial
    with respect to one of the variables.  Also allowed symbolic polynomials,
    instead of just Poly's.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit dd61378e16470448084b4935d359d5d20bdc8989
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Jul 24 00:00:02 2009 -0600

    Added discriminant function for Polys.

    The discriminant of a univariate polynomial p of degree n is defined as
    n**(n*(n-1)/2)/a_n*resultant(p, p'), where p' is the derivative of p and a_n.
    is the leading coefficient of p.

    See <http://en.wikipedia.org/wiki/Discriminant> for more info.

    This is useful because the discriminant of a polynomial vanishes identically
    iff the polynomial has repeated roots.  For example, a quadratic a*x**2 + b*x + c
    has repeated roots iff the discriminant, b**2 - 4*a*c is equal to 0.

    This also adds tests.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 707238ace690990983cc9b2b8f6997e494d09b13
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jul 13 10:29:27 2009 +0200

    Fixed typo on sympy/printing/str.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 68bf004f23f0542a6138a6610385b00ef5f532cd
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jul 13 10:20:43 2009 +0200

    give arguments to print method

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2fa814e05af6cc94ab9ccc797a0e3113cba26c4c
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Jul 12 15:46:38 2009 +0545

    Edited expand docs

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2f306eccd5b1a91e573af0f7c7c14852a7adba7e
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sat Jul 11 08:59:25 2009 +0200

    use white space instead of comma in subscripts

    This avoids confusion with the comma derivative notation.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3a8825a09eb2db4e7497f550304c6cbb9c1632d7
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Tue Jun 30 10:39:34 2009 +0200

    mathml: test becomes easier to maintain

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8c3cdacc6619d3fb613cb1fc2e4dfa163c77c7a3
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Tue Jun 30 10:36:49 2009 +0200

    printing conventions: '__' as an alternative for '^'

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9192c559a82dceca3cf5d997c9ed8c145a38fbe2
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Jun 28 17:46:44 2009 +0200

    mathml: use mml namespace for Presentation MathML

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f32e796d6f600fa70ce05250b42e303ec6c4708d
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Jun 28 14:25:56 2009 +0200

    Issue 1477: fix for mathml

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9fae7dc707d6aeea36b05ec71d93c360411fb929
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Jun 28 14:25:11 2009 +0200

    fixed doctest in printing.conventions

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3ad645f4f6807871b5b5eca2e50879d85202368e
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Jun 28 12:03:58 2009 +0200

    latex symbol printing: greek sub- and superscripts

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 71369a914ebf78fb37d2c715679478ae04e04c70
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Jun 28 10:47:01 2009 +0200

    Pretty printer: multiple super- and subscripts

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e81f06a7d429f2d6bc648c06b4e4e14da0f539c3
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sun Jun 28 08:41:15 2009 +0200

    printing: Convention for super and subscripts

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 840ad800cdbf37a0ea8923bae7726098637e05b9
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Aug 5 14:50:32 2009 -0600

    Changed Basic.has() to flatten args and check isinstance Basic

    This is so it can work with classes that have things like tuples and
    Python ints in their args, such as Poly().

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3b70941496f4e3292ef0a1ecc6c4f8fa8fb97e9d
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Jul 23 19:49:23 2009 +0545

    Fix issue 1553

    When multiplying by i, the real and imaginary parts change positions;
    so must the real and imaginary accuracies.

    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Ronan Lamy <ronan.lamy@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 57b5b62a84e6c59313140e6f8b19f2acdd4bf363
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Aug 9 21:15:18 2009 -0600

    fpowi->mpf_pow_int and test that identified problem

    fpowi should be mpf_pow_int; a test that caught the untested code is also
    added.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b5d73a2e9da9561ca517e521da2d595c6b0a3762
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Sun Aug 9 00:22:46 2009 -0700

    Implemented code to expand negative integer powers

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 958242ba7159bbdd6637461f7542d13e8b22659e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 9 00:27:41 2009 -0600

    Fixes test order

    The patch:

    334b0a5 (test: run all tests containing any of the given strings in
    their path, 2009-07-27)

    introduced a wrong test order if the tests were executed using
    "bin/test sympy".

    This simple patch fixes it and now it behaves in the same way as before.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit eee2533b781d14b9b4b2d69f91199d211bc20192
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 23:04:12 2009 -0600

    doctests: make it run when passed a dir

    "bin/doctest sympy/" failed when doctesting the documentation, because sympy/
    is a directory. We'll now skip the directory.

commit 450d105a140da0dbbfd64bc20aa548c7bed1eef8
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Sat Aug 8 21:03:31 2009 -0700

    Removed .expand() in matrix_multiply, added doctests, alternate implementation

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c5396fbc2f294a76fbd93dd5e55919af5c8271d6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 14:01:49 2009 -0600

    gotchas.txt: unSKIP lots of doctests, that now work

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit e80d3e3e04df852a98fe8e7bf1ebfd06500632ee
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 13:30:59 2009 -0600

    doctests: Use normalize white space and ellipsis

    Previously this was only used in docstring doctests, but not in documentation
    *.txt doctests. This is now fixed.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit e5af9ab5598f6681db1a45240a0f07f6c2e4a5e7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 13:21:50 2009 -0600

    statistics.txt: unSKIP a test

    The test runs perfectly fine, let's test it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 0caa6ff6a627f78a8e6ef547ff841201e28b83ea
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 13:17:57 2009 -0600

    tutorial.txt: unSKIP some tests

    The tests should now pass just fine everywhere.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 2e08429a125691aea8b4f43432c46d02d829f685
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 13:12:47 2009 -0600

    Fixes all docs to pass doctests

    Now the default printer is always reset after each *.txt file run, so it made
    some doctests fail. This patch fixes it by the combination of 2 techniques:

    1) for just couple failures, it fixes the doctests
    2) if the whole *.txt would have to be rewritten, it sets the sys.displayhook
    to sympy.pprint, that way all the test pass fine and everything is explicit.

    Note that thanks to the previous patch, the technique 2) doesn't cause any
    failures in other files.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 00b731ad9f4e5032ced7108d752e74efdf8046d7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 12:22:01 2009 -0600

    doctests: make sure sys.displayhook is not touched by the doctests

    A little background: when testing *.txt, the whole file behaves like one
    docstring in a function, e.g. it shares a global namespace. Different *.txt
    files behave like different docstrings (in separate methods), e.g. they don't
    share a common namespace.

    The only problem is with sys.displayhook, that unfortunately is shared by all
    tests, so if you change it in one, everything that is doctested after that will
    have this changed displayhook.

    This patch fixes it by resetting the displayhook after each *.txt file and
    after each doctest. So now you can setup prettyprinting in anyway you want in
    the doctests/tutorials.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 7833cc1f276e0a949a07b14eb1bf0def57a30678
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Sat Aug 8 09:06:33 2009 -0700

    Added optional boolean argument to coeff to control whether .expand() is called

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9e8714af36efd687144cd476d81a20e3973f2d44
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 8 10:05:18 2009 -0600

    Fix the PYTHONPATH in make html

    Use the original pythonpath, just prepend ".." at the beginning. This allows to
    import sympy from the current repository, yet it allows to use sphinx if the
    user installs it into his own modified pythonpath.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit 2160061c0d26c5db89982757c9857d643ee7c5c5
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Aug 8 00:33:36 2009 -0600

    Made Add._combine_inverse account for nan from oo - oo

    This was causing problems with match returning nan instead of 0.
    This fixes issue 1540.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 698d40fbefd0229ed665213926afe6e7b453f16a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Aug 7 18:00:23 2009 -0600

    Fix the docs to pass

commit d0d80c459bcac9b86fff146726e9e0e9ec788652
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Aug 6 20:03:15 2009 +0200

    AssumptionsContext: fix some broken doctests

commit 334b0a50671f5c4cdea6aa0db32964695c10e9e8
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Jul 27 12:18:06 2009 +0200

    test: run all tests containing any of the given strings in their path

    This is much more powerful and user-friendly and allows things like

    bin/test core util

    which will test sympy/core/tests and sympy/utilities/tests.
    You can still use the old syntax.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 54a54d8932ad3dc55d886fd263299b84fbd5e245
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Aug 5 18:37:12 2009 +0200

    fix lambdify for conjugate of mpmath

    Also add a test, where a user ran into this issue. Minor whitespace cleanup.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 24d4636f99c5272f3b0d2ca12d6f9a7beaee7f2f
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Aug 6 18:00:14 2009 +0200

    Use a set for global assumptions instead of functions

    This way the namespace is less cluttered, it's slightly easier to use and more
    flexible.

    Some pedantic tweaks to docstrings.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit eb6ed8f0f4cb9c78a731a93df0a6cda4961fed2f
Author: Alan Bromborsky <brombo@GA.(none)>
Date:   Thu Jul 9 11:37:31 2009 -0400

    galgebra: fixes

    1. Removed redundant functions in GA.py.
    2. Fixed comments in GA.py
    3. Removed non-working section of testsymbolicGA.py.
       (GA part works but sympy scalar simplification broken with lastest version of sympy.)
    4. Fixed error in sphinx docs.

commit 468e23079d5cfaf2823768b90de67a15b111df17
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Aug 6 18:35:21 2009 +0200

    credit Ronan

commit ca5c8e626ebaa8f4387bb421c8e601edc9b891bf
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Jul 8 19:11:52 2009 +0100

    Use correct expand submethod in series code

    Mul._eval_expand_mul, Pow._eval_expand_multinomial and Pow._eval_nseries
    internally used excessively broad .expand() method instead of more focused
    methods. This degraded performance and caused disallowed expand hints
    to be applied anyway in some cases. This has been fixed and tests have been
    added for the latter issue.

    Simplified Mul._expandsums by having it only  be called with lists
    of Basic instances.
    Cut dead code in Basic.expand.

commit 5f36018a528c1e1c8b3d3017e466c169b7e19ca1
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Aug 6 01:15:22 2009 +0200

    Fix python 2.4 compatibility

    import "all" in queries/handlers/order.py

commit e5007d791f6651abf87c68c91dc2800fa933a3bc
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jul 21 20:27:20 2009 +0200

    Documentation for the queries module

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit 98dbda3cf557eda6a092047673ca345bfd01fa44
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jul 21 20:26:03 2009 +0200

    Implement a query module

    The old query system (.is_* properties) has some limitations:

        1. Can't assume relations. It is not possible to specify relations between different
            objects. For example, you can assume that x>0 and y>0, but you can't
            assume x>y. You also can't assume facts on expressions, only on symbols.

        2. Verbose code splitted across multiple classes. Each class must override
            query methods (.is_*).

        3. Extensibility. To add new assumptions you have to add code to
            the core

    The assumption system implemented in this series of patches relies on these
    principles:

        1. Assumptions are separate from objects. Assumptions are instances of Assume, which is
           a class that holds a reference to the expression and to the 'key' (what it assumes)

        2. Queries out of the core. No more .is_* methods. Specific queries are implemented
            as subclasses of QueryHandler, and the query function calls the appropriate
            subclass of QueryHandler

            query -> QueryHandler -> QueryNegativeHandler
                                  -> QueryIntegerHandler
                                  -> QueryBoundedHandler
                                  ...
           That way, creating new queries is a matter of subclassing QueryHandler and override
           the apropriate methods.

        3. Extensibility. This system can be extended with new keys and new types. See last tests
           for examples on this.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit a70f73b2ee1468b432c46156609797b7fedef641
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jul 21 20:24:46 2009 +0200

    New assumptions module.

    This is now independent from objects and out of the core. Assume is
    the basic object is this new model, and it is only a container
    (all logic is done by sympy.logic and sympy.queries).

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit a8c2fe524ba49896ec99b51e6681e067bfbe9458
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jul 21 20:22:59 2009 +0200

    Fix bug in Basic.is_number

    It used to return True with subinstances of Basic that had no
    arguments. See test added for a test case of the bug.

    I also squashed together two test cases that had the same name
    (and thus probably only one was getting run)

    Signed-off-by: Ondrej Certik <ondrej@fcertik.cz>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit 98befcc102bd2846fab29449a48fb5084c6f0835
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Jul 30 16:55:00 2009 -0600

    Added warning about things like Rational(1, x) in gotchas.txt

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 49180ffa5b59d8ed79cc121fb3684c3b9d369779
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Jul 29 11:59:12 2009 -0600

    Fixed a typo and added COSINE mnemonic to Gotchas and Pitfalls documentation

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7725fc3d278f9ddcc6c665645865f3826c146e3b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Jul 26 18:36:11 2009 -0600

    Changed XFAIL test to a passing test

    The tests was not XPASSING because it was not properly initializing symbols.

commit 85c0480afdd1ca5e1318cd3356986514287c052c
Author: Chris Smith <smichr@gmail.com>
Date:   Sun Jul 26 08:00:47 2009 -0500

    typo and new example

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit b8825d387bfc9f397c7bf84d031326f88ec6868f
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Jul 25 23:03:54 2009 -0600

    Added newline to the end of multidimensional.py

commit bce91df188a3b449e3a9e0d5bef4c19e9ab5a1a4
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Fri Jul 17 12:53:20 2009 +0200

    Enable testing documentation under doc/src/

    This was skiped for the 0.6.5 release since it had some
    unresolved bugs.

commit 73870aeaece6aa041299ca0946c2a6e0c2ce97fb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 16 14:04:06 2009 -0600

    .mailmap added

    This file lists name+email aliases, so things like

    git shortlog -ns

    show each person only once.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6539da22af60f01f5416816e814e624c4faee392
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 16 23:25:34 2009 +0200

    Start of 0.7 development cycle

commit 63b4fcbe4227a18b9150c7efae322d5d44c271e7
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 16 23:16:41 2009 +0200

    SymPy 0.6.5 release

commit 8ddc39c1e8a208bce0310163268b9b5a4e8cdb27
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 16 02:15:08 2009 +0200

    Start of 0.6.5.rc2 development cycle

commit 5cf20a0f0a59a4ec7981be3db54504f0761cc290
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 16 01:40:59 2009 +0200

    SymPy 0.6.5.rc2 release

commit db5ec5b333854d1d4ab4f6b5cf8ab0822910ecf7
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 16 01:23:08 2009 +0200

    Remove references to py.test in README

    py.test in not needed anymore to run the test suite

commit 719f432214b502140b12e2ef41724434ea5658aa
Merge: 6997900 02413ed
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 16 01:20:26 2009 +0200

    Merge branch 'master' of git@git.sympy.org:repos/sympy

commit 69979002c14d8b55232b0d6e810206fa0d9b7bab
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Jul 16 03:07:50 2009 +0545

    neg rational power with negative (rat and int) base fixed

    If, in the following expression, a is positive (so that -a is negative)

    (-a)**(-p/q) ................. [1]

    you cannot simply invert the base and negate the exponent, you have to
    watch out for the complex roots of the -1 which are

    (-1)**x = cos(180*x)+I*sin(180*x).................[2]

    When x is an integer (i.e. q=1), there is no complex part and there
    is no problem with inverting the base and changing the sign of the
    exponent. When q is not 1, e.g. if x=1/3 then (-1)**(1/3) is
    .5 + I*sqrt(3)/2 and [1] would be

    (-a)**(1/3) = (-1)**(1/3) * a**(1/3) = (.5 + I*sqrt(3)/2) * a**(1/3)

    and all is well. BUT if the 1/3 is changed to -1/3 you have

    (-1)**(-1/3) * a**(-1/3)

    and if you change those by inverting the base and negating the exponent
    you get

    (-1)**(1/3) * (1/a)**(1/3)

    and this is not right since (-1)**(-1/3) is the complex conjugate of
    of (-1)**(-1/3) as you can verify with eq [2]. So what should be used
    instead? The complex conjugate of (-1)**(1/3) which is -(-1)**(2/3)
    as you can verify by multiplying:

    (-1)**(1/3) * -(-1)**(2/3) = -(-1)**(1/3+2/3) = -(-1) = 1

    In general, for (-1)**(-p/q) we use -(-1)**(((-p)%q)/q), e.g. if the exponent is-1/3 the new exponent is -1%3/3 = 2/3, or for -7/3 we get -7%3/3 = 2/3, too.

commit 02413eddfbf042ac1eac4e1b211f7e163e03381c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jul 15 15:59:51 2009 -0600

    James and Ryan added to credits

commit 5dc111a620ebe7341d8300f45bc44667e64f9192
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jul 15 16:00:27 2009 +0200

    Updated year copyright in README

commit 82bf8b241f111b609ad1d4df20703c7d94abb5af
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jul 15 15:53:44 2009 +0200

    Update personal info

commit 66361dbb5e63f7bb044cc06226705dc5595485eb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 13 16:25:35 2009 -0600

    Don't run plotting tests if pyglet.gl fails to import

    On machines without opengl, "import pyglet.gl" raises an exception. So we test
    this and disable the tests if it fails.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Priit Laes <plaes@plaes.org>

commit dd32b23cfd8b8c659fc37e46954deacc43a02987
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 13 17:35:56 2009 -0600

    Makes bernoulli(1000) work in Sage

    The problem was, that mpmath.bernfrac(1000) returned Sage Integers that failed
    in our caching, which was caused by mpmath.libintmath.list_primes(1000)
    returning Sage Integers, which was caused by the code in mpmath.libintmath that
    used Sage's list_primes() instead of the mpmath one if Sage was available.

    The easiest fix is to just type the result of mpmath.bernfrac() to int and this
    is what this patch does. Maybe there is a better solution to fix mpmath to only
    return Python ints, but the current solution gets the job done.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit 009f272f40ecf7e4a5b97a61b250fc7bb64e2c11
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 13 17:08:45 2009 -0600

    test_sage.py: add more tests for "I"

    Previously one the "x+I*y" test failed due to a bug in Sage, so let's test this
    more thoroughly.

    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit 46cbc1721d3afeb82ccb319481d984c59b248a89
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 13 16:51:46 2009 -0600

    Refactor the test_sage.py tests

    The previous way to test them stopped working. So let's test with:

    sage -python ....

    as described in the comments in the test file. As before, if "sage.all" cannot
    be imported, the tests will be disabled.

    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit 6f4f8e4ec110c23eb2f2fb48363eb19af8f73ac1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 12 10:37:58 2009 -0600

    SymPy logo: use a transparent background

commit be1b010afc5a35d624dd2e53733f86ef6268bd9c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 11 18:56:58 2009 -0600

    Fixes several typos in the docstrings

    Like indentation problems and similar.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>

commit bb8a111ad149cf775b9ac400391bb4e3759f25db
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Jul 11 20:01:22 2009 +0200

    Start of 0.6.5.rc1 development cycle

commit 9dd413b15a57643e7db64be7e3c4631ca8031e56
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Jul 11 19:35:07 2009 +0200

    SymPy 0.6.5.rc1 release

commit 7c87c641766e6de49b989faf3804cf6d72afe327
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Jul 11 19:30:17 2009 +0200

    Skip testing documentation under doc/

    We agreed to stop using this feature until there is a consistent
    way of doing it on all python versions & platforms

commit da291986463739848f4992d2c24d527b6bb65b9c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Jul 10 18:15:48 2009 -0600

    Fixes utilities/__init__.py to only import any in python 2.4

    Changed utilities/__init__.py so that it only imports SymPy any and all for
    Python 2.4 or lower.

    Previously it was only checking that the second number in the version was less
    than 5, but this would end up not working in Python 3.0-3.4.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c4d8d65c3603374f655e7024d1fa25a1baae6a5a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 10 17:04:51 2009 -0600

    Fixes the imports to work in python2.4

commit 0e4bfd1a6fb4b3e4de6ae22a4644eb36baabe40d
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Jul 10 16:26:16 2009 -0600

    Changed variable names in Pow.__new__ so that b = base and e = exponent

    Also made a small fix to a comment in Mul.flatten.

commit 44a98b69d8dd7818a30258196404080b39a2bd31
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sat Jun 27 17:21:46 2009 -0600

    Made Add._eval_pow so that it pulls out a (-1)**n for integer n like Mul

    This means that it will pull out a -1 for odd powers and will canonize the
    order of the arguments for even powers.  This fixes issue 1496.

    Also added some tests.

commit 38b2ffd54514cdc09c21e47cb34985dc7e404490
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Jul 9 13:09:09 2009 -0600

    Manually imported everything in ntheory/__init__.py

    This removes the from module import * statements that were causing
    the variable i to be assigned to the global namespace, as well as
    the math, random, and re modules.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 44dc4965a9fa647f75346c2e2cee215c6853426d
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jul 9 11:38:17 2009 +0200

    Remove unused imports from core

commit 701c0f9c400416af71b6eb8e8681fae45f5630a0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 3 11:15:15 2009 -0600

    sympy/core: imports refactored to work with python 3.0

    Previously the sympy/core modules used hackish injecting of symbols to other
    modules, which even though was well documented and worked well in python 2.x,
    it doesn't work in python 3.0, because the interpreter is more strict.

    This patch removes the old way of imports and replaces it with the standard
    python import statements (at the beginning and at the end of all files), which
    works fine both in python 2.x and python 3.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e1962402c130bcd39092e702ad6274a352cffa7c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jul 1 12:23:18 2009 -0600

    basic.py: making docstrings more clear

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>

commit 8b1102b18bbc2c000cbf23df185bb6a41920f55a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jul 1 11:58:44 2009 -0600

    Docstring written to some methods in Basic()

    In particular: assumptions0, new(), compare(), compare_pretty(), func(),
    iter_basic_args(), has() and match().

    This raises the coverage of basic.py from 36% to 50%.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>

commit 73aa100f9629bca32e3030923be6e0b4c8444e08
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jul 1 00:22:32 2009 -0600

    Allow to use ellipsis in doctests and normalize whitespace

    Now it doesn't matter how you break multilines of output, as long as the actual
    text is correct.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>

commit 19d28de2f1e88af480f85acf91e1df53759c4c3b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 30 23:06:37 2009 -0600

    bin/coverage_doctest.py script written

    Use it like:

    bin/coverage_doctest.py sympy/core

    or

    bin/coverage_doctest.py sympy/core/basic.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>

commit b3368ea71205ea6bc925d51260742932c534087b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 7 22:08:51 2009 -0600

    Docstring for Integral.as_sum() fixed

    It broke the sphinx build, now it's fixed.

commit aad0e88e151b4dd1fb74d7221ce41d9cb4e70140
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jun 11 22:09:26 2009 -0600

    Integral.as_sum() implemented

    This implements the rectangle rule to (symbolically) evaluate an integral. This
    is useful for teaching Calculus. For numerical integration, one should use some
    efficient method from mpmath.

    See the docstring of as_sum() for more information.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 3e302c5c94c9ed94a8276804823d7bb3ad04f2c3
Author: Ryan Krauss <ryanlists@gmail.com>
Date:   Wed Jun 24 20:30:21 2009 -0500

    latex printing: Added the option to specify the matrix string passed to latex (smallmatrix, bmatrix, Bmatrix, whatever) and to change the matrix delimiter (paranthesis, curly braces, whatever). test_latex_Matrix was modified to test these new options. Tweaked defaults for matrix printing with inline=False.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 406dc776b9cc049a6aff75a153d2f0a9897c2584
Author: Ryan Krauss <ryanlists@gmail.com>
Date:   Thu Jun 25 08:39:17 2009 -0500

    Latex Printing: sorting _print_Add output using a main variable

    Latex Printing: added sorting _print_Add output by the exponents of a
    main variable mainvar with the option of also printing in descending
    order of exponents.  Both these options are implemented via _settings
    profile options.  Tests were also added for mainvar and descending
    functionality.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4ea8cb59c445f22e5b051d56dab79e0ff82b03a7
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Sat Jul 4 07:22:03 2009 +0200

    Tests for issue 1512

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 82d7a3691532703a903579299b443f7c3f43c3af
Author: Nicolas Pourcelot <nicolas.pourcelot@gmail.com>
Date:   Fri Jul 3 13:35:30 2009 +0200

    Exp1._as_mpf_val fix

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a030e7e3298d2c7a0e46b54212ec32ec7db65f40
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Fri Jun 26 15:44:49 2009 +0200

    Robust printing of latex sub and superscripts

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 31f39a9535b79e15c1e85d71022b0443bcafe2e5
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Jun 30 13:33:07 2009 -0600

    Made Sum._eval_subs() substitute the limits of a sum

    Also added a test.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 76fe35ae20f6afabb0fba70ee14270eea6e518a1
Author: Ryan Krauss <ryanlists@gmail.com>
Date:   Fri Jun 26 09:10:20 2009 -0500

    Factor out -1 from fractions in simplify if possible.

    Add functionality to simplify so that a minus 1 is factored out of the
    numerator and denominator of fractions if possible.  Change the
    results of solvers/tests/test_solvers.py test_tsolve1 so that the
    results have a minus 1 factored out of numerator and denominator.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7b2eaf86e20789a351a2ffe447ae3bcc93aafdc4
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Jul 2 11:45:59 2009 +0200

    implement mod for Rational and Real

    Implementation for Rational by Dale Peterson.
    Use _sympifyit decorator in Real.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 56dd102344ca59dc0c2c4be8defb8135283694f1
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jul 7 17:17:12 2009 +0200

    Start of SymPy 0.6.5.beta4 development cycle

commit dbc6ecc86c591c07ab847ae340a8cf83a287daef
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jul 7 16:46:16 2009 +0200

    SymPy 0.6.5.beta3 release

commit f8d417b21d66dfca421c118302e2184eef10be7d
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jun 29 12:55:16 2009 -0600

    Added a documentation document on Gotchas and Pitfalls and simplify module

    This is a compilation of things that are often done wrongly by people
    new to SymPy, Python, or both.  This also adds basic documentation for
    the simplify module (it is just docstrings).

    Many examples in gotchas.txt are skipped because doctest didn't test
    pretty printing and I wanted them to show up pretty printed.  If anyone
    knows how to fix it so they don't have to be skipped, that would be good.
    Note that some tests are skipped because the purposely demonstrate
    an exception.  For example, one example shows infinite recursion, and I didn't
    want to print the massive traceback.

    This also has a few minor doc related fixes, including changes to some
    simplify docstrings so that they autodoc correctly and removing "collect()"
    the simplify docstring, as that function doesn't exist!

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 765aabbd21f04cef0dd29d9bf53642d6a0f503ce
Author: Priit Laes <plaes@plaes.org>
Date:   Tue Jun 30 19:46:57 2009 +0300

    Added an example for variable separation.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0d7417c88b230c9902d0160ed5d7d636ee97d37c
Author: Priit Laes <plaes@plaes.org>
Date:   Tue Jun 30 16:21:13 2009 +0300

    Use operator.(add|mul) where appropriate.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 534eaf6348ffdb708ce1aef23c0a25356c3cb7e9
Author: Priit Laes <plaes@plaes.org>
Date:   Tue Jun 30 14:10:33 2009 +0300

    Some documentation work for describing solvers.pde

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 74d48a2b67d709fb218b252f5a255dda79c60cd1
Author: Priit Laes <plaes@plaes.org>
Date:   Mon Jun 29 20:26:04 2009 +0300

    Add pde_separate() and refactor _add and _mul to use it.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f12fdd23c3dbb9b3cbc9188f620a7cc9f670c16c
Author: Priit Laes <plaes@plaes.org>
Date:   Fri Jun 26 12:10:06 2009 +0300

    Added separation of variables for PDEs.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit bca05588178e3aae47938233e84c6fbf7da9e809
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jul 1 12:37:13 2009 +0200

    Call init_printing prior to calling the doctests

    Also don't test docs under doc/src/ if python version is less
    than 2.5. This is because python2.4 does not implement the
    SKIP flag. Other programs (like Django) solve this problem
    implementing their own doctest module, but we agreed that it
    is not worth, since we are about to drop support for 2.4

commit 00d1d0b0d80d3753262eba8a0e0cde61af4e1270
Author: Alan Bromborsky <abrombo@verizon.net>
Date:   Thu Jun 25 17:45:44 2009 -0400

    Geometric Algebra: fixes and updates

    1. Fixed multivector constructor option
    2. Added option to multivector project function
    3. Added options for multivector constructors
    4. Fixed multivector constructor options
    5. Added documentation for multivector project function
    6. Added documentation for multivector constructor options
    7. Added tests for multivector constructors and multivector project function

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 0ffaf649242f4876c591158d19f33a6b0b17ee0b
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Wed Jul 1 00:53:07 2009 -0600

    Added example of how to properly subclass StrPrinter

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 162e518e9e28403ba78d27b523e946beefa4d47e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 30 23:49:37 2009 -0600

    Disabling testing .rst doc until #1502 is fixed

commit 0ac63e1e4906c56132945cd1b1d99a918a3848e8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 30 23:12:16 2009 -0600

    bin/doctest: Only test .rst docs if we run the full doc testsuite

commit 455fbc31be140412a8eb370ea066458b7221ab99
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 30 23:39:31 2009 -0600

    bin/doctest: make .rst tests run again

    Previously they didn't run at all, because the SKIP condition was alway true.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 54a9ca90f8bb5afceab4a9ce74f9a2be95142e7b
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jun 30 09:02:01 2009 +0200

    Tests for evaluating powers with odd denominator in the exponent

commit 2ca28dfeea23471a04d7407f726d7cbee3a22734
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 29 18:50:00 2009 +0200

    More documentation for the logic module

commit 73b761d2db8b504a3574ab721782a19a6064e5cb
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Jun 27 17:54:22 2009 +0200

    Efficient DPLL algorithm implementation

    Also moved helper methods of DPLL that where previously in
    sympy.logic.inference to sympy.logic.algorihms.dpll

commit 7da88cf0cc6b9e0f43fc2238a66da995de8af03f
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Jun 27 17:50:23 2009 +0200

    sympy.logic refactoring

    Moved sympy.logic.kb imto sympy.logic.inference.

commit 01b1756a2dcd77457bbf6f47fc71efec0ad791fd
Author: Ryan Krauss <ryanlists@gmail.com>
Date:   Sat Jun 27 13:45:31 2009 -0500

    Fix issue 1495 could_extract_minus_sign for is_Mul

    With an expression that is a fraction, expr.could_extract_minus_sign() ended up
    relying on hash(self) vs. hash(negative_self). On 32 and 64 bit machines, these
    hashes were different, leading to different return values for
    could_extract_minus_sign. An is_Mul case for fractions was created to prevent
    could_extract_minus_sign from reaching the hash last resort.

    Added several tests to core/tests/test_basic.py test_extraction to test this
    approach.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 52352d361403b987e3f54123dab1c01b69d313d8
Author: James Abbatiello <abbeyj@gmail.com>
Date:   Fri Jun 26 19:34:08 2009 -0600

    Fixes `setup.py test` on Windows

    There are some assumptions in runtests.py that paths are separated by '/'
    characters. This patch makes the tests run.

    Also disables colors on windows.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit dffab3723c5790a1b399453d8188a060ce7b692b
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Jun 27 02:11:53 2009 +0200

    Added comment to register_optionflag statement

commit c20bdcab6cc84f48eb1ff416af136c798391df17
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Fri Jun 26 22:53:21 2009 +0200

    Import "any" in sympy.simplify.simplify

    This was done to achieve python2.4 compatibility, since
    it is a builtin only in python2.5 or newer

commit abd7f7f8f6b0f0aa522fec222bad881f728716cc
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Fri Jun 26 22:47:28 2009 +0200

    Fix testing the rst docs in python2.4

    This was done implementing the SKIP flag on module
    sympy.utilities.runtest, which is missing in python2.4

commit 1e93072fe2e7b22cf5e159768325a36fdf779310
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jun 25 20:47:31 2009 +0200

    Start of 0.6.5.beta3 development cycle

commit 63b83f1114107c76732f1ecedc51a504db41990b
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jun 25 20:45:12 2009 +0200

    SymPy 0.6.5.beta2 release

commit a7083f470f43efee4098f6a9a75721eea59d036a
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jun 25 20:29:42 2009 +0200

    Add the logic module (and its tests) to the installation script

commit 7963149e892b9457dedd100c6beba2d7f4c0521b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jun 21 23:27:31 2009 -0600

    Fixes the last failing test in test_gruntz.py

    The problem was that the exponentials were not automatically combined and then
    the substitution failed. A simple fix is to call powsimp().

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 15381cd16d59b73166c0e98df23b7c0dd94a9722
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jun 25 11:27:32 2009 -0600

    gruntz.py: improved code style

    Made a few code style changes like "e=f" to "e = f" to conform to the python
    code style guide.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e17663e6697c4c24103f610f4b3fb484dfd4fb78
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Jun 21 23:05:09 2009 -0600

    Skipped slow XFAIL test in test_gruntz

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4823b49c6fe0a0e3ed9e97e417cdaf16e5c8ac62
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Jun 21 22:46:08 2009 -0600

    Fixed nseries tests that failed without automatic combining of exponents

    They were related to Order.contains.  Also removed comment that was wrong.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fe4a7b6072462919bc58d3c11948cd3835b19fd1
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun Jun 21 19:51:59 2009 -0600

    Changed Mul so that it automatically combines exponents based on as_coeff_terms

    This changes it from only combining when the exponent would not be an Add,
    which didn't work anyway.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2fea550d5618e6350d537a7d9b06f224751b1fdf
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Jun 16 23:01:02 2009 -0600

    Refactored expand, fixing issues 1455, 1453, and 1445

    Expand hints are now much more specific.  power_exp, power_base, multinomial,
    mul, and log have replaced basic as the default hints.  basic remains as a
    default hint so it can be used for things that don't fit into those other hints
    but needs to be automatic.

    All expand functions include a deep keyword argument which determines if it
    passes on the expand hints to the inner parts of an expression.

    I added expand_mul, expand_log, expand_func, expand_trig, and expand_complex
    functions to make it easier to only expand with those hints.

    This also changes a few other things internally.  expand_hint functions no
    longer return None if they do not expand; they return the expression.  Mul and
    Add now have basic expand_hint functions that expands through the terms of the
    expression.  This replaces similar code in Basic because not all Basic
    subclasses works with class.new(*class.args) (e.g., Poly).

    This fixes all the tests that it made fail, either by changing the test to an
    equivalent expression or by changing the expand calling routine in some code
    somewhere.

    The integration engine relies on expand(log(x**2)) => 2*log(x) working always,
    even though it is technically only true when x is positive.  This keeps the old
    behavior.  Hopefully, it will be easier to fix when we have the new assumptions
    system.

    Also cleaned up code in powsimp.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8cbcca6e3a891e2753fe554d606eedfb8f7ec09a
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Mon Jun 8 23:48:42 2009 -0600

    More work on removing automatic combining of exponents

    This fixes all of the failed tests except for test_nseries, which I cannot
    figure out.  It includes an improved powsimp function.  powsimp can now combine
    exponentials and bases separately.  Use powsimp(expr, deep=True, combine='exp')
    to get the old automatic combining behavior on expr.  I have added powsimp to
    several places, mostly concerning nseries and limits, to ensure that algorithms
    that need this behavior get it.  If you need the old behavior, use this.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3669171e8e80442e8e377085fbf4e56f915438ad
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Jun 2 14:13:12 2009 -0600

    Changed Mul class so that it does not automatically combine exponents

    It does this unless the exponents are numbers or if the combined exponent
    would not be an Add (e.g., exp(x)*exp(2*x) still goes to exp(3*x).
    This DOES NOT fix failed tests.  It is a preliminary patch.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6f67d8d96675e7754042a3b4e3f32bf4b1b72aae
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Sun May 31 22:14:03 2009 -0600

    Changed ".expand" to ".expand()" in docstring

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 01266587e2011ea4d9365664a09a02b051727954
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jun 25 12:45:59 2009 +0200

    Start of 0.6.5-beta2 development cycle

commit 11066c95855b70afe4bc6c996b052ef04577d79b
Author: fabian <fabian@debian.(none)>
Date:   Thu Jun 25 05:06:18 2009 +0200

    sympy 0.6.5-beta1 release

commit 78114aec43c77a475365834e84887069fa58938b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu Jun 25 01:06:22 2009 +0200

    Fix spelling in doc/src/modules/galgebra/GA/GAsympy.txt

commit 41c97fb1c322689e3500698060ef7e06ad9fec7d
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 23:48:47 2009 +0200

    Added Ronan Lamy <ronan.lamy@gmail.com> to the credits

commit 5d92a39b5a2da8556d5308e106ef1e4cfc525851
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 23:38:38 2009 +0200

    Update bin/test_pure_plotting to use git instead of mercurial

commit 77468e4e478dee3cdb9b2dc76274eaaf8630ccf3
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 23:17:33 2009 +0200

    Remove dead code in sympy.logic.boolalg
    and extend test coverage

commit f2aaf721ede0af6a75038e3a1d8e8341d03f1fd2
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 22:56:02 2009 +0200

    Update bin/test_pure

    Changed repo from mercurial to git and added a note about pbuilder's
    availability

commit a107ff59b777f392bf60ed312197a50a83148328
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 22:14:06 2009 +0200

    Sort arguments in sympy.logic.boolalg.Equivalent's constructor.

    This way two Equivalent objects are the same if and only if
    they have the same args. This fixes an xfailed test.

commit da3efeb9c4e0ea394cb015d1c6c074604792a4b3
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 21:59:21 2009 +0200

    Implement Nand and Nor boolean functions in
    sympy.logic.boolalg

commit 8cfa62d33a3ff23d71e055d7d2d9fc10b5e55d53
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 14:01:10 2009 +0200

    Warn about module coverage not installed
    Also added a note about output being located in covhtml/

commit 126c5d464d757f48ae58e5ab4ff732a079552ca7
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 15:58:37 2009 +0200

    Full test coverage for sympy.logic

    I raised test coverage to 100% (with the sole exception of
    sympy.logic.utilities.dimacs.load_file) by writing new tests,
    correcting bugs they uncovered and replacing dead code branches

    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>

commit 5f616e74e0d09d6e856fb5daec658f6a2fcc1bd3
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed Jun 24 14:47:44 2009 +0200

    Implement Xor (exclusve Or) class in sympy.logic.boolalg

commit b09c534c0a3bb0359329f4fce8df5b3fe5625ccf
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jun 23 13:30:28 2009 +0200

    Eliminate deprecationwarning in Equivalent.__init__

commit 53fcc68057365f8d763c8b498f7cfffc4c283ce1
Author: Nicolas Pourcelot <nicolas.pourcelot@gmail.com>
Date:   Fri Jun 19 01:28:18 2009 +0200

    Matrices:Integer must be imported (issue 1481)

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit f467bba8e4034fc435a94d20fd91bf55c1d95bbe
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Tue Jun 23 13:28:21 2009 +0200

    Sync examples/advanced/pidigits.py with last version of mpmath

commit 8a91767abf269a8832ef3e4ae2555e28ab863fe2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 22 21:52:49 2009 -0600

    Documentation added to coverage_report.py

commit ad28b11526ec3a2fb4383655a1b824f76d55d9c0
Author: Ronan Lamy <ronan.lamy@gmail.com>
Date:   Mon Jun 22 20:13:54 2009 -0600

    Coverage script added

    Just execute:

    bin/coverage_report.py

    and then go to covhtml/index.html

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit aa50a1222a165c356d3b5c56366d3ee9b88a3f0f
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 22 13:49:23 2009 +0200

    Revert "Fix testing the rst docs under python2.4"

    It made the buildbots fail because of http://bugs.python.org/issue1293741

    That but did not occur however on my machine (OS x)

    This reverts commit d4b454905f9d31875463d2213fbc085c0420457b.

commit d4b454905f9d31875463d2213fbc085c0420457b
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu Jun 18 14:15:22 2009 +0200

    Fix testing the rst docs under python2.4

    This was done backporting some features from python2.5, notably the +SKIP
    flag

    A test was changed in tutorial.txt to make it work under python2.4

    Also hooked pretty printing to compare output of tests

commit 8c0714a532d3f84a34af0cef29193c500eb20214
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 22 12:48:02 2009 +0200

    Fix spelling in doc/src/modules/logic.txt

commit 2c78aa870dc84c22cc9c0bf4cfcc6d91f35106e4
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 22 04:49:39 2009 +0200

    Extend test coverage in sympy.logic.tests.test_inference

commit 778ae7a56078595f7a25746e32f218e4134e260e
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 22 04:44:46 2009 +0200

    Fixed a bug in DPLL algorithm (sympy.logic.algorithms.dpll)

    This bug made dpll return False for sentences that where satisfiable.

commit 1e14e77881c91c955fc133024984259d7b5fe132
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 22 04:34:40 2009 +0200

    Extend test coverate of sympy.logic.boolalg

commit 38190e855dc058b0d62e425b1a3cccb5e90fb0ac
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 22 02:09:28 2009 +0200

    Make sure arguments accept a substitution in Basic.subs

    This fixes an xfailed test in sympy.logic.tests.test_boolalg.

commit db7d03adb4f7437da7d5925b89469c4982a5b2b0
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Jun 22 00:56:04 2009 +0200

    Documentation for the logic module

commit aca3e414b0fdc49b6d0f54933c15e1b0e1fa99e0
Author: Priit Laes <plaes@plaes.org>
Date:   Fri Jun 19 17:16:43 2009 +0300

    sympy.polynomials has been removed from Sympy.

    So lets get rid of its docs.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit d0336e04d93acfe3e3aee5cb93436f4670a43d85
Author: Priit Laes <plaes@plaes.org>
Date:   Thu Jun 4 21:24:48 2009 +0300

    Fix more warnings reported by Sphinx.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit d215e6bfe10ecc5aa32e53a94bbf6a79e035f90a
Author: Priit Laes <plaes@plaes.org>
Date:   Thu Jun 4 21:16:52 2009 +0300

    Fix errors/warnings reported by Sphinx.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit 66ddde4b7cc59de5428ef2d21e41cb81f2b73237
Author: Priit Laes <plaes@plaes.org>
Date:   Thu Jun 4 20:59:39 2009 +0300

    Fix Sphinx complaints about formatting.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit d1c12695cbdd92e88ae362df69f8bc0f53b2a280
Author: Priit Laes <plaes@plaes.org>
Date:   Thu Jun 4 20:48:40 2009 +0300

    Change references to old Mercurial repo to git.

    Patches-tutorial seems to need a rewrite, though :(

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit fc47499aca9c64ba83130344c468ceb1106ae11b
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Jun 20 16:03:39 2009 +0200

    Enhacements for the logic module

    - Add support for calling And, Or with 0 or 1 argument.

    - Import only specific methods in sympy/logic/__init__.py

    - Also added some tests and function logic.utilities.dimacs.load_file
      for loading DIMACS CNF files

commit 07b339f820bf87ccf4c8676432486890fd89ca41
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sun May 31 23:22:27 2009 +0200

    A new general-purpose logic module.

    This is a replacement for sympy.core.logic and will be used
    extensively by the query module. The old logic module can be
    removed once the old assumption system is removed.

    Contents
    --------

      sympy.logic.boolalg
        - Operators for boolean algebra on symbols {And: &, Or: |, Not: ~}
        - some useful methods, mainly used to convert expressions to
          conjunctive normal form (CNF)

      sympy.logic.inference
        - Rules for inference in propositional logic. Main method here is
          satisfiable(expr), which checks satisfiability of a propositional
          sentence (for now using dpll algorithm)

      sympy.logic.kb
        - Definition of a knowledge base

      sympy.algorithms
        - some algorithms used by higher order methods (just DPLL for now),
          but in a future we should also have Quine-McCluskey for simplification
          of boolean expressions

      sympy.utilities
        - some utility methods, notably a function to convert cnf file into
          sympy expressions

    Comparison with sympy.core.logic
    --------------------------------
    This new module has a wider range of applicability. It is also better
    integrated into the sympy object model

    Performance
    -----------
    No performance studies where done.

    Reference: Most of the methods in this module are implementations of algorithms
    described in the book "AI: A modern approach", http://aima.cs.berkeley.edu/

commit f12d267b3c9e43b8bfb319dffa9035c54ea356ad
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sun May 31 23:47:46 2009 +0200

    Add support for bool types in sympify.

    Before of this, sympy would convert True --> S.One, False --> S.Zero,
    but with the logic module with classes inheriting from basic, I need
    to manipulate boolean expressions, so converting booleans to S.One
    and S.Zero is in my oppinion wrong because of conceptual reasons
    and efficiency.

    The only module that used this behaviour was functions.elementary.piecewise,
    and was adopted to use the new one.

    Also added tests.

commit 4b4139fb3d6244523e6ddf50b069aa66e13e9605
Author: Ted Horst <ted.horst@earthlink.net>
Date:   Wed Jun 17 19:05:53 2009 -0600

    Fixes precision so that sympy.mpmath.runtests() works.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f679ef1398524d433e18398a4e2e98e01de4d414
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sun Jun 14 21:41:16 2009 +0200

    Test also documentation under doc/

    This was previously untested, only docstrings where tested.

    Implementation does not follow convention used by test in docstring and test files, where you have a runner that encapsulates the test and prints a nice output, it simply tests using doctest.testfile. It is not pretty, but at least we have the docs tested.

    To test the docs, issue `python setup.py test_doc` at sympy's top level directory.

    Most of the changes are derived from the fact that now pretty printing has changed a lot since the docs were written

    Changed some printing examples that followed the syntax print_something to print something (print_python(expr) -> print python(expr)) because doctest does not tests the firtst correctly (it adds a None at the end).

    Removed WildFunction docs in tutorial.txt, as WildFunction seems to be broken. See issue #1350 for more info

    I also modified the match examples so that they are not platform-dependent

    Removed :input: markup. There is no need for this, sphinx recognizes code blocks

    Had to add some empty lines to modules/evalf.txt so that doctest recognizes correctly code blocks

    Removed references to sqf_part, that function does not seem to exist

    Also had to convert files that did not follow unix-style line ending (modules/evalf.txt) because doctest did not like them.

    File doc/src/modules/evalf.txt takes a lot of time to complete because it has several tests that are quite heavy on computing. I did change the precission on one test (from 40 to 20) to make it a bit lighter.

    Fix for failing test in polynomial.txt under amd64 by Ondrej Certik.

commit f9b9da0b8bda808693f1f4229f4e8183885eea36
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Jun 17 01:01:46 2009 +0200

    update mpmath to 0.12

    Many thanks to Fredrik Johansson for writing most of this patch.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 34572c807e03eb4f9513b9a8c8f8b386c6563dd3
Author: Ronan Lamy <Ronan.Lamy@normalesup.org>
Date:   Wed Jun 17 02:36:29 2009 +0100

    Compute the finite parts of the limit of a sum by direct substitution.

commit cb73278e27c1f8a29a70aa7a9ee340ff807ed034
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed May 13 10:57:56 2009 +0000

    Fixed shebang lines in test scripts to /usr/bin/env python

commit 1ee94f74e8fdfa205cb5fd74ddbdd24a83b646c1
Author: Priit Laes <plaes@plaes.org>
Date:   Thu May 14 19:50:13 2009 +0300

    Fix all dict.has_key deprecation warnings

    That were reported during tests with "python -3" turned on.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 28fbd5aacb8b105e43254bf030bbed873941f4e3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 16 09:07:18 2009 -0600

    Make tests pass without the "py" module

commit 66164fe014a8dd48775f162fcfe6a9a5aa5d554f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 16 09:02:40 2009 -0600

    Toon added to credits

commit 2e3e91041c51b4be5dffd8f2921b50a49524e113
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 16 08:06:52 2009 -0600

    test_codegen.py: the print statement removed

commit 2d6a1584234bf3819011c0b1ef568bdf0c4ccab9
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jun 15 18:23:40 2009 +0200

    ccode tests for the exceptions

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a6b696bff1c9aa1f00e2d5e23d11a92e32885852
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jun 15 18:21:10 2009 +0200

    More tests for codegen

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ae6c0dbbe44bc2cef50b47daea3ce8e6c71c0d7e
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jun 15 18:19:06 2009 +0200

    Added a few exception in for in ccode for ANSI math.h functions

    sympy ceiling = ANSI C ceil
    sympy abs = ANSI C fabs (for floating point arguments)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8fef9b1d0495f11333556f0ceada767caba4ef15
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jun 15 17:47:41 2009 +0200

    Minor changes that make things more convenient

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9f4c72ef1737c818318cf16b0e799b3b9530b032
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jun 15 10:16:20 2009 +0200

    Codegen documentation corrections and additions

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3684c5900889c6ec7c6c20fc3ccb7d72af840e20
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jun 15 09:14:48 2009 +0200

    Moved symbol definitions into test functions

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 42d2a4f59f160f4760fabbe54eadad2869c4ee12
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Fri Jun 12 09:38:04 2009 +0200

    More kwargs to tune behavior of codegen with doctest

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 485dbbc6dde1c56267149edc68789918161258c8
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Fri Jun 12 08:41:40 2009 +0200

    Allow-SYMPY_TEST_CLEAN_TEMP-never

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 19ed48c9737285eb39e272eafee02c2525228379
Author: Toon Verstraelen <Toon.Verstraelen@UGent.be>
Date:   Mon Jun 8 16:14:10 2009 +0200

    Initial codegen implementation.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1188c4f7c4f0ff06885a59757063df8c8a3bd981
Author: Ben Goodrich <goodrich.ben@gmail.com>
Date:   Fri Jun 12 16:00:28 2009 -0400

    Matrices: introduce vec and vech

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ee09952a2dc1d6532b285f6898d41301c14f2afc
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sun Jun 14 18:26:40 2009 +0200

    Added definition of Atom to docstring of class Atom.

commit c7d8d04ff534d214256baca4e82ee1881a2f2302
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jun 12 12:49:51 2009 -0600

    Ben added to credits

commit 9f72823e5897a841dc862e7a84b1b5a9dd0e1070
Author: Ben Goodrich <goodrich.ben@gmail.com>
Date:   Fri Jun 12 10:18:54 2009 -0400

    Matrices: Improve jacobian function

    Now it handles nonsquare matrices too and raises an exception if incompatible
    vectors are passed in. Several new tests were written.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 128d491eaf4fbdce3b4dd4dab2c3a45e0c203645
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Tue Jun 9 23:08:28 2009 -0600

    Added del k to basic.py, removing strange x.k attribute.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d191c35f800b21930b343764e1a4f5f616473508
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jun 11 20:37:54 2009 -0600

    Credits updated

commit 2a884e76dde1c2d99dd55cf49be641f979042ada
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jun 11 20:26:46 2009 -0600

    Luke, Chris, Thomas, Florian and Nicolas added to credits. Welcome!

commit 3ec622b9e57c6bc93b29ab64069eea350de3bf20
Author: Nicolas Pourcelot <nicolas.pourcelot@gmail.com>
Date:   Wed Jun 10 22:56:50 2009 +0200

    Test Infinity: comparison fix (issue 986)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ef7a01cebf963ec4146534fb0ad5eb00ecb51b6f
Author: Nicolas Pourcelot <nicolas.pourcelot@gmail.com>
Date:   Wed Jun 10 21:08:25 2009 +0200

    Infinity: comparison fix (issue 986)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2fec49649c8831816651d2f2ccc54906bab9ac13
Author: Nicolas Pourcelot <nicolas.pourcelot@gmail.com>
Date:   Thu Jun 11 08:56:59 2009 +0200

    Latex: _print_Mul fix (issue 1282)

    If no separator, use \\times between two numbers in a product.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3f280566b1722b7dc17e03f6ff6e5b109c8f9f46
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jun 11 11:13:57 2009 -0600

    Tests for latex(..., mul_symbol) added

commit 5fb1a508a8ecd93ca0a901fd82551684f3066253
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Fri May 15 17:33:05 2009 +0200

    Add a second cls argument to flatten.

    This permits to flatten with respect to a given class (see docstring).
    This will be used in the logic module to denest classes of the same type
    (but I believe it will be useful also in other places)

commit a22bf0d9ec4d6fb6aadd20730bc62bf308c2bac8
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Thu May 14 20:40:22 2009 +0200

    Allow Function.eval to return non-instances of Basic.

    It was specially annoying that you could not return list
    or tuples.

    I don't know the reason of this behaviour, fortunately
    changing it did not break any tests.

    I added a test for this

commit 0afe739634c25ff53d2121f33c23b732d532e93d
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Mon Mar 16 14:38:35 2009 +0100

    implement get_class and get_mod_func in sympy.utilities.source

    Function get_class returns a class from a given string. It makes use
    of get_mod_func

    Implemented after a function with same name in django's codebase

commit 0ba23b49d2158cd5fe200c4fa1b6914b6d4d4832
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Mon Mar 16 13:49:51 2009 +0100

    Implement variations in sympy.utilities.iterables

    variations is a routine that calculates all possible variations
    of size n (with or without repetition) of a given set.

commit 53a38eea251f965767f14fd9b3c2fadc84f8e8b0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 8 14:32:45 2009 -0600

    Test added for the issue 626

commit 4944337659534df8ecfbea9d17f80fee2aa55860
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 8 14:31:28 2009 -0600

    test_solvers.py: use python code style guidelines

commit 9a7cd3bbc4918f4522974cf9dbea694fd5880fd4
Author: Florian Mickler <florian@mickler.org>
Date:   Mon Jun 8 14:02:41 2009 -0600

    add new convex_hull tests

        1. handling of kolinear Points
        2. handling of duplicate Points

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d4a41daf752bcdea52ec7c79c7801eca34d88199
Author: Florian Mickler <florian@mickler.org>
Date:   Mon Jun 8 14:04:15 2009 -0600

    reimplementation of convex_hull

    the original code had some issues and was complex

    hopefully this is more robust.

    i grabbed it from http://code.activestate.com/recipes/117225/

    so there probably should be an annotation added that it is based
    on the work from  "David Eppstein, UC Irvine, 7 Mar 2002"

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 93a34fe73f112980322196205bff2fd146b0154a
Author: Florian Mickler <florian@mickler.org>
Date:   Mon Jun 8 13:48:05 2009 -0600

    Add intersection test for the vertical segment

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7cf88f4359ace8a7aa141cf916d71b05176f83ca
Author: Florian Mickler <florian@mickler.org>
Date:   Mon Jun 8 13:48:50 2009 -0600

    fix segment __contains__ to work with vertical segments

    Before:

    In [1]: entity1 = Segment(Point(-10,10), Point(10,10))

    In [2]: entity2 = Segment(Point(-5,-5), Point(-5,5))

    In [3]: intersection(entity1, entity2)
    Out[3]: [(-5, 10)]

    After:

    In [1]: entity1 = Segment(Point(-10,10), Point(10,10))

    In [2]: entity2 = Segment(Point(-5,-5), Point(-5,5))

    In [3]: intersection(entity1, entity2)
    Out[3]: []

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a4a8832f4c6685294ce2cbda606d2b999f874be1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 8 07:07:42 2009 -0600

    Typo fixed in doc/src/guide.txt (thanks to Toon Verstraelen)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 957427019c39ee9d75e777f8be1341c21a561624
Author: Chris Smith <smichr@gmail.com>
Date:   Thu May 28 14:24:54 2009 +0545

    Solvers: solutions past linear factor found in tsolve

    A new test written, one test had to be modified to return all solutions.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1ec45911f98a97c14fcfdb37d8852e8122862efe
Author: Chris Smith <smichr@gmail.com>
Date:   Thu May 28 16:04:46 2009 +0545

    Core-functions: non-functions do not have args

commit d38830f26e2708e0f37c2a8807ac25698a17cae5
Author: Thomas Sidoti <TSidoti@gmail.com>
Date:   Mon Jun 1 00:21:37 2009 +0200

    MathML's printer extended

    In particular with: trig functions, order of terms, roots, and constants

    Followed tag names from content MathML
    http://www.w3.org/TR/MathML2/chapter4.html

    Added tests.

    Signed-off-by: Thomas Sidoti <TSidoti@gmail.com>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a998a32c8b30815a569ce68752924bb2c88a1893
Author: Alan Bromborsky <brombo@GA.(none)>
Date:   Sun May 31 15:03:50 2009 -0400

    Fixed special case in __str__ function for multivector and added test for special case.

commit c3680394baa9db983cb047c231760c9efd448e9d
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed May 27 13:01:40 2009 +0200

    Refactor Integer._eval_power

    I refactored Integer._eval_power with the aim of making it more readable and to solve
    some bugs. Code was rearranged to avoid duplicate code and commented.

    Bugs solved: issue #1434, it failed to compute correctly (sqrt(-3)**3) because it expanded
    incorrectly negative powers.

    Extended test coverage for Integer._eval_power and Rational._eval_power.

    No behaviour changes were introduced (except where it was wrong before).

    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ff56322472e0f71b769fea7ba8e367fd075ccfc2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue May 26 22:47:05 2009 -0600

    GA: forgotten empty print statement removed

    This should have gone to the cbde4e9, but I have overseen it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5e5a333da78a3af743e5dc5f0130448aaea7c85a
Author: Luke Peterson <hazelnusse@gmail.com>
Date:   Mon May 25 15:39:02 2009 -0700

    Fix for Issue 626, solve() can now handle Function and Derivative instances.

    Signed-off-by: Luke Peterson <hazelnusse@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit cbde4e95305f56220cb52ea67ecb78e509736cf7
Author: Alan Bromborsky <abrombo@verizon.net>
Date:   Sun May 24 17:56:07 2009 -0400

    GA-updates

    GA.py -
    1. Use << and >> as aliases for left and right multivector contraction so that r-forms are available for both operations.
    2. Use div() and curl() as aliases for grad_int() and grad_ext() multivector member functions to make it easier to
    remember which is which.
    3. Improve multivector __str__() function to eliminate unneeded parenthesis.
    4. Add constructor for general symbolic multivector and fix error in spinor multivector constructor.

    test_GA.py -
    1. Add tests for improved __str__() function.

    HTML Documents -

    1. Add warnings about precedence behavior of python operators compared to precedence of geometric algebra operators.
    2. Add warning about base to blade converstion in __str__()
    3. Document constructor for general symbolic multivector.

    Example -
    1. Removed unnecessary code.

    Signed-off-by: Alan Bromborsky <abrombo@verizon.net>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0bfc7f9021795a25a553af0cf45e0077ae938e4d
Author: Priit Laes <plaes@plaes.org>
Date:   Thu May 14 18:28:59 2009 +0300

    Add tests for issues #1405, #1406, #1407, #1408 and #1409.

    Seems that they were fixed by recent Mateusz's commit.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit 34897922a6f25ef4cf21ad0820369ab371d3a025
Author: Priit Laes <plaes@plaes.org>
Date:   Thu May 14 18:46:41 2009 +0300

    Fix corner case for Bernoulli equation.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit 36c0bea5b78f2d84bfde01c93a6e3fa7d95885e9
Author: Priit Laes <plaes@plaes.org>
Date:   Thu May 14 18:46:21 2009 +0300

    Small cleanups to the ODE solver and tests.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit 17b837fad74865ad870a3f9894ca77711a97b94e
Author: Priit Laes <plaes@plaes.org>
Date:   Thu May 14 13:43:25 2009 +0300

    Rename Basic.is_fraction() to Basic.is_rational_function() and add
    a docstring.

    Signed-off-by: Priit Laes <plaes@plaes.org>

commit 7750926109c815fc3c88ee176049cc8c740acfce
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat May 16 11:35:31 2009 +0200

    credit Akshay

commit 22eecd88cd5993afcf60e381ef70858cfdd62467
Author: Akshay Srinivasan <akshaysrinivasan@gmail.com>
Date:   Mon Mar 30 15:32:17 2009 +0530

    Replace Sin_2k_integrate(class) with a more general sin_pow_integrate(function). Fixes issue#1188

commit ce61f8d057e46b36dc2cd879891e74a7f9320201
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu May 14 00:36:18 2009 +0200

    Fixed subresultant PRS computation and ratint()

    Due to improper computation of subresultant PRS and resultants as
    a side effect, ratint() failed to compute integrals properly. This
    patch fixes subresultant algorithm, so that it now returns correct
    PRS and resultant (equivalent to result from poly_resultant()).

    This fixes ratint() and solves issues #1416, #1417 and #1419.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Jochen Voss <voss@seehuhn.de>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 643eae98b6e2fc46f59bc9a2440e8797e49c12fe
Author: Jochen Voss <voss@seehuhn.de>
Date:   Tue May 12 17:28:09 2009 -0400

    Fix the "shebang line" for isympy.

    Use "#! /usr/bin/env python" to select the Python interpreter of
    isympy.  This allows to have the python binary anywhere in PATH.

    Signed-off-by: Jochen Voss <voss@seehuhn.de>
    Signed-off-by: Fabian Pedregosa <fabian@fseoane.net>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3ee2ecb39acd0af651afaa7cadbdb12f344dc55e
Author: Jochen Voss <voss@seehuhn.de>
Date:   Mon May 11 21:49:41 2009 -0400

    fix a minor typo

    Signed-off-by: Jochen Voss <voss@seehuhn.de>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2573c851af78b0e52f9951f791e664b540de4bfe
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sun May 10 23:56:31 2009 +0100

    Fix Issue 1420: Derivative subs

    Previously the substitution didn't work on the variable (the Derivative was
    differentiating with respect to) itself.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 850af2242940a0a486a4cadda6b5c9c9b276c4a4
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sun May 10 16:37:24 2009 +0100

    Fix use of Piecewise functions with pi in the condition

    Before:
    In [1]: p2 = Piecewise((1, x < pi), (-1, x < 2*pi), (0, x > 2*pi))

    In [2]: p2.subs(x,1)
    Out[2]:
    ⎧1    for 1 < π
    ⎪
    ⎨-1  for 1 < 2⋅π
    ⎪
    ⎩0   for 2⋅π < 1

    After:
    In [1]: p2 = Piecewise((1, x < pi), (-1, x < 2*pi), (0, x > 2*pi))

    In [2]: p2.subs(x,1)
    Out[2]: 1

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 84ac989fe9b5d4eef62c053359e6a7843e62fb31
Merge: 3744c7c 1f23472
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat May 9 13:07:39 2009 +0200

    Merge branch 'master' of git@git.sympy.org:repos/sympy

    Conflicts:
    	sympy/solvers/solvers.py

commit 3744c7c2fe8c309560e5026bb80a21e1cf3c76b3
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat May 9 13:03:00 2009 +0200

    Update my personal info

commit 4bde1ffe2c7bbcf5a1a663dc0051864e329fbee4
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Wed May 6 23:29:15 2009 +0200

    refactor sympy.solvers.solvers.guess_solve_strategy

    Some code was redundant and was erased. Also corrected a bug
    ( it wrongly treated 3**x-10 ) and created a test for that.

    In the tests, I changed some ocurrences of tsolve by solve. Solve
    anyway calls tsolve, and this way we ensure that solve correctly
    recognizes the equation as trascendental.

    Thanks to smichr for the report.

commit 3374136d6bce06851625e050923987522df94f27
Author: Alan Bromborsky <abrombo@verizon.net>
Date:   Sun May 3 09:38:36 2009 -0400

    GA module upgraded with constraction operations

    Upgrade GA module with left and right contraction operations for multivectors
    and extend capability of multivector setup and constructor functions. Modify
    multivector subs function to accept same arguments as sympy subs. Fix
    mutivector == function to work with multivector scalars on lhs and sympy
    symbols on rhs.

    Upgrade GA documentation to include new capabilities, fix spelling errors and
    inline equation formatting.  Reformat tables for improved readability.

    Upgrade latex_ex module with improved detection of equation mode strings and
    fix newline bug.

    Upgrade latex_ex documentation to include new capabilities and fix spelling
    errors.  Reformat tables for improved readability.

    Fix python execution path (#!/usr/bin/python) in geometric algebra examples.

    Add tests for left and right contraction and for multivector derivatives.
    Remove overly complex test for non-euclidian geometry.

    Signed-off-by: Alan Bromborsky <abrombo@verizon.net>
    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e0787095ed60e54e0e8d768a3652f2aa6974e250
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri May 8 06:40:25 2009 -0700

    Jochen added to credits

commit 964d1f97df600308b23b6a91b9de8811795509a4
Author: Jochen Voss <voss@seehuhn.de>
Date:   Sat May 2 21:08:36 2009 -0400

    Add a test for the @cachit decorator.

    Make sure that the caching decorator correctly
    copies over the function docstring and function name.

    This fixes issue #744 from the issue tracker.

    Signed-off-by: Jochen Voss <voss@seehuhn.de>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fd393b3aafc0f49d1029ac540a10e4211188f1a3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun May 3 23:57:44 2009 -0700

    Fixes the doctests

    The doctests were fixed to test for things that the doctest runner expects.
    The doctest runner might be improved to test for repr() instead of str().

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4ad8f49259f5e52ea090a9022ad5db5943450ef2
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Apr 8 15:34:36 2009 +0200

    rename msolve() to nsolve() and use mpmath for numerical rootfinding

    Instead of msolve(x, f, x0) use nsolve(f, x, x0).

    Redundant code was removed and some smaller things had to be fixed.
    For compatibility, msolve() can still be used, but a deprecation warning is
    emitted.

    By default, the returned result of nsolve() is an mpmath matrix;
    interoperability with sympy probably has to be improved.

    mpmath.findroot is now used, this results in increased functionality, see
    mpmath's documentation about it.

    nsolve() has simplified syntax for onedimensional functions.
    Also the many different 1d-solvers of mpmath should be usable now.

    A doctest was fixed. Support for Eq was added.

    For onedimensional functions nsolve(f, x) is valid.

commit 1f234724fe7f00f7e1644f0d0debc5e8707ab9ee
Author: Alan Bromborsky <abrombo@verizon.net>
Date:   Sun May 3 09:38:36 2009 -0400

    GA module upgraded with constraction operations

    Upgrade GA module with left and right contraction operations for multivectors
    and extend capability of multivector setup and constructor functions. Modify
    multivector subs function to accept same arguments as sympy subs. Fix
    mutivector == function to work with multivector scalars on lhs and sympy
    symbols on rhs.

    Upgrade GA documentation to include new capabilities, fix spelling errors and
    inline equation formatting.  Reformat tables for improved readability.

    Upgrade latex_ex module with improved detection of equation mode strings and
    fix newline bug.

    Upgrade latex_ex documentation to include new capabilities and fix spelling
    errors.  Reformat tables for improved readability.

    Fix python execution path (#!/usr/bin/python) in geometric algebra examples.

    Add tests for left and right contraction and for multivector derivatives.
    Remove overly complex test for non-euclidian geometry.

    Signed-off-by: Alan Bromborsky <abrombo@verizon.net>
    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e3574b6c53f8f764a79c169fc094ba7d5dba600f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri May 8 06:40:25 2009 -0700

    Jochen added to credits

commit 418b1e1176f4b4d286983f69cf4e5c1deacd4afb
Author: Jochen Voss <voss@seehuhn.de>
Date:   Sat May 2 21:08:36 2009 -0400

    Add a test for the @cachit decorator.

    Make sure that the caching decorator correctly
    copies over the function docstring and function name.

    This fixes issue #744 from the issue tracker.

    Signed-off-by: Jochen Voss <voss@seehuhn.de>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d983b02af779768b44838f478057125626eeb73a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun May 3 23:57:44 2009 -0700

    Fixes the doctests

    The doctests were fixed to test for things that the doctest runner expects.
    The doctest runner might be improved to test for repr() instead of str().

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3514f53c989f868a5172b64c9b116abda5f23ac0
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Wed Apr 8 15:34:36 2009 +0200

    rename msolve() to nsolve() and use mpmath for numerical rootfinding

    Instead of msolve(x, f, x0) use nsolve(f, x, x0).

    Redundant code was removed and some smaller things had to be fixed.
    For compatibility, msolve() can still be used, but a deprecation warning is
    emitted.

    By default, the returned result of nsolve() is an mpmath matrix;
    interoperability with sympy probably has to be improved.

    mpmath.findroot is now used, this results in increased functionality, see
    mpmath's documentation about it.

    nsolve() has simplified syntax for onedimensional functions.
    Also the many different 1d-solvers of mpmath should be usable now.

    A doctest was fixed. Support for Eq was added.

    For onedimensional functions nsolve(f, x) is valid.

commit 20c7ebeba715c5fe538fea709e38086f54e77e59
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Apr 20 21:57:45 2009 +0200

    Correctly pretty print strings.

    Before of this, pretty added extra " at the beggining-end
    and \ to characters like \n

commit 23cd4e5e235b419a21cb89bea062717de797afb6
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Apr 20 21:54:00 2009 +0200

    Add a wrap_line option to the pretty printer.

    This is useful for example when pretty printing to non-terminals
    (web browsers via html, etc.)

commit 145cb424c2546a5a7b317e8bc4e5f34ccb097f3c
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Mon Apr 20 21:47:54 2009 +0200

    Simplify unicode/string join.

    This is much simpler and will automatically convert to unicode if
    argument's are unicode objects.

commit ad1b426a7eccd0b5a2d16c599a23b0fb5202e043
Author: Fabian Pedregosa <fabian@fseoane.net>
Date:   Sat Apr 18 16:46:22 2009 +0200

    Corrected sympy.__version__

commit 590497ceb46ec7ce3d948fd8ba2a485e44e8abed
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Apr 18 15:14:39 2009 +0200

    fix link to AUTHORS

commit f835a898d50c6b492ba38f1f88e72c27337259df
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Apr 18 15:04:57 2009 +0200

    credit Tomasz

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 36b3d98bc84c490a9dadd65bf63822b94cb006f1
Author: Tomasz Buchert <thinred@gmail.com>
Date:   Sat Apr 18 12:44:32 2009 +0200

    Add code quality tests concerning exceptions

    1) Forbid string exceptions globally (issue 715 related)
     2) Forbid generic exceptions (i.e. 'raise Exception(...)')

commit 59c0151f1a2828b9c96c3df0a3ace67a54a70aa6
Author: Tomasz Buchert <thinred@gmail.com>
Date:   Sat Apr 18 12:44:31 2009 +0200

    Removal of all generic exceptions from SymPy

commit 7296f3528ad0bf59d33328d3526ae7548c771658
Author: Tomasz Buchert <thinred@gmail.com>
Date:   Sat Apr 18 12:44:30 2009 +0200

    Removed string exceptions from SymPy (issue 715)

commit 076c4c60b54ad9255b73724f44d25fb03c12345c
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Apr 17 15:02:01 2009 -0600

    Grammar fix

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit 6b7f122909a3edb92b60aa341f13eecdf1c3da4f
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Fri Apr 17 20:57:07 2009 +0200

    add Johann to credits
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit f2a3707fa74b85d20d3a9a828be5adfc9e512744
Author: Johann Cohen-Tanugi <johann.cohentanugi@gmail.com>
Date:   Fri Apr 17 20:50:26 2009 +0200

    test diffs for commutativity (issue 1320)
    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit cc19a810b9108466698b1878403cf1d0fbd193f3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Apr 12 11:44:09 2009 -0700

    Fixes the wrong polygamma test

    Previously it used 3/2, which is 1. When changed to S(3)/2, the result is
    actually different and so it didn't work with python -Qnew. So a new test for 1
    was added, and the test for S(3)/2 was changed.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ef4faf56d86ef6b7bfbb1450072416df6010d7a1
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Apr 11 14:54:03 2009 +0200

    credit Freddie

commit 7dba84cb4332418f9e69e7e8db1b56f4a2fd80f0
Author: Freddie Witherden <freddie@witherden.org>
Date:   Fri Apr 10 18:06:41 2009 +0100

    Add unit tests for standard form in the LaTeX printer.

commit d7bdc809d079ed27943c5bcab235ff04006b2116
Author: Freddie Witherden <freddie@witherden.org>
Date:   Tue Mar 17 19:13:34 2009 +0000

    Handle standard form in the LaTeX printer correctly.

    E.g. 10e2 is now 10 \times 10^{2}.

commit 272f0f0a7b8d7343a76ddada6f3311473b46f946
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Sat Apr 11 14:43:28 2009 +0200

    Vinay added to credits

commit 1d0dcded5afc0ab006058c830ecece882659344b
Author: Vinay Kumar <gnulinooks@gmail.com>
Date:   Fri Apr 10 12:56:36 2009 +0000

    Polygamma .expand(func = True) Testcases

commit 4b5eb2842965841138c81790385b884541eaca2f
Author: Tomasz Buchert <thinred@gmail.com>
Date:   Fri Apr 3 14:33:38 2009 +0200

    Trigonometric (hyperbolic) functions docstrings

commit 651b362eaa87fb2b6afdbf852af76380e818c807
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Apr 9 19:53:11 2009 -0700

    Tomasz added to credits

commit 911f121a93bbcb9eebfe0cbb9eae2cc3955a95e9
Author: Tomasz Buchert <thinred@gmail.com>
Date:   Tue Apr 7 02:42:55 2009 +0200

    This fixes issue 1329.

    Also: printing for math constants from math.h and minor fixes.

    Signed-off-by: Tomasz Buchert <thinred@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a19a09ee2a76319835631a4a6eef6d531ca9d8f4
Author: Barry Wardell <barry.wardell@gmail.com>
Date:   Tue Apr 7 18:59:47 2009 +0100

    Add test for exp().evalf() with floating point arguments.

    Signed-off-by: Barry Wardell <barry.wardell@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d5ba1e09154e045a4ef32139b14df54420dc45d1
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Thu Apr 9 12:43:51 2009 +0200

    Barry Wardell added to the credits

commit 185ac2cb07f628a6919ee80d3838a3a9822550bf
Author: Barry Wardell <barry.wardell@gmail.com>
Date:   Tue Apr 7 16:46:24 2009 +0200

    Do not use var in lseries test

    Use of var is discouraged in tests because in might clash with other objects
    defined in global namespace

    Signed-off-by: Fabian Seoane <fabian@fseoane.net>

commit 804638b3f0257072097759acc21e8de26cb3a50b
Author: Barry Wardell <barry.wardell@gmail.com>
Date:   Tue Apr 7 16:32:01 2009 +0200

    Implement series as function

    series is now a function in defined sympy.series (in addition to a
    classmethod on any instance of Basic)

    Also added documentation and tests

    Signed-off-by: Fabian Seoane <fabian@fseoane.net>

commit 9a0af5d15ed6701249a6e850b1efaf337568ea8c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Apr 5 21:13:06 2009 -0700

    0.6.5 development cycle

commit 22df8cdf45152a3b2c40f6bc254fff7e1654d9b4
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Mon Feb 9 19:38:01 2009 +0100

    Documentation for the integrals and functions module.

    I've added a new functions.txt file to document sympy.function module,
    and also added docstrings to functions that did not have one.

    However most of the functions documented in the functions.txt file
    are simply references to the docstrings. Someday this
    should be expanded with examples and documentation.

commit 163977849a0f98ab3bc38bbf0c57d6fcbb7e1551
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 4 17:05:10 2009 -0700

    v0.6.4

commit 8a91f8eb4e11cdbf326f40179ae60441aeea127d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 4 16:58:37 2009 -0700

    doc/README udpated with prerequisites

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 93ac9e166699ccc344004fb4ef6769592b617fa1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 30 18:15:27 2009 +0200

    Use isqrt() from mpmath.libmpf in integerpolys.py (#1359)

    Previously by default sqrt() from gmpy was used if gmpy was awailable
    on the system and sqrt() from mpmath otherwise. However, there is no
    need for such separation and isqrt() from libmpf will do the job.

    Reported-by: Fredrik Johansson
    Signed-off-by: Mateusz Paprocki

commit 5b41dc7641c574ac78d29abc9d5d38fd1dc7cf24
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 20:42:40 2009 -0700

    Start of the 0.6.4 release cycle

commit 4afce86f01061b902987ed741b9eb0a20f7edae3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 20:41:08 2009 -0700

    v0.6.4.beta3

commit c034467186be9feb33d95e54b32f5032d7f4f614
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 20:26:26 2009 -0700

    setup.py: modules list refactored

    Previously it was used for doctesting purposes as well. We now have our own
    robust doctesting framework, so I converted the modules list to a simple Python
    list.

commit 66da476596439861831ac1ea11a5e35fa8774cc7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 20:20:31 2009 -0700

    setup.py: sympy.slow_tests added to the tests list

commit 558c862ac98e58a1d27bdc57a777d355cabee28d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 17:49:24 2009 -0700

    Make lambdify() work with Integral

    The only problem was to import it at the evaluation time. Tests written.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: David Roberts <dvdr18@gmail.com>

commit 6296d3b149fcfcf5ee5b9491ece2171dc3013738
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 18:15:20 2009 -0700

    Make Integral(exp(-x**2), (3, -oo, oo)) raise a ValueError

    Previosly only Integral(exp(-x**2), 3) raised a ValueError. This is now fixed
    and tests written.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: David Roberts <dvdr18@gmail.com>

commit f6e9ae201865e9d8f8bd37a49934701e3c4268d2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 17:55:36 2009 -0700

    Integral.subs() fixed for integration variables

    Previously Integrate(sin(x), x).subs(x, 5) substituted 5 for "x", which is
    wrong, because the integration variable is just a dummy variable. Now it just
    returns the integral unmodified

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: David Roberts <dvdr18@gmail.com>

commit 21f65e30ede722d74d1519708148292a5fba93c2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 19:25:35 2009 -0700

    Akshay and Aaron added to credits

commit 55f103a40b245c5524b75c1373a2125cb4a170fb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 16:30:11 2009 -0700

    Make PrettyPrinter use the profile mechanism

    Previously the PrettyPrinter used an option use_unicode and it was done in a
    bit hackish way, so the code was refactored to use the same profile mechanism
    as the StrPrinter and LatexPrinter.

    Also the full_prec option was implented and tested

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit 442cfb5064cfcf754e2fc281c8d4deb2bd230c7a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 14:21:33 2009 -0700

    Printing precision fixed all over sympy (#1052)

    This was done by implementing a ._settings dictionary in the StrPrinter, the
    same way as the LatexPrinter can be customized. So far only the
    "full_prec" option is implemented, which can have 3 values:

    False ... Strip all trailing zeros
    True  ... Always show the full precision
    "auto" ... Strip zeros if part of a bigger expression (default)

    The evalf() tests have it as True.

    Before:

    In [1]: 1.5*x
    Out[1]: 1.50000000000000⋅x

    Now:

    In [1]: 1.5*x
    Out[1]: 1.5⋅x

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit 2caa23edfc41b2fd2bd30bb6ac59855896deb549
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Wed Mar 25 14:45:21 2009 -0600

    Fixed typo in docstring

commit 667e95e1e7d382c5bee394d51114a329b9535e89
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 12:42:52 2009 -0700

    solve( x**Rational(1,2) - 2, x) fixed

    it used to return [sqrt(2)], but the answer is [4]. There was a bug in the
    solver, that noone has noticed so far: it did everything correctly, only at the
    very end it should power the result to "m", and it used to power it to "1/m",
    which is wrong.

    More tests were written for this.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fabian Seoane <fabian@fseoane.net>

commit 48291e3121d4236ac7d5b330162d645f726d5f7a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 12:35:52 2009 -0700

    solve() extended to handle equations of the form 4*x*(1 - a*x**(S(1)/2))

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fabian Seoane <fabian@fseoane.net>

commit 2196dc803dcace98bcd2c6ec67da894206d915a6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 29 12:25:43 2009 -0700

    guess_solve_strategy() improved to handle numbers as well

    Previously guess_solve_strategy( 4, x ) returned -1 (=can't guess), but it
    should return GS_POLY, as this is a very simple polynomial equation. This was
    fixed and a test written.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fabian Seoane <fabian@fseoane.net>

commit 14c0dd89ccff571cf67e607dd119a7dbf707511d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 29 19:42:47 2009 +0200

    Use sqrt() from mpmath in HEUGCD, if gmpy is not available

commit 20467834937cb038ddc87cc327042821bab3d694
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 29 00:00:23 2009 +0100

    Use Wang's multivariate factorization algorithm in factor()

    Now you can factor large polynomials in sympy:

    In [1]: var('a,b,c,d,e,f')
    Out[1]: (a, b, c, d, e, f)

    In [2]: F = a + b + c + d + e + f

    In [3]: G = a**2 + a*b + a*c + b**2 + b*c + c**2 + d**2 + d*e + d*f + e**2 + e*f + f**2

    In [4]: H = F**2*G**2

    In [5]: H
    Out[5]:
                                                                                              2
                           2 ⎛                                     2    2    2    2    2    2⎞
    (a + b + c + d + e + f) ⋅⎝a⋅b + a⋅c + b⋅c + d⋅e + d⋅f + e⋅f + a  + b  + c  + d  + e  + f ⎠

    In [6]: time h = expand(H)
    CPU times: user 0.79 s, sys: 0.00 s, total: 0.79 s
    Wall time: 0.85 s

    In [8]: time factor(h)
    CPU times: user 6.77 s, sys: 0.03 s, total: 6.80 s
    Wall time: 7.13 s
    Out[9]:
                                                                                              2
                           2 ⎛                                     2    2    2    2    2    2⎞
    (a + b + c + d + e + f) ⋅⎝a⋅b + a⋅c + b⋅c + d⋅e + d⋅f + e⋅f + a  + b  + c  + d  + e  + f ⎠

commit d13389840fd7a19847e61af91000e40c9abe98ab
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 28 22:50:56 2009 +0100

    Implemented Wang's algorithm for multivariate factorization

    This is a preliminary implementation of Wang's algorithm for
    efficient factorization of multivariate polynomials over the
    ring of integers. The old algorithm, based on Kronecker's
    method, is absolutely outperformed, even on small input.

    Wang's algorithm works by substituting carefully chosen
    integers for all but the main variable in Z[x_2,...,x_n][x_1]
    polynomial (x_2 -> a_2, ..., x_n -> a_n, where a_is is an
    integer and factoring univariate image of the multivariate
    input polynomial. The last step is parallel Hensel lifting
    procedure, which constructs multivariate true factors
    variable-by-variable (all factors at once).

    To find good evaluation points, several univariate factorizations
    are required. The task is to find such a set of points, for which
    the univariate factorization will have minimal number of factors.
    This is very important, because multivariate factorization has
    the same number of factors, unless extraneous factors exists
    (which leads to significant expression growth problem). However,
    due to efficient univariate factorization routines, this step
    takes minor part of the total execution time of the algorithm.

    If there are no extraneous factors, the true multivariate factors
    are obtained efficiently in parallel, using iterative approach, where
    factors in Z[x_1,...,x_k] are computed from factors in Z[x_1,...,x_{k-1}].
    Otherwise, the algorithm tries another substitution or will use, in
    future, combinatorial search to match together extraneous factors,
    as it is done in Zassenhaus algorithm (in univariate case).

    There are several improvements possible to the algorithm, especially
    to the lifting phase, which can significantly reduce factorization
    time. The most important tool is a method for predetermining correct
    or correct up to a polynomial ideal coefficients of the multivariate
    true factors. There are also a few interesting heuristics, e.g. to
    recognize extraneous factors or to find non-changing factors early
    in lifting procedure, which will allow to work on a reduced problem
    with less multivariate factors in consideration. This techniques
    will be implemented in near future.

commit dc6a8ac27fc36ab21550096b25cc8e09f584d956
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 28 22:48:59 2009 +0100

    Implemented Eisenstein's criterion, improved factorization in Z[x]

    Eisenstein's criterion is useful for checking if a univariate
    polynomial is irreducible over integers. If this is the case,
    zzx_eisenstein returns True, otherwise it returns None.

    Also zzx_factor_sqf function was implemented. It is similar to
    zzx_factor, but it assumes that the input polynomial is square
    free. This gives a moderate speedup when we know in advance
    that input is square-free.

commit a1d213d4741ddd5647995d07c5846db8f0886fbd
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 28 22:34:50 2009 +0100

    Fixed corner case in heuristic GCD algorithm

    Previously heuristic GCD failed when accidentally the evaluation
    point was a zero of any or both of the input polynomials. If this
    happened, ZeroDivisionError exception was raised. Now HEUGCD won't
    fail in such simple cases.

commit 7270596580bf9bbdd3cadbe91e84065deeb6bc8b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 22 16:04:26 2009 +0100

    Implemented more useful tools for polynomials in Z[X]

commit 8917815f22ba4d0934b9af847e9d76ec57fadfc6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 21 23:26:55 2009 +0100

    Improved sparse polynomial GCD in Z[X] by reducing polynomials

    The default GCD algorithm in Z[X], the heuristic GCD, works
    best for dense and semisparse polynomials, but is very slow
    for sparse input. This can be improved by mapping common
    powers of the form x_i**k_i to y_i in the input polynomials,
    where k_i is integer GCD of exponents of a polynomial that
    is a univariate view of Z[X] in x_i. Then GCD is computed
    using the reduced polynomials and, as the last step, the
    mapping is reversed to recover correct polynomial GCD
    and co-factors.

    Now a little benchmark:

    In [1]: from sympy.polys.integerpolys import *

    In [2]: from sympy.polys.specialpolys import *

    In [3]: f,g,h = zzX_fateman_poly_F_3(3)

    In [4]: time zzX_gcd(f, g, reduced=False) == h
    CPU times: user 9.73 s, sys: 0.04 s, total: 9.77 s
    Wall time: 10.03 s
    Out[5]: True

    In [6]: time zzX_gcd(f, g, reduced=True) == h
    CPU times: user 0.03 s, sys: 0.00 s, total: 0.03 s
    Wall time: 0.03 s
    Out[7]: True

    In [8]: f,g,h = zzX_fateman_poly_F_3(6)

    In [9]: time zzX_gcd(f, g, reduced=True) == h
    CPU times: user 0.98 s, sys: 0.01 s, total: 0.99 s
    Wall time: 1.02 s
    Out[10]: True

commit 67284fa6f21db38778f2fef24417d569d037b248
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 21 04:09:28 2009 +0100

    Implemented factorization of x**n - 1 and x**n + 1 polynomials

    Previously polynomials of this kind were factored using a direct
    approach (Zassenhaus algorithm). However it is much more efficient
    to do the same job using cyclotomic decomposition. Now a few facts:

    In [1]: from sympy.polys.integerpolys import *

    In [2]: f = zzx_from_dict({56:1,0:-1}) # x**56 - 1

    In [3]: time a = zzx_factor(f, cyclotomic=False)
    CPU times: user 0.58 s, sys: 0.00 s, total: 0.58 s
    Wall time: 0.63 s

    In [5]: time b = zzx_factor(f, cyclotomic=True)
    CPU times: user 0.01 s, sys: 0.00 s, total: 0.01 s
    Wall time: 0.01 s

    In [7]: a == b
    Out[7]: True

    In [8]: f = zzx_from_dict({161:1,0:-1}) # x**161 - 1

    In [9]: time a = zzx_factor(f, cyclotomic=False)
    CPU times: user 18.85 s, sys: 0.26 s, total: 19.10 s
    Wall time: 21.12 s

    In [11]: time b = zzx_factor(f, cyclotomic=True)
    CPU times: user 0.04 s, sys: 0.00 s, total: 0.04 s
    Wall time: 0.04 s

    In [13]: a == b
    Out[13]: True

    In [14]: timeit b = zzx_factor(f, cyclotomic=True)
    10 loops, best of 3: 37.6 ms per loop

commit 6aecdb79f5b169cff1ba20c0d185b84b6e30b63d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 20 22:02:36 2009 +0100

    Implemented recursive dense multivariate polynomials

    This is a basic implementation of multivariate polynomials
    over integers using recursive dense representation. Fast
    multivariate polynomials are needed to finally implement
    efficient multivariate factorization algorithm. Although
    multivariate polynomials tend to get sparse in real world
    problems, it has been shown that recursive dense representation
    has many benefits over sparse representations. This does not
    mean that in future an alternative sparse representation won't
    be implemented to handle very sparse polynomials.

    As a side effect of this work univariate polynomials over
    integers were refactored. Several bugs were fixed and new
    tests written (module has now >95% test coverage). A little
    cleanup in univariate code was needed because it's being
    used to terminate recursion for the multivariate case.

    The heuristic GCD algorithm was extended to support multivariate
    polynomials. As another side effect, the univariate HEUGCD was
    greatly improved, to handle larger input or fail gracefully on
    too big input (raises HeuristicGCDFailed rather than OverflowError).

    Work on large GCDs revealed that the modular GCD algorithm is
    improperly implemented, so at this point, for both univariate
    and multivariate cases, the only valid GCD algorithm is HEUGCD.
    So in both cases GCD computation may fail, which would result
    in an exception being raised. Note that its better to get such
    information rather that wrong result (which is the case for
    modular GCD).

    To handle very large inputs in HEUGCD (UV & MV) algorithm, GMPY
    library is needed. If GMPY is available on the system, then it
    will be used in HEUGCD, otherwise built-in math will be used
    (and exception raised if input is too large).

    Now a quick benchmark:

    In [1]: from sympy.polys.integerpolys import *

    In [2]: from sympy.polys.specialpolys import *

    fateman_poly_F_n generates dense multivariate polynomials
    of n+1 varriables which have no common factors (GCD == 1).

    In [3]: f,g,h = fateman_poly_F_1(1)

    In [4]: F,G,H = zzX_fateman_poly_F_1(1)

    In [5]: time gcd(f, g) == 1
    CPU times: user 4.76 s, sys: 0.06 s, total: 4.82 s
    Wall time: 4.98 s
    Out[6]: True

    In [7]: time zzX_one_p(zzX_gcd(F, G))
    CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
    Wall time: 0.00 s
    Out[8]: True

    For n > 1 gcd() hanged forever. However HEUGCD was
    able to handle all cases for n <= 7 without GMPY
    and much more using this library.

    In [9]: F,G,H = zzX_fateman_poly_F_1(7)

    In [10]: time zzX_one_p(zzX_gcd(F, G))
    CPU times: user 0.16 s, sys: 0.00 s, total: 0.16 s
    Wall time: 0.17 s
    Out[11]: True

    Note however that if polynomials in consideration
    are very sparse, the old (sparse) algorithms win
    with new (dense).

    In [12]: time f,g,h = fateman_poly_F_3(8)
    CPU times: user 0.24 s, sys: 0.00 s, total: 0.24 s
    Wall time: 0.26 s

    In [14]: time F,G,H = zzX_fateman_poly_F_3(8)
    CPU times: user 1.40 s, sys: 0.01 s, total: 1.42 s
    Wall time: 1.49 s

    This is understandable because, in zzX case, most time
    is spent on wasteful traversing of multivariate zero
    polynomials, e.g. [[[[[]]]]], and multiplication of
    zeros. However HEUGCD still wins with old gcd() with
    little effort.

    This shows that for very sparse input, sparse implementation
    would be beneficial (e.g. recursive sparse for symmetry).

commit 87d3e0df79c231fd8152f96b89b84fed22f6cc23
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 19 00:29:33 2009 -0700

    Fixes the test_secondquant tests to use symbols instead of var

    The problem with var() is that it injects the symbols to the parent space and
    thus then the result of tests depends on the order they are executed. It turned
    out that some of the tests were relying on that. All of this is fixed by this
    patch.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 411acb39ef0adb6d7408c767b439557386a5dbe3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 8 21:50:18 2009 -0800

    Use systemwide sphinx (e.g. don't download it)

commit 22c907be96f3de3293ecaea2a54c9320a819411b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 27 01:36:52 2009 -0700

    Examples documentation improved with regards to the PYTHONPATH issues

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 54ff252a0bd9f7e0695eccf0ca6d191a6905a28b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 25 01:06:16 2009 -0700

    Make all examples run again (#1297)

    The fix was to add the sympy root directory into sys.path, the same way as
    sympy.test() works.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 216c0ff23b4dcc31c79274f42b7bd9a806df3109
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 27 01:03:22 2009 -0700

    Integral._eval_subs() implemented

    Thorough tests were written for all possible combinations of substitutions in
    the integrand and the limits for both single and double integrals.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 04435fdaa67857836c229c0e9a774fe886a9c89c
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Mar 27 21:12:03 2009 -0700

    roots: Just added a docstring reminding that we don't check the correct result

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 78786bfcdcef9c6c61bdf38c03dd7ca3f982768b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Mar 24 23:54:56 2009 -0700

    ./setup.py test_doc now runs our testsuite

    so ./setup.py test now also runs our doctest suite at the end (but only if all
    regular tests passed). The blacklist from bin/doctest was moved to
    sympy/utilities/runtests.py, so that it's enough to just do

    sympy.doctest()

    and it will just work.

    Of course we should work on fixing sympy and mpmath so that no blacklist is
    necessary, but currently the blacklist is needed.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5b8353b82685fb86e93fc26fa7cae8b6916fbeb9
Author: Andrew Docherty <andrewd@maths.usyd.edu.au>
Date:   Tue Mar 24 22:31:15 2009 -0700

    Fixes the (1/(1+(a+b)*x)).series(x, 0) problem (#1342)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8ae9da9546b7b01f88a0aabfcacfd85750af2882
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Mar 24 21:57:41 2009 -0700

    solve(Eq(cos(x), sin(x)), x) raises a NotImplementedError

    A test written. Previously it returned [acos(sin(x))] which contains "x". The
    answer is atan(1), but currently our solver can't do it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8bb5b7f2d262684901dcc4ccdf2ebae6f3ca4a2a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Mar 24 21:35:20 2009 -0700

    Added a new test for roots (#1305)

    The result is long, so I only test the number and degeneracy of the roots.
    Previously it hanged, so this test that it works now.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit da6a5a928af6bee6c183e9ac8f26ef9b270b890d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Mar 24 21:24:49 2009 -0700

    Removing the hack from fraction() as it is not necessary anymore

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8bba29f7e886c1ccf2f37d2ee15c5c22d22c825b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Mar 24 21:13:59 2009 -0700

    trigsimp() two hacks removed and done right

    Previously trigsimp() failed to simplify sin(x)/cos(x) to tan(x) and similar
    things and also it required an ugly hack. Many of those are now fixed and tests
    written.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ec959e460de04e7d14c892c889fcc1611e6fcfd8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 25 00:47:26 2009 -0700

    Fixes the trigsimp(2.0*sin(x)**2+2.0*cos(x)**2) problem (#1274)

    It raised an error previously. Thanks a lot ffxvzero for reporting it and
    suggesting a fix!

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e6ab2527167e6b48a16c0ca422ca9938976adb95
Author: Akshay Srinivasan <akshaysrinivasan@gmail.com>
Date:   Mon Mar 16 19:45:07 2009 +0530

    Fixed printing of 1/cos(x)*sin(x) to sin(x)/cos(x)

    Tests written.

    Signed-off-by: Akshay Srinivasan <akshaysrinivasan@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2b875365e8607dd0207b79058bc4c31abb010959
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Mar 24 19:52:43 2009 -0700

    recursive trigsimp() implemented, thanks to Alan Bromborsky

    The original trigsimp() was renamed to trigsimp_nontrecursive() and the new
    trigsimp() got a new parameter recursive --- it either calls the
    trigsimp_nontrecursive(), or apply recursively calls trigsimp_nontrecursive()
    on the result from the cse() algorithm.

    Tests written for things that couldn't be done before and can be done now.

    curvilinear_coordinates.py demo was simplified, as it can now handle the
    spherical coordinates just fine.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6f1304df77c1061d9cd5613970272312060d4a0a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Mar 23 17:38:57 2009 -0700

    curvilinear_coordinates example added

    This example calculates all kinds of coordinate transformations and prints
    useful information about them.

commit 0d5b35b8bac1aeb50f5c804818ab143bd7c98ee3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Mar 23 17:38:43 2009 -0700

    Make Matrix.jacobian() work with any vectors

    Previously jacobian() was implemented in a hackish way and only allowed
    calculating jacobians of row vectors. Now the whole algorithm
    is implemented by a oneliner, everything else is just checks. A test was added
    to make sure it works for any combination of row/column vectors.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ccedb6d5677c5dabf187e241d0aa97b134b152df
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Fri Mar 20 11:54:47 2009 -0600

    Solvers: dsolve - Added Bernoulli case

    Test was written as well.

    Signed-off-by: Aaron Meurer <asmeurer@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3cbd44a0d7a8f1b8b9744de69f8706429f7f4a3d
Author: Robert Kern <robert.kern@gmail.com>
Date:   Tue Jan 13 22:55:34 2009 -0600

    BUG: Fixes the issue 1263.

    Signed-off-by: Robert Kern <robert.kern@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0f50aff715bcaa5c92ffde5a5e4dd2293b1c5a6b
Author: Priit Laes <plaes@plaes.org>
Date:   Wed Mar 11 07:52:40 2009 +0200

    Added tests for issues 580 and 689.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 426b0e31ae429c13d4c226baf056c36f0861ed45
Author: Freddie Witherden <freddie@witherden.org>
Date:   Sun Feb 22 23:52:08 2009 +0000

    Add unit tests for the new inverse trig styles.

    Signed-off-by: Freddie Witherden <freddie@witherden.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a84456bbbeee2fff668f0e20e0f0a078bc4a9dd2
Author: Freddie Witherden <freddie@witherden.org>
Date:   Sun Feb 22 23:37:06 2009 +0000

    LaTeX: support multiple styles of inverse trig functions.

    Signed-off-by: Freddie Witherden <freddie@witherden.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9890d854e37373c202054a0a0f170e1e21b6fc8b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 15 23:54:41 2009 -0700

    Fixes the A*f(x).diff(x)*A problem (#1327)

    Before:

    In [1]: A = Symbol("A", commutative=False)

    In [2]: A*f(x).diff(x)*A
    Out[2]:
      d
    A⋅──(f(x))⋅A
      dx

    After:

    In [1]: A = Symbol("A", commutative=False)

    In [2]: A*f(x).diff(x)*A
    Out[2]:
    d         2
    ──(f(x))⋅A
    dx

    The problem was that Derivative was not set as commutative even if f(x) is
    commutative. This was fixed by checking if the argument of the derivative is
    commutative and if so, making the whole Derivative commutative too. Then
    everything works.

    Some tests have to be fixed by making Wild() explicitly not depending on "x".
    One doctest had to be robustified.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Freddie Witherden <freddie@witherden.org>

commit 597b586981c9cc90eeb5eebce31e58150eb4fadb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Mar 16 01:06:28 2009 -0700

    solvers.py: typo in documentation fixed

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e045d8adbc1441cb5904d0269366147308b08b86
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Mar 16 19:56:03 2009 -0700

    Slow tests from core moved to sympy/slow_tests

    Currently the following:

    assert integer_nthroot(10**(500*500), 500) == (10**500, True)
    assert integer_nthroot(10**1000000, 100000) == (10**10, True)

    This makes the tests in sympy/core execute 5x faster.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e5fc03cc430e9a40594023d2d773fc099597f638
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Mar 15 21:18:54 2009 -0700

    Remove the print statement from tests_latex.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2e99fc0d21958cb36b15403619137e5e177e8e3d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 11 13:42:05 2009 -0700

    0.6.4.beta2

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 811bb4ce7fd0f06d98b698104b1c0206884e7ec8
Author: Henrik Johansson <henjo2006@gmail.com>
Date:   Wed Mar 11 20:07:41 2009 +0100

    Fixed a bug in the Matrix latex printing code

    Testcase for Matrix latex printing added.

    Signed-off-by: Henrik Johansson <henjo2006@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1f9382670e15e3b722cd9af0b89fafa725c0d541
Author: Priit Laes <plaes@plaes.org>
Date:   Mon Mar 9 21:04:32 2009 +0200

    Fix corner case in simplify when exp() is involved.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8aff1d7ae41de88ce4bcda544e03d608e8718dd9
Author: Priit Laes <plaes@plaes.org>
Date:   Thu Mar 5 20:57:50 2009 +0200

    Fixes bug 1308, use number symbol for E instead of exp() in simplification

    Fixes bug 1308 - simplify gives error on expressions containing exp()

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d6fbd1c983bea0b7b17a4590d7df6429f927240d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 5 17:56:42 2009 +0100

    Make Poly.__pow__ work with -Qnew

commit c5e6ef1eb2c1e2e00679b6cdd347ac4bde2a800f
Merge: 94b814a 413d5d0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 5 09:10:02 2009 +0100

    Merge branch 'ratint'

commit 413d5d0ed89c18e2700e39af725fa076f7f84a04
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 5 09:01:21 2009 +0100

    Robustify another test in sympy/solvers/tests/test_solvers.py

commit dbcc212fdc1a26bce79126b8ab1c370ec8bbf14a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 4 19:01:24 2009 +0100

    Added test for accidentally fixed issue #953

    In [1]: integrate(cos(asin(x)), x)
    Out[1]:
                   ⎽⎽⎽⎽⎽⎽⎽⎽
                  ╱      2
    asin(x)   x⋅╲╱  1 - x
    ─────── + ─────────────
       2            2

commit 3bc7f0222ade0dd6e3f2a7c6038ce29f30eeb95c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 4 13:36:42 2009 +0100

    Convert exact Reals to Integers in Poly.as_integer() (#1182)

    This allows to use factor() on polynomials like:

    In [1]: p = (30.0 + 25.0*x**2 + 11.0*x**4 + 5.0*x**6 + x**8).as_poly()

    In [2]: factor(p)
    Out[2]:
    ⎛     2⎞ ⎛     2⎞ ⎛     4⎞
    ⎝2 + x ⎠⋅⎝3 + x ⎠⋅⎝5 + x ⎠

commit ca55ef881b53db7db9c63ebd879078e1da290d52
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 4 10:29:43 2009 +0100

    Removed poly_* functions from the global namespace (#1313)

    To use poly_div, poly_gcd and others, issue:

        from sympy.polys.algorithms import poly_some_function

commit fdbdb30a141934638325a4e572163ac5baa31fca
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 3 20:27:44 2009 +0100

    Use ratint() by default in integrate()

commit b666c9dc22fd04be96e4f128f90b77f8c1d7dfef
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 3 13:53:11 2009 +0100

    Removed input upper bound from zzx_heu_gcd

    The upper bound, suggested by literature, included size of input
    polynomials' coefficients and their degrees. However it seems that
    it was set far too low. In fact experiments show that no limit is
    needed in SymPy's implementation, because heuristic gcd never hanged
    and seems that almost never failed. This only verifies conclusions from
    Maple implementation which is used almost for any input there. Of course,
    in both cases there is a fallback algorithm (in our case modular gcd).
    A future question is how this algorithm will scale in multivariate case.

commit 3aca39a0c13c0b226cb1046a0aab968d39f38c30
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 1 05:35:49 2009 +0100

    Refactored roots(), use factor() by default

    factor(), in univariate case, is sufficiently fast to use it
    by default when computing roots. Currently only Z[x] and Q[x]
    polynomials are supported but soon algebraic extensions will
    be implemented, so more classes of polynomials will be handled.

commit f5657f737ed586a92b9ef51d34ce141dc5ac07b0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 1 11:22:11 2009 +0100

    Robustify test in sympy/solvers/tests/test_solvers.py

commit 695c8856ac2c3743e376e9ed6fe7a19ba559a3be
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 1 04:46:38 2009 +0100

    Added missing import in sympy/polys/factortools.py

commit adc894ab32ec250abaa3fbe8f9821aa87a9dbd92
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 1 04:43:46 2009 +0100

    Fixed Pow._eval_is_real for sqrt(-1 - sqrt(2)) case

commit bdbafbb2a6d2726000f8032ca94a7a005c5da93c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 1 03:30:15 2009 +0100

    Fixed zzx_heu_gcd() to support very large coefficients

commit 2cdf1a181c574b1b8d6c1ec177c670ff18c4a56f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 1 02:25:52 2009 +0100

    Implemented tools for integrating rational functions

    A complete set of tools for integrating rational functions
    in a field or a real field was implemented. The algorithms
    include:

     1. Horowitz-Ostrogradsky method for splitting a rational function
        into a rational (or polynomial) integral part and transcendental
        ingegral part and doing the actual rational integral.

     2. Lazard-Rioboo-Trager method for integrating the transcendental
        part in terms of sums of complex logarithms.

     3. Rioboo method for converting complex logarithms to real
        functions, via rewriting them into arctangents and real
        logarithms, in case of real field.

    Note that all methods work in the ground field most of the time and if
    any extensions are needed, those are extensions of minimal size. This
    avoids extensive computations in algebraic domains (e.g. gcd) and doing
    any factorization into irreducibles. All outputs can be returned in both
    formal forms as RootSum instances or fully / partially evaluated.

    Example:

    In [1]: from sympy.integrals.rationaltools import *

    In [2]: P = x**7-24*x**4-4*x**2+8*x-8

    In [3]: Q = x**8+6*x**6+12*x**4+8*x**2

    In [4]: ratint(P/Q, x)
    Out[4]:
                 2      3
    4 + 6⋅x + 8⋅x  + 3⋅x
    ───────────────────── + log(x)
                3    5
       4⋅x + 4⋅x  + x

    In [5]: ratint(x**2*P/Q, x)
    Out[5]:
                                     2       3               ⎛    ⎽⎽⎽⎞    2
           ⎛     2⎞   12 - 16⋅x + 6⋅x  - 14⋅x        ⎽⎽⎽     ⎜x⋅╲╱ 2 ⎟   x
    - 3⋅log⎝2 + x ⎠ - ──────────────────────── - 5⋅╲╱ 2 ⋅atan⎜───────⎟ + ──
                                  2    4                     ⎝   2   ⎠   2
                           4 + 4⋅x  + x

commit 723205a8164962d447007f7658d55b53ce8688f9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 28 18:25:33 2009 +0100

    Renamed 'b' to 'base' and 'e' to 'exp' in Integer._eval_power

    This change was needed to make the code run at all. However
    it does not work anyway. Code for handling large integers in
    _eval_power should be refactored and tests should be written.

commit 891a17a25b916845a9d0b5dede53d2a521637d13
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 3 15:07:29 2009 +0100

    Robustify test concerning numerical evaluation of an antiderivative

commit 94b814aa7d356a17a4d96b450361b7ea687927fa
Author: Priit Laes <plaes@plaes.org>
Date:   Thu Feb 26 21:56:28 2009 +0200

    Fix heuristic algorithm to work with more forms of asin/asinh.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit a56f24a043c2b13fde7f1658c1d622237ce081da
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 28 18:06:14 2009 +0100

    Added simplifications of type cos(4*pi/5) = cos(pi/5) to sin() and cos()

    Simplifications of this kind are very important e.g. in symbolic
    root finding algorithms. Also added explicit support for k*pi/5
    in both sin() and cos().

commit 650741d326f6f595bcd480585d314ac2d572553f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 28 17:33:37 2009 +0100

    Fixed number_of_real_roots to handle trivial input

commit 04c53c8ea09b8ca1beca08508a1a9ec960494ebd
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 28 16:07:27 2009 +0100

    Implemented Poly.inverse for computing multiplicative inverses in K[t]

commit 4099fe1859a82b4a0c9157c545fbc62457253512
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 28 11:55:08 2009 +0100

    poly_half_gcdex() now returns monic GCD, the same as poly_gcd()

commit 31d3baa52bd33acb4623a20cca4f13703f3a1f48
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 28 04:23:19 2009 +0100

    Fixed bug in Poly._eval_subs, now properly handles zeros

commit a12128d27291c05aed2976f6fb62aae963797c9b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Feb 27 22:30:00 2009 +0100

    Fixed poly_sqf to handle content removal properly

commit d5f7a6039974532b7e685360b1edfb5e3db1c700
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Feb 27 22:25:03 2009 +0100

    Implemented poly_reduce (removes common content)

    poly_reduce() removes common content from a pair of polynomials.
    It was needed to simplify some algorithms in which non-monic gcd
    computations together with pairs of divisions where required
    (e.g. sqf, cancel).

commit 1c33a6e3fe99040bbc2a619d5a6dec7e8f2ff775
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 26 18:20:38 2009 +0100

    Poly.cancel now removes content from p/q properly (#1303)

    In [1]: var('zr zc')
    Out[1]: (zr, zc)

    In [2]: zup, zlow = zr, 1/(1/zc + 1/(zc+zr))

    In [3]: zc/(zc+zr) * zlow/(zlow+zup)
    Out[3]:
                         zc
    ────────────────────────────────────────────
              ⎛1       1   ⎞ ⎛          1      ⎞
    (zc + zr)⋅⎜── + ───────⎟⋅⎜zr + ────────────⎟
              ⎝zc   zc + zr⎠ ⎜     1       1   ⎟
                             ⎜     ── + ───────⎟
                             ⎝     zc   zc + zr⎠

    In [4]: simplify(_)
    Out[4]:
              2
            zc
    ───────────────────
                2     2
    3⋅zc⋅zr + zc  + zr

    Previously, both numerator and denominator in the above fraction
    returned by simplify() (in fact Poly.cancel) were multiplied by
    a constant.

    Reported-by: Freddie Witherden <freddie@witherden.org>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit af716e615da136bf7cf80b2992bfcb0140f3f58e
Author: Freddie Witherden <freddie@witherden.org>
Date:   Sun Feb 22 23:01:17 2009 +0000

    Fix a bug in the LaTeX function bracket folding code

    Before it would sometimes result in brackets not being folded.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c16b9d11409b5d1ddb66ba6be06c9234fbe7cef9
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Feb 20 13:50:38 2009 +0100

    raising string exceptions is deprecated

commit f1adf01f7f3241003521f08b46921ec9fea89128
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Mon Feb 9 19:55:27 2009 +0100

    Solve bug, abs(x**2) was simplifying always, but this is only true
    when x is real

    Added test and docs

commit 3756b9b7e89ad039c5d866fa9b1db5ab4500a5e0
Author: Felix Kaiser <felix.kaiser@fxkr.net>
Date:   Tue Feb 17 14:05:00 2009 +0100

    Updated Felix Kaiser's email address.

commit 4e08d59e32b1e65fcc2f843c2bea3a0b604716f3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Feb 19 13:56:10 2009 -0800

    Test in test_str robustified to work on all platforms

commit d07bfa54959b9a7c1eab1d89c19fa1fc9cd6a414
Author: Felix Kaiser <felix.kaiser@fxkr.net>
Date:   Thu Feb 19 22:29:45 2009 +0100

    Implemented s.s.d.Sample.median

    Also, Samples are now automatically sorted (I need
    this for calculating the median).

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6855d85a6af4c46d8572e7d068b2751a38dc4610
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Thu Feb 19 10:12:11 2009 -0600

    Trivial fix to all.py example script.  Fixed my sloppiness with the doc string and removed some debugging print statements.

commit 4c11c2f2ed7cd6e818317e320f713e34c5db68d6
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Feb 18 08:42:01 2009 -0600

    More explanation for running examples in readme.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7e1258f35ee57cf00363fec2c3a307ff191eee9d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 14 11:28:38 2009 -0800

    Ted added to credits

commit e6adf789522aefc5daecc0ad64df98745d1985e0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 14 11:27:11 2009 -0800

    README: Download instructions updated

    They were still for hg, updated to git

commit 2b4b7b18adfb08691771c4e9bb26f962962f2432
Author: Ted Horst <ted.horst@earthlink.net>
Date:   Fri Feb 13 13:18:33 2009 -0800

    Fixes Basic.__call__() by calling .subs() from there

    The code in Basic.__call__() was broken, now it works.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9fc3cdb31144e69450168ae7b000d8b1a2560087
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 8 23:58:08 2009 -0800

    sympy 0.6.4.beta1 release

commit 48848ab8d5155fdcd52971b8da272b0f66011990
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jan 11 02:30:21 2009 -0600

    BUG: (x**2).is_even fixed (#998)

    When checking if a Pow expression is even, check that the base is an integer rather than the exponent. With test.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e64f22f422f9a77fd9946c4711dc5da9e469d223
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Feb 5 22:58:42 2009 -0800

    license: the year 2009 added to the copyright

commit 55ba62449b5979f5ecf4b6c16d4a7074fcc3f66e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Feb 5 22:57:24 2009 -0800

    docs: year 2009 added to copyright

commit 36bf543c905d107442a4357601d2cbd148584c4b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Feb 5 22:27:33 2009 -0800

    docs: links to GA and latex_ex added

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 892e86aead2a277ccf5b5deb02ef8e94a04fe8fe
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Feb 9 01:34:43 2009 +0100

    ntheory: fixes a doctest error by robustifying the doctest

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8c74402728f587096c411a0271740c55f2540c5b
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sun Feb 8 12:41:58 2009 +0100

    Improvements to integer factorization

commit 12947b5d77f740f2b7be019d00ef36d42c0c2490
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sat Feb 7 22:36:39 2009 +0100

    mpmath: fix another division bug

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 72bc3203a69318d6a31acb2eb519a851351f5871
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sat Feb 7 21:54:19 2009 +0100

    fix integer divisions in mpmath

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit dc6736a56da7c054a7fc00e486b258bd73bade24
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Fri Feb 6 14:50:44 2009 +0100

    Update sympy.mpmath to mpmath-svn

    * A few fixes in evalf.py were needed. In particular, I simplified the
    extrapolating
     numerical summation code to just call mpmath.nsum instead. It is a bit slower,
     but works better.
    * statistics.Normal now uses mpmath.erfinv instead of the ad-hoc implementation
    * A few other small interface incompatibilities in mpmath were adjusted for

    All tests pass, but I could have broken some imports etc that cause it to
    pass only by accident on my machine.

    The new mpmath docs are not included in this patch.

    Also, no particular support has been added for any of the several new functions
    in mpmath.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a79c0410f7545ab09e0b7dca4b2f9378f076a9a4
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sat Feb 7 08:42:16 2009 +0100

    Don't import os globally in the top level module.

    This could represent a security risk if sympy was allowed to run in a
    'safe' environment in which sympy was the only module allowed to be imported
    since you could have access to the os module at sympy.os. Currently
    django-sympy works this way, althought it is planned to change.
    It is no problem for apps that run on the googleapp engine, since the python
    interpreter they run on has no os module.

commit e46b797549d1a8d0fb908405a1a0e48f06c02506
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Feb 4 16:18:36 2009 +0100

    Do not return pretty xml by default in sympy.printing.mathml.mathml as it does not validate.

    If you want pretty xml, use print_mathml instead.

    Signed-off-by: Fabian Seoane <fabian@fseoane.net>

commit f837ae7355941cf49bce8669e72ff718d8bbc5ef
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Feb 5 22:44:12 2009 -0800

    Formatting in GA.py fixed

    Use space after commas

commit 19b1cd37df2aeed62e5ec345de82da59303b5263
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Feb 5 22:42:37 2009 -0800

    Do not doctest GA.py and latex_ex.py, because they depend on numpy

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fa86aef7c67e5f5d1a5cf4da9e0413dca32de53d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Feb 5 22:30:40 2009 -0800

    GA doctests fixed

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5ba7d922eab0d9c09b70761a679df931ca5e3e37
Author: Alan Bromborsky <abrombo@verizon.net>
Date:   Thu Feb 5 10:50:45 2009 -0500

    Changes class LaTeXPrinter to LatexPrinter.

    Removed old documentation in galgebra/doc. Changes printer class name in documentation.

    Signed-off-by: Alan Bromborsky <abrombo@verizon.net>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b43b9dc2562134a332491579d5219a0762889377
Author: Alan Bromborsky <abrombo@verizon.net>
Date:   Sat Jan 31 17:05:04 2009 -0500

    Upgrade of galgebra removed GAsympy and latex_out

    Also added GA and latex_ex added documentation for GA and latex_ex added
    examples fixed and added doc stringd to test_GA.

    Signed-off-by: Alan Bromborsky <abrombo@verizon.net>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ef62195c537ad4db7c69e42619603f6d7f1122e9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Feb 4 15:16:48 2009 -0800

    matrices: white space fix

commit c88a9047e22ddb39b4cd0e5a1f29c9bf914741c3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Feb 4 16:17:07 2009 -0800

    White space fixed

commit a445e30f87464c711b0af8d981d43f22c9ac793e
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Feb 4 01:04:19 2009 +0100

    Add support for printing tuples with the mathml backend

commit 0fb9e8517d24f53fc77c24c6194036ee5679452a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Feb 2 09:36:52 2009 -0800

    Removing bench_float.py, because it is obsolete (#1281)

commit 520d094532e69e6a0f5d0fa7ab7d9fa79534f1be
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sun Feb 1 10:27:41 2009 +0100

    Use S(1) instead of S.One in tests (more readable).

commit 9a3a37e5b06dcc62991183e04b22b2f1bff3ff67
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Jan 30 18:48:42 2009 +0100

    Solve '.coeff() fails for -x/8 + x*y'

    Basic.coeff now uses collect with argument evaluate=False, which
    returns a dict, so there is no need to call match any more

commit 33b209b12d4ad0ead0a70a0f074e917b5ade7f88
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Jan 28 02:22:58 2009 +0100

    Solve bug in collect.

    The bug caused a wrong result when collect was called with
    a product as second argument, for example:

    collect(1+x*(y**2), x*y) returned 1+(x*y)**2.

    The problem was that after matching the expression, it failed
    to build the matched object (lines 653-659 of simplify/symplify.py)

    The behaviour of collect.parse_expression was changed to allow matches
    of constants, which solves bug #1221: "collect(-x/8 + x*y, -x) fails"

    Some doctests were changed because multiple answers where correct:
        - z*(1 + a) + x**2*y**4*(1 + z) (old behaviour)
        - z*(1 + a + x**2*y**4) + x**2*y**4 (new behaviour)
    This test was however added to test_symplify.py

    Also, some doctests were uncommented since they work now ok

commit d67c68971c79c4b177bf196ca3f36621c7dfb71e
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Tue Jan 27 22:01:28 2009 +0100

    Documentation for symplify.collect's internal methods.

commit 5b6486dd6184dd3f5303d473fc41029bb9b27d49
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Jan 28 13:56:43 2009 +0100

    Add a test for issue #1120, "solve(Eq(cos(x), sin(x)), x) hangs"

    Issue is solved in trunk, but didn't have a test. It was probably
    solved when we added guess_solve_strategy to solve's routine

commit 26d296b4ed10816af7b90daae307987b2d38b1ea
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 24 19:55:01 2009 +0100

    Implemented rsolve() recurrence solvers wrapper

    This is a preliminary implementation of rsolve() using rsolve_hyper()
    as the main recurrence solver. The syntax provided by rsolve() is in
    general similar to Mathematica's syntax. The main difference is the
    way initial conditions are specified, e.g.:

    In [1]: f = y(n+2) - y(n+1) - y(n)

    In [2]: rsolve(f, y(n), { y(0):0, y(1):5 })
    Out[2]:
                       n                      n
          ⎛        ⎽⎽⎽⎞          ⎛        ⎽⎽⎽⎞
      ⎽⎽⎽ ⎜      ╲╱ 5 ⎟      ⎽⎽⎽ ⎜      ╲╱ 5 ⎟
    ╲╱ 5 ⋅⎜1/2 + ─────⎟  - ╲╱ 5 ⋅⎜1/2 - ─────⎟
          ⎝        2  ⎠          ⎝        2  ⎠

    Currently supported are all kinds of recurrence relations that
    are supported by rsolve_hyper(), i.e. linear with polynomial or
    fractional coefficients (by removing denominators using LCM and
    exact division), homogeneous or inhomogeneous (hypergeometric).

    See the docstring for details on the exact syntax.

commit 42219e8669ace82903581ed4124859da000dcdad
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Jan 23 17:46:01 2009 +0100

    Rename canonize to eval

    For backwards compatility, function .canonize was not deleted, but only
    deprecated (with the deprecated decorator, that prints a deprecation
    warning). This decorator was added to sympy.utilities.decorator

commit 8d2d067d36ee99c7033cc444da0df8166f38d4b4
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Jan 23 14:12:32 2009 +0100

    Add docstring to solvers.recurr explaining the structure of the module.

    Text is from Mateusz Paprocki: http://groups.google.com/group/sympy/browse_thread/thread/50d0914d12233b80?hl=en

commit 456d0328c85fe8a5f85c9f659d9b2a89f4968a24
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Jan 23 13:56:54 2009 +0100

    Documentation for the solvers module.

    Some changes where made on dsolve's docstring  because the docstring's
    markup was clashing with sphinx's markup

commit 4ce8663ce0ec07e63e4b4391a69d0d4cf226ebd8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 20 22:04:55 2009 -0800

    Kaifeng added to credits

commit 926cbe1f27a019d93489f321925ba670c26ed41b
Author: Kaifeng Zhu <cafeeee@gmail.com>
Date:   Tue Jan 20 22:03:13 2009 -0800

    Fixes an infinite loop in factorint()   (#1257)

    Signed-off-by: Kaifeng Zhu <cafeeee@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0c8045d0a8724bf80f450c3b726e5667ad149662
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 20 21:46:47 2009 -0800

    Adding Andrew to credits

commit bbddfc4e479f3387a5d839c237459c6f9578d4d3
Author: Andrew Straw <strawman@astraw.com>
Date:   Sat Jan 17 14:38:34 2009 -0800

    DeferredVector implementation, allowing lambdification using arbitrary vectors

    The idea is to create x = DeferredVector and then use x[0] or x[2]
    when building functions for lambdify. Then, the first argument to
    lambdify can be a single variable, which will then get indexed.

    Further ideas:

    1) Should this be a DeferredMatrix instead? This would allow entire
    matrices to be used this way.  Attention would need to be paid to
    allow maximum compatibility with numpy slicing.

    2) Should a DeferredVector (optionally?) specify its length at
    instantiation? This could allow for automatic shape checking in the
    lambda function.

    Note, this has not been tested for use with anything other than
    lambdification with numpy yet.

commit c6dd264d511e2e4a75a63b802c64ca953113cc8c
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Jan 15 15:03:42 2009 +0100

    fix compiler warnings in compilef.py

commit 342487d3c7f4053977bacef6785ca0ec2dfffa35
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jan 19 12:36:54 2009 -0800

    rsolve_ratio test robustified

    Previously it expected to always get C1 in the result, now we test for either
    C1 or C2.

commit 2fe79488dda7103b2d282314a2253b2a540f6505
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Mon Jan 19 12:56:47 2009 +0100

    Calculate rational roots in roots() before calling degree-specific formulas.

    Since no cubics of quartics formula is used in the determination of rational roots and the algorithm is fast, rational roots are first computed for all polynomials. In some cases this also reduces the degree of the polynomial, thus solving polynomials that where before unsolvable.

    As a side-effect, rational roots are returned even with quartics or cubics set to False.

commit ffa1a83bc877983892673f90c96f476adee1aaec
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Thu Jan 15 13:38:39 2009 +0100

    Use by default cubics and quartics formula on roots().

    Docstring of roots by Vinzent Steinberg.
    This has been discussed on issue #1158.

commit 37c66c5d7a2dfec5793ccc9562208717763236e0
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jan 11 21:14:30 2009 -0600

    BUG: Allow Piecewise to be pickled.

    Signed-off-by: Robert Kern <robert.kern@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9b13ed1c70d88c08a930c4d9e44cd412bc1f776b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 11 18:23:28 2009 -0800

    Do not test pickling for regular python functions (#1259)

    E.g. we deleted sqrt, assoc_legendre, Ylm and Zlm, because those are just
    Python functions, that return some other symbolic expression. This was working
    in python2.5 and later, but failed in python2.4. Since it was useless to test
    these, we just removed them.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Robert Kern <robert.kern@gmail.com>

commit d82a52fc4ed998ba406c9779aa10dcf11c8c8eb4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 11 18:19:09 2009 -0800

    Tests functions pickling explicitly

    Previously the sympy.function module was imported and dynamicaly queried for
    all symbols and then all of them were tested. This was not robust, so we now
    import and test everything explicitly. In the next patch, we remove the
    problematic tests, so that things work in python2.4.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Robert Kern <robert.kern@gmail.com>

commit d0122446f2dece6ae2351abdb50aa9b2c8311d32
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sun Jan 11 19:05:54 2009 +0100

    Fix roots_quartic:
       - cubic is now called roots_cubic
       - normalize arguments

    Also implemented some tests, apparently this method was not tested
    at all (!!)

commit f4d63497624f9259d52a9567bcd5aa2185302b1b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 11 09:17:11 2009 -0800

    Fixes the -Qnew bug in guess_solve_strategy tests (#1260)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9210f1e724ba4ebe1911563217fe1192f6f7978f
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jan 11 04:52:15 2009 -0600

    ENH: Also test that copy and deepcopy work.

    Signed-off-by: Robert Kern <robert.kern@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 2651f570b517f0dfcc400c184545484002fa9643
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jan 11 01:23:27 2009 -0600

    BUG: Implement __getnewargs__ to allow protocol 2 pickling

    Some classes may not be fixed if they were not already tested in test_pickle.py

    Signed-off-by: Robert Kern <robert.kern@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e6becad22a44725ae04a2976552e16aa8fff9827
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jan 11 04:03:17 2009 -0600

    BUG: the lists for map() need to be the same length

    Signed-off-by: Robert Kern <robert.kern@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3c3b4152ec8eca09d22c33dca9e3bc7f8f43be74
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jan 11 00:02:58 2009 -0600

    BUG: Allow BasicMeta subclasses to be compared with sympifiable objects.

    They always compare as unequal.

    Signed-off-by: Robert Kern <robert.kern@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b1127626eafb95e6bb7032bd9d444e6bfa424711
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Tue Dec 30 20:33:51 2008 +0100

    Refactor Rational._eval_power

    Implemented factoring on negative roots, now (-8)**Rational(1,3) returns
    2*(-1)**Rational(1,3). This is important, for example, in solve, so that
    it doesen't return uneecesarry long roots

    Removed unnecesary nesting, renamed variables b -> base, e -> exp

commit 33708173840bdf96f96ae902d5d1805879e99a91
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Dec 30 16:49:25 2008 +0100

    Change test mechanism, fix Issue #1141.

    Now tests are executed in the test_file function scope and
    uses a clean global dictionary every run.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4e3d8ab350dccc1eb9bb789568d355560c998d5c
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Dec 30 16:36:58 2008 +0100

    Make pretty test __name__ indipendent.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 520b72cce22d33a65a13b194d4319cfea67693e8
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Dec 30 16:08:38 2008 +0100

    Fix XPASS names output

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3cf02fbafbdd43e924dd5c2b20c0ea219bb740c1
Author: Freddie Witherden <freddie@witherden.org>
Date:   Thu Dec 25 23:07:52 2008 +0000

    Switch to a dictionary for LaTexPrinter options.

    Signed-off-by: Freddie Witherden <freddie@witherden.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 54e5c7afb26b666e05e7573156064feff1870511
Author: Freddie Witherden <freddie@witherden.org>
Date:   Thu Dec 25 21:38:07 2008 +0000

    Add support for multiplication symbols to LaTeXPrinter.

    Signed-off-by: Freddie Witherden <freddie@witherden.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit abe9b36ec82aa0562194347a83eea3a146e787e3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Dec 28 13:06:08 2008 +0100

    Better wording in the AUTHORS file

commit 81f4cb6b969ab842296d376cc13c529787ed4081
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Dec 28 13:05:03 2008 +0100

    Brian added to credits

commit 5e7e21dbb7121fe76e0d03f3c79aeb52d174dd8d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Dec 27 20:54:55 2008 +0100

    tests for Matrix.eigenvects() robustified

    The ordering of the result of eigenvects() was platform dependent due to
    hashes. That is ok, but when we test it, we need to make the comparison
    platform independent (otherwise it fails in jython), so I introduced a
    canonicalize() method in the matrix tests. See it's docstring for more info.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c1fdd853a9ef6a5553a7462ac8b338e0940472bb
Author: Freddie Witherden <freddie@witherden.org>
Date:   Wed Dec 24 16:49:00 2008 +0000

    Add support for function bracket and fractional power folding to LaTexPrinter.

commit 16f3707b9e74b7009c69684f322d11a877e9185a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 5 23:43:11 2008 +0100

    aboutus.txt: adding a note that the list is not complete

commit d02eededb3836d577efe087c9a18b53009c22533
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 29 22:34:59 2008 +0100

    Removing Kirill from credits.

    This was done on Kirill's explicit request in the thread:

    http://groups.google.com/group/sympy-patches/browse_thread/thread/9acef0e4b99a98

                                      .--.  .--.
                                    ._'   |/   :.-,
                                   |  `'.-;-.;`  .'
                                   _:._/.'.'.'\.`-.
                                  /    \.'.'.'/    /
                                  '-._.;`'-'-';---'  ,  />
                                  jgs /   /|   \'-.  \\/(
                                      `--' `-.-'   `\|_.-'
                                                     `\
                                                       '

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 10556dfad71bfbac338151b578e478360ef2aa2d
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Dec 9 18:13:53 2008 +0100

    First implementation of the second quantization

commit 6269381e667a6a6d0021f91fdc102ae9f7c60ff9
Author: Brian E. Granger <ellisonbg@gmail.com>
Date:   Tue Dec 9 18:12:32 2008 +0100

    Adding setupegg.py to allow python setupegg.py develop

commit 334917603895aba3e9f7b7d2171afeaf9f4c0bcb
Author: Freddie Witherden <freddie@witherden.org>
Date:   Tue Dec 16 13:31:25 2008 +0000

    Add support for simplifying sin(asin(x)) and equivalents

    Also auto-simplify tan(<x>(...) and cot(<x>(...)) where <x> is an inverse
    trigonometric function.

    Signed-off-by: Freddie Witherden <freddie@witherden.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c918bdeddf8a7d71c78a09815f4640c0f4481e02
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Dec 16 00:09:34 2008 +0100

    Freddie added to credits

commit 0c66640cd0e9e079524f18f765ae8e4c8cfcab52
Author: Freddie Witherden <freddie@witherden.org>
Date:   Mon Dec 15 21:53:05 2008 +0000

    Add support for simplifying asin/acos/acot when passed as an argument to sin/cos.

commit 20d1d2f399d93249f979fdcb2568fed2556eb73e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Dec 15 19:56:15 2008 +0100

    AUTHORS file added to MANIFEST.in, so that it installs properly

commit 6a3cfdcedada280e955feb49e801e4efac9ea525
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 27 23:26:22 2008 +0100

    the list of authors moved to the AUTHORS file

commit b6b3067621fb031b7a132340421beeef7ec68371
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 27 23:23:27 2008 +0100

    README: history making more accurate.

    "not active anymore" added to Kirr's name

commit 6d778efd9e3bf66aa448c1d3f36b9271aeecf3c5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Dec 15 19:41:48 2008 +0100

    docs: GSoC info updated

commit dc32fd156079e64dc1b51b7753acc06b62ee8ca4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Dec 15 19:34:28 2008 +0100

    outreach: 3 more blog posts added

commit f47643bf2db2af1c9c5c738f8302bd2d2bed28c9
Author: Freddie Witherden <freddie@witherden.org>
Date:   Mon Dec 15 17:27:21 2008 +0000

    Simplify sin(atan(x)) and cos(atan(x)).

commit 09a2a2221bc665a1c3ca9a86332a764d9f40944d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 10 18:38:54 2008 +0100

    factortools.py: robustify a test

    This test was failing on amd64:

    Failed example:
        factor(x**2 - y**2)
    Expected:
        (x - y)*(x + y)
    Got:
        (x + y)*(x - y)

    Now it works everywhere.

commit f09eaae11548d0baae9e3f5f64f1fa65f683243d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 10 18:19:59 2008 +0100

    doctests: three more modules blacklisted

    Also an information about why each module doesn't work properly added.

commit f457239f1bc750e24e92d74447469c82b5f1b176
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Dec 9 16:53:51 2008 +0100

    Doctest fixes all over sympy

    Now all doctests pass.

commit 918e12c7b0c93aeb1e5b2c6410ed1a38c14b2f3e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Dec 9 16:54:15 2008 +0100

    Blacklisting modules that don't work with doctests

    These modules were disabled:
      * pyglet and plotting needs to be disabled, because the doctests open windows
    with plots
      * mpmath should be fixed upstream
      * compilef.py doesn't import without installing tcc first

commit fc45bb6deeca63142c4f4dade628c075ce93d5b6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 19:10:45 2008 +0100

    bin/doctest: blacklist implemented

    Now we can blacklist any module/file that should not be doctested. Just add it
    to the blacklist variable in bin/doctest. In the next patch, we'll blacklist
    several modules in sympy that doesn't (yet) work with doctests.

commit 923d0dd7c1b86729265753e1ffca0df5d532f404
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 14:21:04 2008 +0100

    Don't doctest files, that cannot be imported

    This is achieved by looking for the __init__.py file and if it's missing, it
    means that such file cannot be imported in python using the "import something"
    syntax (for example all tests in sympy are such a case).

commit a547818f368a4f757ce5bb35efabd7e95b17cd5b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 14:20:56 2008 +0100

    runtests.py: module docstring improved

commit d8165a5b3d3a83eada1e81fedd4fc46df47967cd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 19:45:10 2008 +0100

    Adapt the doctest code to produce nice results

    Mainly:
      * make it actually work
      * better report of failures.
      * fixes couple bugs related to importing

commit fa73567a16da8fb8264b864c5afd176f4ed806af
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Oct 11 19:01:47 2008 +0200

    bin/doctest added

    The respective class SymPyDocTests was added to sympy/utilities/runtests.py,
    but it's code was basically duplicated from SymPyTests. The next patch adapts
    it to work properly with doctests.

commit a663ef702013e2ba8252779999d88664532bed9e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 20 12:59:05 2008 +0100

    bin/test: wrap lines correctly in wider terminals

    Currently, the default width is 80 (e.g. PyTestReporter.write(width=80)) and if
    the terminal is wider, the text doesn't automatically wrap, so it looks ugly
    --- the [OK] are wrapped, but "." are not.

    This patch fixes it by implementing line wrapping.

commit d2e2adeb061529b454263349ae5faab0abfdec85
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Dec 3 21:59:52 2008 -0600

    Fixes print_gtk example and mathml printing for Limits and Integrals (issue 763).

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d8c08d9ff5ff092ac20540197a8496ed86f65eb4
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Dec 3 11:21:29 2008 -0600

    Creating more structure in examples/all.py to differentiate examples that need a plotting window.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b0fd5a6eb50c16ed17343aa69d2b92602b7507e9
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Tue Dec 2 07:49:54 2008 -0600

    Removing tensor example.  Adding qft to all.py.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8b61e5c91cf4a10ef4c1fa0d7b5e895a9ab97d84
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Tue Dec 2 06:40:57 2008 -0600

    Adding a simple differential equation example.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 53989ace1ff6742fcc152f7075f08cbfaea7f446
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Mon Dec 1 18:59:29 2008 -0600

    Fixing the pidigits example.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit cd27bc7ed9dd8f2b5d98143a3ce01a376603f030
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Thu Nov 20 23:17:20 2008 +0100

    Improves the vandermonde example.

    Signed-off-by: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>

commit d8cc5bed332dda10b30ab3c74096a1f00b6fd002
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 20 23:16:01 2008 +0100

    trees.py: example explained in the docstring

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>

commit d998e6b24c84fa6072b10499c53e29e4ba2e0ec3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 20 23:14:14 2008 +0100

    qft.py: the calculation is now explained in the module docstring

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>

commit efb1a5c0d65a96382f7dd154141af81c711ce4ba
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 20 23:12:29 2008 +0100

    relativity.py: add more documentation and a link to wikipedia

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>

commit e19732c7fbd8b45e40be4d98551d1c941e7830b3
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Thu Nov 20 23:04:36 2008 +0100

    Better formatting for examples.
      -- Add docstring to all examples
      -- Use script caller main
      -- Add python runner
      -- remove unnecessary iam_sympy_example file
      -- combine fem_test.py and fem.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 92456e9f0b56c15a62f5f6413de6ba3cdec37c66
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Nov 16 21:42:28 2008 +0100

    Updates ccode printing module according to new printer paradigm.

    Signed-off-by: Fabian Seoane <fabian@fseoane.net>

commit 13eb03a1905efb67a2a8301ae630714b09d63dd7
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Nov 16 08:08:57 2008 +0100

    Rearranging example directories as proposed in issue #1196

commit 9687a95fba7841d42a73fd6b36a2d88f4edee99e
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Thu Dec 4 17:24:48 2008 +0100

    improve debugging of limits using the debugging framework

    also, the variable SYMPY_DEBUG was moved to the beginning of the file
    (sympy.__init__) because otherwise it caused recursive import errors

commit fc3eb495f9998f0e24e9d1a05163f44a805c0653
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Dec 2 14:46:29 2008 +0100

    Tests for Normal.pdf

commit adb9666528b5d0c678b2ae8b206252c79b5e7112
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Dec 2 01:19:10 2008 +0100

    Importing pi in statistics module prevents Normal.pdf to fail

commit ad11a154d7ef6cee659200c7a1ae0a20c97f38c0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Dec 2 13:01:46 2008 +0100

    import sympy: Don't print any warnings in pure Python

commit 0860a354534696040143d874378dd122eafdeb02
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 28 14:40:33 2008 +0100

    Priit added to credits

commit 15c8b31c53b7e7a250f24370278aa4d50861ae38
Author: Priit Laes <plaes@plaes.org>
Date:   Tue Nov 18 18:30:33 2008 +0200

    Add basic line integral support.

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7f223ebbb506bc05d874e0605f5bb454b631243f
Author: Priit Laes <plaes@plaes.org>
Date:   Tue Nov 18 15:57:24 2008 +0200

    Added Curve entity to sympy.geometry

    Signed-off-by: Priit Laes <plaes@plaes.org>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit bd61d79b9297fbdffa7be8ba56fe7b9439868856
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 27 23:08:45 2008 +0100

    Revert "Goodbye SymPy"

    This reverts commit 6a2725086275acd93836a5d60a600c907cfe5bbb.

    This patch was again committed without a review.

commit 6a2725086275acd93836a5d60a600c907cfe5bbb
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Nov 16 17:33:00 2008 +0300

    Goodbye SymPy

                                  .--.  .--.
                                ._'   |/   :.-,
                               |  `'.-;-.;`  .'
                               _:._/.'.'.'\.`-.
                              /    \.'.'.'/    /
                              '-._.;`'-'-';---'  ,  />
                              jgs /   /|   \'-.  \\/(
                                  `--' `-.-'   `\|_.-'
                                                 `\
                                                   '

commit 2ab175ee6cb1a1839ab87cedfc583a9b92a2352f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Nov 23 11:16:01 2008 +0100

    Removed sympy.polynomials, use sympy.polys instead

    All functionality available in sympy.polynomials was reimplemented
    in sympy.polys and greatly improved - this includes functionality,
    speed, code readability, docstrings and tests.

    The interface provided by sympy.polys is very similar to the old one
    so in most cases just change imports in your code. The most important
    difference is that most functions in the new module require explicit
    symbols to be given (this might change in future).

    In [1]: poly = Poly(x**2 + y, x, y)

    In [2]: poly.is_multivariate
    Out[2]: True

    In [3]: poly**2
    Out[3]: Poly(x**4 + 2*x**2*y + y**2 + 1, x, y)

    In [4]: _.as_basic()
    Out[4]:
         2        2    4
    1 + y  + 2⋅y⋅x  + x

    In [5]: factor(poly**2)
    Out[5]:
            2
    ⎛     2⎞
    ⎝y + x ⎠

commit 38982b7d466d5b1f1bd2b188b4194e6dcd3e2b5f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Nov 23 11:07:21 2008 +0100

    Removed Polynomial from printing tests

commit cebcc3df0db29b89937128578741532a6fe2b0ae
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Nov 23 11:00:26 2008 +0100

    Use poly_factors() in rootfinding.py instead of old factor()

commit f3b278cc89a8208ebf64b6cfe2c2250ddacf25a6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Nov 23 10:32:19 2008 +0100

    Refactored kronecker_mv() and factor() functions

    Kronecker's method for factorization of multivariate polynomials
    was rewritten to use Poly and new Z[x] factorization code. This
    way kronecker_mv() seems reasonable for small input, e.g.:

    In [1]: %time factor(x**10 - y**10)
    CPU times: user 16.05 s, sys: 0.17 s, total: 16.22 s
    Wall time: 16.52 s
    Out[2]:
                    ⎛ 2  2      3      3    4    4⎞ ⎛ 2  2      3      3    4    4⎞
    (x - y)⋅(x + y)⋅⎝x ⋅y  + x⋅y  + y⋅x  + x  + y ⎠⋅⎝x ⋅y  - x⋅y  - y⋅x  + x  + y ⎠

    Besides kronecker_mv(), poly_factors() was implemented, and factors()
    and factor() functions on top of it (see above).

    This functionality was the last missing in polys module. Now old
    polynomials code can be safely removed.

commit 314a66151e3c1afb089fa7577894f5628af7d90c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Nov 22 21:42:07 2008 +0100

    Reimplemented factoring utilities over Z[x]

    This patch reimplements univariate polynomials over integers and
    factorization algorithm over this domain. The module was written
    to match galoispolys.py design. All functionality available in
    polynomials/fast/intpoly.py was moved to the new module.

    All subroutines (especially zzx_mod_gcd) use functions provided
    by galoispolys.py module. The most important new development is
    zzx_heu_gcd - heuristic polynomial GCD.

    The new factorization code is 4 times faster on average than the
    old code. Many improvements are possible, especially recombination
    phase in Zassenhaus algorithm should be reconsidered.

commit e9dfc2e149a10bf76a1cea8ece7325821b1fc459
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Nov 22 19:07:27 2008 +0100

    Simplified code in gf_factor (use gf_sqf)

    Now gf_factor uses gf_sqf to compute square-free decomposition
    of a polynomial and then factors each part independently using
    gf_factor_sqf.

    This approach is much simpler than the original one and should
    be faster, especially for large input and modulus, because now
    Shoup's DDF can be used inseted of Zassenhaus DDF.

commit 5ebf5654aa92e6b1a0237b126bd8b8518ece284c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Nov 22 19:05:12 2008 +0100

    Fixed and improved gf_{edf,ddf}_shoup docstrings

commit cb7430d97453741d971c1f6ae03e76b9521bb0c8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Nov 22 18:55:04 2008 +0100

    Removed dead and useless code from galoispolys.py

    The code removed with this patch shouldn't have been committed
    at all with the original commit. If someone would like to play
    with Newton division, it's always possible to checkout that
    commit.

commit 29c39c2a0b0b93eddca00e06196ffa395cc6c15d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Nov 22 18:48:45 2008 +0100

    Implemented gf_{from,to}_int_poly functions

    This functionality will be needed in sympy/polys/integerpolys.py
    to convert GF(p)[x] to Z[x] and Z[x] to GF(p)[x].

commit 81a149ba80d8309e77c1b61182991dfd4789b2f9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Nov 22 18:38:29 2008 +0100

    Renamed poly_factors to poly_root_factors

    This change is needed to implement the proper poly_factors, which
    main purpose will be to compute factorization into irreducibles
    over Q[x] or Q[X].

    Later poly_root_factors will be merged with new poly_factors.

commit ff44243a431e686a538b32a70d360d77c1c8a1ea
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Nov 22 18:19:56 2008 +0100

    Implemented k-subsets generator

    This function was in fact a part of zassenhaus() in
    sympy/polynomials/fast/intpoly.py, but can be useful
    elsewhere. Added docstring and tests.

commit c813b0a37ea6f9d758263af2aba1e75e049586a2
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Thu Nov 27 01:13:25 2008 +0100

    robustify a test on solvers that was failing on amd64

commit 403b9ae12e75e373939bd538c46c4eb99d3e403d
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Mon Nov 24 12:11:01 2008 +0100

    Implement debug framework.

    For now this is just a variable sympy.SYMPY_DEBUG that has values True/False.

    Values for this are set using the environment variable SYMPY_DEBUG

commit 02a162f7a12ab9b2aa9310215a94b97bf5408a5e
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Mon Nov 24 01:33:59 2008 +0100

    Avoid one nesting by reordering a if/else block. This does not change the behaviour of the code, it just makes it more readable

commit 367cfe447239ba50ece25af604ddc42588f4f949
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sun Nov 16 20:35:45 2008 +0100

    Support for more types of expressions in solve

    For this, a guess_solve_strategy method was added

    Before of this, solve() parsed the expression searching for a polynomial
    and if this parse failed, it just called tsolve.

    Now the expression is parsed, and while parsing the best algorithm is
    selected for that particular expression, i.e. not only it is conceptually
    clearer and easier to extend, but there is no need to parse the entire
    expression to decide what strategy to use.

    New features
    ============
        - Support for more expressions, mostly expressions that can
          be transformed to polynomial expressions using simple changes of
          variables. These incluide:
              - x**(p1/q1) + x**Rational(p2/q2) + ...
              - x**-n1 + x**-n2 + ...
              - P(x)/Q(x) (rational functions)
        - tsolve now returns a tuple of expressions instead only one expression.
        - It is easy to add new types of functions. See docstring of
          solve and guess_solve_strategy for more info
        - Test for all new types of supported expressions

    Performace
    ==========
         - If it is a polynomial, it will partially parse the expression twice,
           since it will parse the polynomial inside guess_solve_strategy to
           determine the solve strategy and then it will be parsed again in
           solve.
         - In other cases, it can be faster or it can be slower. For trascebdental
           functions it will generally be faster, since there is no need to
           parse the expression completely

    Random notes
    ============
         - The change of variable could be computed during the parse of
           guess_solve_strategy, and so we could avoid to partially parse
           the expression twice. I didn't implement this because it would
           make the code more complex, it is nice right now that functions
           guess_solve_strategy and solve have a clear separate entity.
           Plus, parsing the expression twice is not a bit issue since
           the parsing is fast, O(n) typically, where n is the number of arguments
           for the expression, and most of the time is spended in simplify
           and in subs

commit 8a44bd4b878062a49e738234f11efcdb26a8ba10
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Nov 26 21:47:27 2008 +0100

    define a variable PYTHON in the doc's Makefile that let's you customize the default python interpreter

    useful if you have several python interpreters, but docutils not installed in all interpreters

commit bdc3d49ab841fe4c20beac59aa1a023d763b5d24
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Thu Nov 27 00:16:35 2008 +0100

    rename disabled -> !USE_PYTEST on utilities.pytest

    ability to run test from python setup.py without havin pylib installed

commit 2327c04f127e656c8eea13d86e72481883d0f615
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 26 23:59:01 2008 +0100

    deleted .hgtags

    Since we now generate the hg repository automatically from the git repository,
    those tags are now wrong anyway. When we figure out how to put there the
    correct ones, the .hgtags file should be generated automatically.

commit 138b778092dc9a34edc6d99810074073dfe345e0
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sat Nov 22 21:35:33 2008 +0100

    Don't track gedit backup files

commit 32bf036e791387930ffb53f27d49846b104e8ebd
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sun Nov 16 20:35:11 2008 +0100

    Do not track mac's .DS_Store files

commit b9cad9bd272fed0dc0b9aa8324c8de3a9f0538c9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 26 20:13:05 2008 +0100

    docs: use sphinx 0.5, enable math equations

commit 41ff29170b279e152bda7af9872240d305b85755
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 21 11:13:22 2008 +0100

    move all py.test imports into try/except clause (#1210)

    This is important, because the new py.test breaks sympy (import py works, but
    not the later imports). This patch should fix it.

commit fe0cf75731c6974e558a83391ed5fc0d50bc59ef
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Thu Nov 20 02:14:29 2008 +0100

    add a comment why a "working" test is xfailed

commit 20bb57ef27d210600e199ebee759d8745b6369ef
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 19 22:30:19 2008 +0100

    Start of the 0.6.4 development cycle

commit df2ac06c7fcc7009146a8bfdcefdd795127688cb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 19 22:10:46 2008 +0100

    Added tag sympy-0.6.3 for changeset b9eb40b444ef

commit 77cd74d5d4cf8ed528c662ccd7b4f748bf9ba76e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 19 21:56:04 2008 +0100

    v0.6.3

commit aad06db53dd5a1f545868d300c377faaa5d59297
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 19 22:08:13 2008 +0100

    docs: fixes the whitespace in the aboutus.txt

    Sphinx generated an error on the page due to a whitespace problem. This is now
    fixed.

commit 10d3cc812a71072ed071f2f05c0e5acc47c260ac
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 18 17:36:24 2008 +0100

    Added tag sympy-0.6.3.beta2 for changeset e13f0bb3af7e

commit 2eef32be2ee7c0bbace333e7aacac7caae22a39b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 18 17:36:17 2008 +0100

    v0.6.3.beta2

commit 651d263611e1fd237f94a5445534ec349d765d01
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 18 17:35:38 2008 +0100

    docs: sympy version updated

commit fcad25b712e8b2626271805847dbf6982f4bd379
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 18 17:31:44 2008 +0100

    contributors list updated

commit 584796c852fe4328a0b74d732721b1830f324b43
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 18 17:07:54 2008 +0100

    test_pure: install sympy first and then test using bin/test

    Previously test_pure only did "setup.py sdist" and then tested using py.test.
    Now it does

    1) ./setup.py sdist
    2) unpacks the tarball
    3) ./setup.py install
    4) python -c "import sympy; sympy.test()"

    That way we test what actually gets installed on the user system.

commit 309d0ea11aad5db205826cf595aa78e75ebbe993
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 18 17:07:53 2008 +0100

    Do not test examples if they are not installed

    Previously, the examples directory was checked for code style. However, when
    the user installs sympy using "./setup.py install", the examples are not
    installed (at least not in the parent directory of "sympy"), so the result is
    that sympy.test() fails.

    Now we only check the examples dir if it's present.

commit 4e1268ed8cc2c041a137bd1e372a73d5dac8654f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 18 17:07:53 2008 +0100

    install bin/test and bin/py.bench with "./setup.py sdist"

    But do not install them with "./setup.py install". This is important, because
    we don't want "test" and "py.bench" to end up in /usr/bin/.

commit a4024997a8bc28b6d130f2b4317d715783b08e30
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 21:54:39 2008 +0100

    Added tag sympy-0.6.3.beta1 for changeset c870fd1fce31

commit e9e822e881fc20c5f19fc66996809653dc62de80
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 21:54:17 2008 +0100

    0.6.3.beta1

commit 3d7b1f6dcdfaf9e7bdd038887bcba9b126ad5fb6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 21:31:44 2008 +0100

    GAcalc.py removed

    Alan: GAcalc.py is a geometric algebra calculator and runs interactively.
    Since you are using ipython it is not needed and should be deleted.

commit 43196ac48a65fbff4431077f6f3c73d18facc164
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 21:31:44 2008 +0100

    galgebra tests added

commit a48da82bf7d2efe4e04b4ecd88a549849ac2dcc4
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Nov 17 21:12:07 2008 +0100

    doctests: add missing imports

commit 5f944d31d849c96280a2fa6f8e1eb525ab084ec9
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Nov 17 21:12:07 2008 +0100

    fix doctests related to printing

commit c5e412f5d74168b4868844eedc581444278ae0a4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 21:12:07 2008 +0100

    Relational doctests fixed

    Those mistakes were there for a long time, but they were not tested...

commit 29d257a699e1a9e49d399e6bb5fcfac310558602
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 21:12:07 2008 +0100

    Make O(1) == O(1, x).

    Apparently sympy works either way, but from a consistency viewpoint, let's have
    it.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>

commit b4114f34477563c1bfcf0721be68480707cbc524
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 21:12:07 2008 +0100

    bin/test: catch SyntaxError when importing tests, better import error reporting

commit 87be322978044f57e8c8c7bc9328b3912fde3e0e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 17 20:16:55 2008 +0100

    Module docstring added to generate_reference.py

commit f406c74bc154915ba86fffd66ef2fc9b4c5d8d2a
Author: Vinzent Steinberg <Vinzent.Steinberg@gmail.com>
Date:   Mon Nov 17 20:16:55 2008 +0100

    evalf documentation

commit 06ca12540e722012f42a049f53bce7976574728e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 17:01:51 2008 +0100

    polynomials: import all() from sympy.utilities.

    This makes it run on python2.4

commit 5c9ea84ac3684ac6bb08c227325225ab1e4dbafd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 16:27:48 2008 +0100

    Fixes implicit imports all over sympy

commit 7ce6798912628152df5f96b6815fb0038e58724a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 16:27:47 2008 +0100

    Test for not using implicit imports in test_code_quality (#937)

    Files that currently don't pass the tests are whitelisted. The goal is to not
    use implicit imports, unless really necessary.

commit 3ba7fbec77add069d6be0f6328e52408f8297572
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 16:27:46 2008 +0100

    sinh(asinh(x)) and similar implemented (#1037)

    The simplifications were already implemented for cosh(), so this patch fixes it
    for sinh() and tanh() as well.

commit 846ba3409b24bd7404f7f58d4674dd91ca5107f2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 16:27:46 2008 +0100

    gibbs_phenomenon example added (#1114)

commit 9efad8600199a09c77aae24270e1f8b5d8577635
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 16:27:46 2008 +0100

    Real.__sage__() implemented (#1155).

    And a test added.

commit 90eed24c6dfb1c7e996d459645998d84b2df0eeb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Nov 14 16:27:46 2008 +0100

    bin/test: print python executable and version info

    Print it the same way as py.test.

commit fa21d9c1c2445ff5775aefa37c6c4cfea45ebd9d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:11 2008 +0100

    SymPy Patches Tutorial: introduction to git added

    The Quick Start section now contains both git and hg. Only the main tutorial
    should be translated to git, but that can wait, until we learn more experience.
    The ideas are still correct.

commit c18843c6a881ebf2df313ab317e7f2a37ba2c31d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    docs: sympy logo added.

commit 643801f5744130b05fe2094270cd9e65e7e58678
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    Use Sphinx 0.4.3.

commit a243f44f1bf9d000d6262e41ba51643cfdeafdfb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    tests: don't use colors if the output is piped

    Now "bin/test sympy/ | less" works fine.

commit b069f305679ead394f3235d5d90371fc2f002c1e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    tests: align [OK] correctly on multiline tests results

commit fb4d0dd6286e18264ed3380b3110cf94752d3ec7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    Debugging leftover from test_str.py removed.

commit 11d5b48f39f8634eebe8437d0d390e356f4294d9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    fixes the "Ignoring redefinition" warning.

    The problem was, that this code:

    class f(Function):
        pass

    class f(Function):
        pass

    generated an "Ignoring redefinition ..." warning in the BasicMeta metaclass,
    which is remembering all subclasses of Basic, so that one can access them using
    "C.SomeSubclass".  Because this is a valid Python code, the code in BasicMeta
    was changed to only remember the latest definition, just like in Python.

    Also a more descriptive comment was written to the FunctionClass metaclass.

commit 065619ec4ac2fb27997425a7a9e3316c24fb47d6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    tests: align [OK]/[FAIL] to the right

commit c20b403ea722471714d3f9ac47692623f00e34dc
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    tests: colored [OK] and [FAIL] implemented.

commit 9a217ae1e8d735cf8a6a3577064b67d66dff9322
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    ModularInteger(): assert integer input

    The ModularInteger() class doesn't work if anything else besides integers is
    passed to it. In order to catch these errors earlier, and assert line was added
    to __init__() checking for integer arguments.

commit 109b055affd562e08811df6b5954a92cf119574a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    numbers.py: small docstring improvement

commit 31494508c14a0877342dc49ff7922929b5b84d20
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:10 2008 +0100

    Fixes integers division ("\" -> "\\") all over SymPy

    Now all tests pass when executed using "python -Qnew bin/test sympy/".

commit e0532f5b6a19e65151727fad5b0b47c78242f7c1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:09 2008 +0100

    missing __truediv__ and __rtruediv__ methods implemented

    Several classes in SymPy were missing the __truediv__() method. This method is
    necessary for the "/" operator when the "-Qnew" Python option is used (i.e. for
    the new division). This patch implements those methods just by calling the
    corresponding __div__ or __rdiv__ method.

commit f145fa4cd59b44480e003ab41772be1ab4647073
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:09 2008 +0100

    Integer.__new__(): use isinstance instead of is_Integer.

    So that if the user executes Integer(3.14), he gets

        ValueError: invalid argument for Integer: 3.14

    instead of

        AttributeError: 'float' object has no attribute 'is_Integer'

commit 9873f90618405da1c9c5c79c6456f8a28ef1321a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:09 2008 +0100

    tests: "--pdb" option implemented

    With this option, the post mortem pdb debugger is launched on each exception of
    failure. See the py.test documentation for more info.

commit 6ce1432be224ec7c28075cb17bd95dadcebe7c68
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:09 2008 +0100

    tests: "-k" and "--tb" options implemented.

    The "-k" options allows one to select particular tests to execute and the
    "--tb" option controls the way tracebacks are printed. See the py.test
    documentation for more info.

commit 5dd97c81d2f67089ba474b28fdee65d58988ac43
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:09 2008 +0100

    tests: more py.test like traceback printing.

    This affects both exceptions and failures. Now it looks almost identical. The
    only difference is that we use the standard Python tracaback, but all the "___"
    lines and the overall feelling should be like with py.test now.

commit ce0f6377da36b52d3369809ea0da7ba8bacae60e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:08 2008 +0100

    runtests -- docstrings added.

commit 445fa4ca44db88ee90ba1cd9654f9f26f0f6763d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:08 2008 +0100

    Removed test_core() as it was redundant.

    Use sympy.test("sympy/core") instead.

commit bf8aa08e996aa072ec4c75494b71e4a296cbdac7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:08 2008 +0100

    Pickling tests fixed.

commit 6fa735b785fb1027fd30db6a0ee95dfbee084bd8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:08 2008 +0100

    Polishing: put space around "==".

commit 3cafd6df671ec9a4b6e2cbfc972007c10ef3bf3d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:08 2008 +0100

    added a test for sympify("lambda x, y: x*y").

    This was not working before and it was fixed by the last patch.

commit fdfcd11930aa40f6579ea32bd2c60d39ff603993
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:31:08 2008 +0100

    ast_parser rewritten to use the "ast" module if available.

    The old ast_parser was copied to ast_parser_python24.py and it is called from
    ast_parser only if the "ast" module is not available (python 2.4 and 2.5). For
    python 2.6 and later, the recommended way of doing these things is through the
    ast module.

commit a5c4d724163cd24cc7d0749c9fd4559160cbc192
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 12 11:27:50 2008 +0100

    Revert "Goodbye SymPy"

    This reverts commit dde86ad5af45e09c2490c94a348857b85a0747fa.

    This patch was pushed in without a review and there were people objecting to
    it:

    http://groups.google.com/group/sympy-patches/browse_thread/thread/25c8fea6d51d2bf5

    So I am rewerting the patch for the time being, until the issue is resolved and
    after we reach a consensus, we'll push in a fix if needed.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5a58fb675758ca7d124aeb55bf3feb996278fb6a
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Tue Nov 11 12:07:48 2008 +0100

    same syntax for symbols() and var(), new syntax for symbols()

    The new syntax for symbols is

    >>> x, y, z = symbols('x y z') # or symbols('x,y,z')

    instead of

    >>> x, y, z = symbols('xyz')

    Please note that this is the same behavior as for var().
    This has the advantage that symbols('alpha beta') is possible.

    Currently the deprecated behavior is default for compatibility. This can be
    changed using the keyword each_char=False:

    >>> symbols('xyz', each_char=False)
    xyz # a single symbol

    If there is a space or comma in the string, the new behavior is automatically
    triggered (if each_char is not set), so you can use the new syntax immediately.

    Furthermore, var() has been fixed to accept keyword arguments.

    Tests have been added.

    Signed-off-by: Vinzent Steinberg <vinzent.steinberg@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit dde86ad5af45e09c2490c94a348857b85a0747fa
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Nov 11 10:33:34 2008 +0300

    Goodbye SymPy

commit 1ab39ae838c707bf58193d44b206a7f0a8e2149c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 6 23:12:01 2008 +0100

    _print docstring: typo fixed.

commit d76ca117ffb5d35257be6469f5133034ebf98014
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Wed Nov 5 07:45:01 2008 -0800

    Rename printmethods from double to single underscore.

commit 8d5d3290cf6cb637fb9e512d5804afc68dfad1c3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 6 22:23:24 2008 +0100

    Henrik added to README.

commit 62fd1785e3fe6792198ba48e773458f06062866b
Author: Henrik Johansson <henjo2006@gmail.com>
Date:   Thu Nov 6 22:23:24 2008 +0100

    matrices: optional zero finder function argument in the inv method implemented.

    plus a note about the pivoting problem in the docstring.

    Signed-off-by: Henrik Johansson <henjo2006@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 52d43747c14d26e85b66c75442d5f4b27082a60b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Nov 5 13:18:07 2008 +0100

    The Planck's constant fixed.

    There was a missing 6 after the decimal digit.

commit d4a698a8e403cfce5d2ca57bf56ec9d1baf40069
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Nov 5 09:46:55 2008 +0100

    Implements printings for Piecewise and ExprCondPair objects.

commit 3529ac3f7bb2873e80bb41fbf742b188304db3d2
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Nov 5 09:46:55 2008 +0100

    Make count_ops work as documented and add test.

commit f2605822e122e0c37a2d0fb4d3f7c40888544fd9
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Nov 5 09:46:55 2008 +0100

    Fixes issues 1035 and 1178:
        -- Issue 1035: Have sympify("x^2") return x**2
        -- Issue 1178: Don't use mutable keyword args.

commit 6e707c9177d8fb402d627aee537e97896f1b8b2f
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Wed Nov 5 08:35:12 2008 -0800

    Make all tests pass on python2.6

    The problem was that python2.6 dropped the __cmp__ method and so the ordering of classes was broken. By introducing __lt__ and __gt__ in BasicMeta the old ordering is retained and all tests pass.

commit 66d792211eb00fcf25a144a5f82001583875c13b
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Tue Nov 4 18:04:02 2008 -0800

    Improve printing system
     - Printer._depth was not needed
     - Raise exception when printing method returns None. The reason
       is, that this most likely comes from forgetting to return the
       result and otherwise it hides this error by using the emptyPrinter
     - Wrote a summary how the printing is supposed to work in printer.py
     - Implemented Brian Granger's proposal of also letting objects define
       their own printing methods.
       (http://groups.google.com/group/sympy/browse_thread/thread/2927bac0810029a0)

commit 0acc8411507337bdaa187439f48248dc8e638695
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 4 23:18:16 2008 +0100

    Fixes a failing doctest.

    Everything works, only the doctest should have been adapted in the previous
    patch.

commit facf275363d64dc1f342bc375969bb51fee3c963
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Oct 24 19:09:04 2008 +0200

    Make the constructor of Derivative treat correctly instances of Derivative.
     It now collapses nested instances, so that Derivate(Derivative(f, x), x) -> Derivative(f, x, x).
    Two XFAIL test now pass. This also fixes #979 and #1124.
    ---
     sympy/core/function.py                |    2 +-
     sympy/core/tests/test_basic.py        |    1 -
     sympy/core/tests/test_functions.py    |    3 +++
     sympy/simplify/tests/test_simplify.py |    1 -
     4 files changed, 4 insertions(+), 3 deletions(-)

commit 4f509ac1cabf33be0a4111912d9c8744d0de6f57
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Oct 20 17:19:52 2008 +0200

    Improved calculation of Bernoulli numbers

    Use mpmath to compute large Bernoulli numbers (bernoulli(10000) is now fast)
    Support bernoulli(10**10, evaluate=False).evalf() via mpmath
    Merge a recent mpmath bugfix without which bernoulli(10**10, evaluate=False).evalf() would give an inaccurate result

commit 8b9fe200b074a9a185d708026cbbb7e759550b2c
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Oct 22 22:39:07 2008 +0200

    Move evaluation of interval to _eval_interval method of Basic.  Allows for functions to override for integration with limits.

commit ee951f483e75f01141ffdc869e9eff9a0a9bd575
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Oct 22 22:13:34 2008 +0200

    Adding ExprCondPair data structure to piecewise objects and cleaning code.

commit 408323ee2eeda768e0cdc660119aa1ba3d239165
Merge: 52730c2 1abcd5c
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Oct 22 22:13:18 2008 +0200

    merge

commit 1abcd5cd601faee7184382c7168cceafac1dbeac
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Oct 22 16:15:39 2008 +0200

    Make Rational accept arguments of type Integer.
    ---
     sympy/core/numbers.py            |   12 +++++++++---
     sympy/core/tests/test_numbers.py |   13 +++++++++++++
     2 files changed, 22 insertions(+), 3 deletions(-)

commit 52730c28391df3f619557c7f061b022b22d89e8c
Merge: a94adf1 87eca42
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Mon Oct 20 23:43:09 2008 +0200

    merge

commit 87eca42507d02c06ca7966103aa0d5ae0690191e
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Oct 20 16:48:16 2008 +0200

    Fix substitution of 0 in evalf of powers

commit a94adf1a5befd8c22ab2e646e01a7cb04cad07ec
Merge: 803ad55 c632e80
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 22:35:40 2008 +0200

    merge

commit c632e8059e21ca389d6db359201bb418999e15f8
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 22:24:48 2008 +0200

    Removing sympify_lists from docstring as well

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 803ad556694e7832021110b4c404947c59fdaed0
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 22:18:21 2008 +0200

    Removing sympify_lists from docstring as well

commit a7f52f1c778a20f755de6fa4d8cf444ff07df84c
Merge: b6cc4d6 226fcd0
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 22:11:59 2008 +0200

    merge

commit 226fcd0b39fcb90c1a2721e5eab200d31f53ed50
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 22:05:25 2008 +0200

    Sympify accepts list and tuple (#883).

    This is a rework of the patch submitted by Boris Timokhin

    - Removes sympify_lists keyword for sympify
    - Removes conversion of lists and tuples of length 2 to Intervals
    - Adds tests for sympify of lists, tuples, and set

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>
    Signed-off-by: Boris Timokhin <qoqenator@gmail.com>:
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b6cc4d68a4b749115e3a4de17706f08edd51623b
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:55:26 2008 +0200

    Issue 883, a rework of the patch submitted by Boris Timokhin <qoqenator@gmail.com>:
      - Removes sympify_lists keyword for sympify
      - Removes conversion of lists and tuples of length 2 to Intervals
      - Adds tests for sympify of lists, tuples, and set

commit d928b3cb29848b310e064c7e6d6d090062d67e4a
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:46:57 2008 +0200

    Adding sympify call to canonized arguments and refactoring code.

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 901180c05782aa0682b6d04a76173bc95d08dac3
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:41:36 2008 +0200

    Adding sympify call to canonized arguments and refactoring code.

commit cc344c5fcb12ebf77e00ec972dee310c2609b83c
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:28:48 2008 +0200

    Removing if else syntax only available in python >= 2.5

commit c2a58c5043a4eb7f8b1aefcc0ae03ab73dbda87a
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:28:48 2008 +0200

    Implement comments from review.

commit 0eec8ac0b7e2b2b2c5be49117369f01ad4fbee3d
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:28:48 2008 +0200

    This patch implements computation for antiderivatives, and integration for one variable with limits.

commit 7013bc35a55a8a356bc7e17d7f7766fc60c8edc5
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:28:48 2008 +0200

    This patch implements evalf for piecewise functions.

commit 68ba5d1e79eb891ab56c3b65ca6e14d25a171422
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:28:48 2008 +0200

    This patch implements doit for piecewise functions.

commit 4abd9df150f183cb52c6608ffead13b4496d2f4c
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 21:28:48 2008 +0200

    This patch changed the function call for Piecewise(sym,(a,b,expr), ...) to a more Mathematica style Piecewise((expr, cond), ... ). It adds support for current functionality with this new interface.

commit 02eed141802e738a50b24e5aa8430a919603fb9c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 20:48:26 2008 +0200

    Konrad added to README.

commit 0397c5ce619ff2d18e1be093ab1be05d7554b8f7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 16:15:19 2008 +0200

    Fixes an old bug in sympy/core/evalf.py:do_integral().

    prec+15 has to be changed to mp.prec.  It needs to be mp.prec for oscillatory
    quadrature because mpmath significantly increases the precision when quadosc is
    called.

    This has been broken in SymPy all along. It only worked in the
    previous tests by accident. The change of quadrature algorithm in
    mpmath 0.10 exposed the problem.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit b124e69eaaa61ef99b4c96c1c4f9fba400d1966d
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Sun Oct 19 20:26:03 2008 +0200

    Removing if else syntax only available in python >= 2.5

commit 77334c53bf90e429a5755144db09065654190fd2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 16:15:19 2008 +0200

    Fixes backwards incompatible changes introduced by mpmath.

    There are just two, one in quadosc and the other one in nsimplify.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit ace3e2781aa236f2ed48c7ec00dd7aee5c899ddb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 16:15:19 2008 +0200

    Fixes mpmath import paths and functions renames all over SymPy.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit 299941840442acd274ff339ce0378529f1bb1d29
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 16:15:18 2008 +0200

    Renames 3 mpmaths tests so that they don't collide with other sympy tests.

    This is needed as a workaround of a py.test bug and to pass our QA tests in
    sympy/utilitites/

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit 44f8b3b7eaae21aef8ea534ffb4f824636b3d7c0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 16:15:18 2008 +0200

    Manual corrections to imports.

    The automatic script fixes allmost all things, but some manual corrections are
    needed.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit ff6d098d00bd220bc54211ac0c6ec720e63e98bd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 16:15:18 2008 +0200

    Imports fixed using bin/adapt_paths.py

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit cb4de8c64181f969bd665e84523b8fb4bc66da0d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Oct 19 16:15:17 2008 +0200

    mpmath updated to 0.10

    The mpmath dir was copied verbatim, only whitespace and lineends were fixed (to
    unix way that we use in sympy).

    We fix other things in the following patches.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit 40d8cb3268f47fd4e2260dae1663d8595b1efcd5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 18:42:09 2008 +0200

    Test for the issue #405 written.

commit ed40385e04d683ad6c443746aeaf12934b688adf
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 18:04:16 2008 +0200

    Robustify extract_leading_order tests.

    The order of the resulting tuple depends on hash, so we need to use set() to
    get a platform independent test.

commit df7577a3141ee9a809b1812002638cb9ffd4383d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 16:24:26 2008 +0200

    BaseException.message is deprecated. Fixed.

    One should use str(e) instead of e.message.

commit 2710480ab5022ef1676fd3511d30ed26c1d52aa3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:23 2008 +0200

    Tests for the issue #605 added.

commit a30e73bab76b60fd30f0420df250982801de6455
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:23 2008 +0200

    Tests for all failures in the issue #991 added.

commit f98a86c7945e332c083ea447c8d479127ff38d15
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Tests for limits in the issue #991 added.

commit 675c6e19b047b2b605989f73d2db0ef46ca56422
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Don't use trig expansion in Order.

    Using expand(trig=True) is useless there and even seems to slows things down,
    on my computer by 0.32s for all series/ tests.

commit ec5dbec1071deeaedb5d15ef123e79b7bd06bcec
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Tests for the limits in the issue #693 added.

commit e2b3b416bb126fe81ab4f2acef861b982a5ef78e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Last XFAILed limit in test_demidovich.py enabled. :)

commit 7365b254cd8fcaf12e724e8f9bb298280c31dc6b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    This fixes the (2+pi+x**2).extract_leading_order(x) problem.

    The problem was that if there is more than one term to return, we need to be
    sure to include both terms in the result. This case was wrongly handled in
    Add.extract_leading_order(), which we just fixed.

    Then there was a problem that some advanced series tests started to hang after
    this patch. As it turned out, sometimes Order(..., x) returns O(2) instead of
    O(1). So we fixed that by applying this patch (at 2 different places):

    -            if o.expr==1:
    +            if o.expr.is_number:

    And the final problem was, that by fixing the as_leading_term(), we had to call
    collect in Pow._eval_nseries() -- previously the wrong as_leading_term() was
    effectively achieving the same thing, but that was just a sheer luck.

commit c2c6c6a8d1125b2676d2e6a0b4ccedc5816c0386
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Test for sin(sin(x+1)+1).limit(x,0) written.

commit 63bea7e794c54f5011890bb52c6ff057eba6630e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Fixes a bug in as_leading_order().

    The problem was that as_leading_order() was calling self.expand(trig=True)
    which was making expressions like sin(sin(1)+1) more complicated and then
    because of other bugs (see #991) in extract_leading_order() it failed.

    The bug #991 is not fixed, but things like the following now work:

    (x*cos(1)*cos(1 + sin(1)) + sin(1 + sin(1))).as_leading_term(x) == \
                sin(1 + sin(1))

    Tests written.

commit 8afeddb5729d4b0df1708452f974ceea77bd0ef2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Tests written for Basic.as_leading_term().

commit 075acc808c46e0795080d5fc9d5d13b604250617
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Docstring for Basic.leadterm() and Basic.as_leading_term() added.

commit 88d431f4cab6df4f15111560d89244ea585d3760
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    gruntz.py: documentation how to debug added.

commit b0a5b5863188685c995425380113f22b4d62fa78
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Tests for sympy.raises.

    This should have been committed with the bin/test patch, but I just forgot to
    "git add" the file.

commit fd3ddfd963ae07331c14d39f14215ff65cafe050
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    test_limits.py: a wrong test fixed.

    The test was basically testing

    limit(exp(y*x), x, oo) == oo

    but this is only true if y is positive, so y was made positive.

commit 4772523f6addc88f197b3711db2e6f8c8b4991eb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Oct 17 15:48:22 2008 +0200

    Fixes sign(y, x) so that it works in python2.6.

    The real problem turned out to be with this code in sign():

        elif not e.has(x):
            f= e.evalf()
            if f > 0:
                return 1
            else:
                return -1

    Which obviously utterly fails if "e == Symbol('y')", because then "f == y" and
    "f > 0" just compares hashes, that changed in python2.6. The solution is to use
    "e.is_positive" instead and everything works just fine.

    Thorough tests for this issue committed.

commit 69c9ef9fa1102e9bc93a6d85c7d55db57ce0353f
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Fri Oct 17 08:47:04 2008 +0200

    Implement comments from review.

commit 51ed7b1ec3b9bfbfbef7fd9b3c939d73ec00030a
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Fri Oct 17 08:33:24 2008 +0200

    This patch implements computation for antiderivatives, and integration for one variable with limits.

commit 8cfa226652bad87c1deddc31e0faf6b2da5c498b
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Fri Oct 17 08:33:19 2008 +0200

    This patch implements evalf for piecewise functions.

commit b9e69d96116f6574d4fc7de2a3616f7fb2e7c908
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Fri Oct 17 08:33:14 2008 +0200

    This patch implements doit for piecewise functions.

commit 9dd9ca13f8dbae9144d40933971add1bfd167c17
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Fri Oct 17 08:32:44 2008 +0200

    This patch changed the function call for Piecewise(sym,(a,b,expr), ...) to a more Mathematica style Piecewise((expr, cond), ... ).  It adds support for current functionality with this new interface.

commit c66bfef3e42ce7fb6d14b6fcc29e4002b7279b61
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Oct 16 18:53:28 2008 +0200

    Robustify tests by using sorted.

    Reason:

    Many tests used to use variations of:

    assert sorted([1, x]) == [1, x]

    but sorted([1, x]) returns [1, x] in python2.5, but [x, 1] in python2.6, so
    tests obviously cannot rely on this, but need to use sorted on both sides,
    e.g.:

    assert sorted([1, x]) == sorted([1, x])

commit d61a93f7e8debc2db4d015b898193e97ea2f65ef
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Oct 15 12:12:54 2008 +0200

    Fixed issue #1123

    The problem was in new roots() function - it was
    checking not enough trivial cases and used functional
    and square-free decomposition unnecessarily, making
    the results overcomplicated (so that simplify hanged
    on multivariate gcd computation).

commit fb1ba67ceec97fd8ac39752ee5a806b1a2c7ef6e
Author: Konrad Meyer <konrad.meyer@gmail.com>
Date:   Mon Oct 13 22:45:28 2008 +0200

    Remove 'shebang' style headers.

    The following python modules have 'shebang' style headers
    (#!/usr/bin/python or such) but are not intended to be directly executed:

    sympy/utilities/compilef.py
    sympy/solvers/numeric.py
    sympy/mpmath/elliptic.py
    sympy/mpmath/tests/test_elliptic.py

commit 0a0d6bdc278a087ec2b33c86ab0761027f90f801
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Sat Oct 11 22:28:14 2008 +0200

    Implement simplification of reciprocal of power

    In the rules for simplifying exponentiation implemented recently, I forgot
    to implement one important relation for complex x and y:
    1/x**y = x**(-y)
    This patch adds this functionality. As a side effect it also fixes the problem
    with failing heurisch test in issue 1130 so the xfail is removed.

    One test in test_ccode is changed because of this simplification and unneeded
    assumptions from docstrings are removed.

commit e01a56db699079920ab4fe3f8f233cd59e706ed1
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Fri Oct 10 19:37:43 2008 +0200

    Subs speedup: _eval_subs should call _eval_subs instead of subs

    Calling Basic.subs caused some overhead because it had to check len(*args) and
    to sympify the args

    Using our bench suite:

    In [1]: from sympy.utilities import benchmarking

    In [2]: benchmarking.main(['sympy/benchmarks'])

    Before:
    ==============================
     *** BENCHMARKING RESULTS ***
    ==============================

    bench_R1   |       301          ms  |  real(f(f(f(f(f(f(f(f(f(f(i/2)))))))))))
    bench_R2   |       343          ms  |  Hermite polynomial hermite(15, y)
    bench_R3   |            407     us  |  a = [bool(f==f) for _ in range(10)]
    bench_R4   |              1.91  us  |  # we don't have Tuples
    bench_R5   |        10.8        ms  |  blowup(L, 8); L=uniq(L)
    bench_R6   |       225          ms  |  sum(trim((x+sin(i))/x+(x-sin(i))/x) for i in xrange(100))
    bench_R7   |  38.7              s   |  [f.subs(x, random()) for _ in xrange(10**4)]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    bench_R8   |   5.64             s   |  right(x^2,0,5,10^4)
    bench_R10  |        68.2        ms  |  v = [-pi,-pi+1/10..,pi]
    bench_R11  |   1.52             s   |  a = [random() + random()*I for w in [0..1000]]
    bench_S1   |  11.5              s   |  e=(x+y+z+1)**7;f=e*(e+1);f.expand()

    After:
    ==============================
     *** BENCHMARKING RESULTS ***
    ==============================

    bench_R1   |       302          ms  |  real(f(f(f(f(f(f(f(f(f(f(i/2)))))))))))
    bench_R2   |       345          ms  |  Hermite polynomial hermite(15, y)
    bench_R3   |            403     us  |  a = [bool(f==f) for _ in range(10)]
    bench_R4   |              2.86  us  |  # we don't have Tuples
    bench_R5   |        11          ms  |  blowup(L, 8); L=uniq(L)
    bench_R6   |       222          ms  |  sum(trim((x+sin(i))/x+(x-sin(i))/x) for i in xrange(100))
    bench_R7   |  30.1              s   |  [f.subs(x, random()) for _ in xrange(10**4)]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    bench_R8   |   4.9              s   |  right(x^2,0,5,10^4)
    bench_R10  |        67.6        ms  |  v = [-pi,-pi+1/10..,pi]
    bench_R11  |   1.54             s   |  a = [random() + random()*I for w in [0..1000]]
    bench_S1   |  11.7              s   |  e=(x+y+z+1)**7;f=e*(e+1);f.expand()

commit 14af425a1526d6e9168d79bcd2898906c2d23801
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Fri Oct 10 23:53:33 2008 +0200

    Fix broken docstrings (#1147)

    The patches implementing the rules for simplifying exponentiation
    have broken the doctests. The problem was fixed by setting the right
    assumptions. In both examples expression of the form 1/(x**a)
    needs to be simplified to x**(-a). In the evalf example, the exponent
    is summation index, so it is set to integer. The together example
    holds only for positive x and real y.

commit aafafcd789ecaab7244973e797baa7e996cdd521
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Fri Oct 10 14:05:37 2008 +0200

    [2/2] Fix tests after fixing the exponentiation rules

    Some tests started to pass so the XFAIL is removed and some are fixed.
    Test test_nseries is fixed by setting right assumptions and test_ccode
    is corrected.
    The only problematic test is test_heurisch_symbolic_coeffs which fails
    inconsistently. The test is XFAILed and issue 1130 was started to fix this.

commit aec5545e3b587b8fe3b9b6dd7a6b6a051b3bb804
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Mon Oct 6 23:10:08 2008 +0200

    [1/2] implement correct rules for simplifying exponentiation

    Currently sympy gives inconsistent results when simplifying exponentiation.
    For example

    >>> sqrt(1/x)
    x**(-1/2)
    >>> 1/sqrt(x)
    x**(-1/2)

    but these are in fact not equal:

    >>> sqrt(1/(-1))
    I
    >>> 1/sqrt(-1)
    -I

    also these results are in conflict:

    >>> (x**3)**Rational(1,3)
    x
    >>> ((-1)**3)**Rational(1,3)
    (-1)**(1/3)

    as principal value of (-1)**(1/3) != -1.
    This is because (x**a)**b is not equal to x**(a*b) in general.
    For x complex and a,b real, the equation (x**a)**b == x**(a*b) holds
    if and only if
    modpi(b * modpi(a * arg(x))) == modpi(a * b * arg(x))
    where modpi(x) = ((x + pi) mod pi) - pi

    The above issues are solved by this patch.
    Only the most general cases of this rule are implemented in this patch, in
    order not to degrade preformance. Results of exponentiation of exponentiation
    should now be always correct.

    Implementing these rules causes some tests to fail as they rely on the wrong
    behaviour. Next patch in series fixes these tests.

commit 7f340f9d00b7b756a17ad605cf7b6775225fccbe
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Mon Oct 6 22:48:26 2008 +0200

    Simplify result of spherical harmonics with new exponentiation rules

    We assume that the argument th is in (0,pi) and therefore sin(th) > 0
    this allows some simplifications to the result.

    This patch is intended to keep current behaviour unchanged after applying
    the exponentiation patch, so the current tests should be enough.
    It doesnt change the results when applied to current sympy.

commit 8bb77511ad6a0577bfd2fee57e022117befaf20a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Oct 9 00:13:31 2008 +0200

    Hubert: welcome to SymPy

commit 641ad502f4a81af9fdda2277be5faac5fcf13c6e
Author: Hubert Tsang <intsangity@gmail.com>
Date:   Thu Oct 9 00:08:31 2008 +0200

    Fixes polynomial order in LaTeX printing (#1126).

commit 0a89528ccaa8383a146a2550ef57d61c6869e41f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 23:59:02 2008 +0200

    S(1)/2 implemented.

    This was achieved by hooking sympify into S.__call__, because we use S for
    singletons already.

    Maybe we could use a different name for singletons.

commit 942fd96a4d8dc6cb00769448bf2db6ea4c230a62
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Tue Oct 7 16:41:55 2008 +0200

    Adding ccode printer

commit b46062045f42270b0668b346521cb04215db3e77
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 23:42:19 2008 +0200

    README + credits updated (Robert and Andy added).

commit 5be2227f4f7dbeda0e1b46587605b79b4679ae67
Author: Andy R. Terrel <aterrel@uchicago.edu>
Date:   Wed Oct 8 16:48:15 2008 +0200

    Fixing patch #353

    Signed-off-by: Andy R. Terrel <aterrel@uchicago.edu>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b82ff29845578bf7dbafe06a314212abc3748f65
Author: Robert <average.programmer@gmail.com>
Date:   Sat Feb 2 10:45:40 2008 +0100

    Implements Piecewise function (#353).

    Ondrej: The patch didn't pass review, but Andy fixed that in the following
    patch, so it goes in.

    Signed-off-by: Robert <average.programmer@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1a9fb957d918dbb633e5ade127e2bf1f753910e4
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Wed Oct 8 20:55:04 2008 +0200

    Fix for Mul._eval_subs

    Before:

    In [2]: (a*b*c).subs(a*c,b)
    Out[2]: a⋅b⋅c

    After:

    In [2]: (a*b*c).subs(a*c,b)
    Out[2]:
     2
    b

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 171fb2d8af5399930956caeb425ddaa45762fd06
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Wed Oct 8 20:53:56 2008 +0200

    Fix for Issue 801: Add._eval_subs() now uses sets + tests

    Before:

    In [2]: (a+b+c).subs(a+b,c)
    Out[2]: a + b + c

    In [3]: (c+b+exp(c+b)).subs(c+b,a)
    Out[3]:
         b + c
    a + ℯ

    In [4]: (a+b+exp(a+b)).subs(a+b,c)
    Out[4]:
             c
    a + b + ℯ

    After:

    In [2]: (a+b+c).subs(a+b,c)
    Out[2]: 2⋅c

    In [3]: (c+b+exp(c+b)).subs(c+b,a)
    Out[3]:
         a
    a + ℯ

    In [4]: (a+b+exp(a+b)).subs(a+b,c)
    Out[4]:
         c
    c + ℯ

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0c23f5572d3a292e6e541490469d609d4e5c89e2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 17:36:03 2008 +0200

    bin/test: put the sympy root directory into the path.

    Copied from bin/isympy.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit cfbf0b39190c035ba52ede0b32cbdbc39702c044
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 17:36:03 2008 +0200

    Adapts the whole testsuite to use raises and skip from pytest.py.

    Nothing changes if the py.test library is available. However, if it is not
    available, we can now use our own test suite and everything will just work.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit 1edc3d6ce648b60cc195a0f5075ef5d47fa9b267
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 17:36:02 2008 +0200

    pytest.py: implements raises, XFail, XPass, skip and other py.test things

    If "import py" succeeds, the py.test is used. If it fails, our own
    implementation is used instead. This allows our testsuite not to depend on
    py.test.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit a09d7fc5f256e806a7f9be6540f4b7638b276c84
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 17:36:02 2008 +0200

    test_plotting: don't use classes with tests, just regular functions.

    This is the only place in SymPy that uses classes, so let's just use functions
    all over the place. This simplifies our own testsuite.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit d5ee4530b701ffd6cdffb525f0ef5c22a6e9b35b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 17:36:02 2008 +0200

    All test functions of type testa() renamed to test_a().

    This simplifies (and makes more robust) the test pattern matching. Py.test
    accepts both testa() and test_a(), but our own testing code only accepts
    test_a().

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit ddae0990720f2f6208379323c1131e00407445b6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 17:36:02 2008 +0200

    Use explicit import in test_solvers.py.

    Not only is this bad habit, but it was even causing

    $ py.test test_solvers.py

    to execute sympy.test_core(), because it was automatically imported by "from
    sympy import *".

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit d477ef5492b7dc4b582fe55fb837e8b3e3de28a4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 8 17:36:02 2008 +0200

    sympy.test() implemented.

    This was achieved by reimplementing the gist of py.test in
    sympy/utilities/runtests.py. It uses the py.test like reporting and there is a
    utility script "bin/test" with a similar usage as py.test.

    It is able to run the whole sympy testsuite including XFail, XPass, skip,
    and 'raises'. For some little things, the test suite needs to be adapted, which
    is done by the following patches.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit b15dab3514eac7ef6296f24443938537fe397489
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Oct 6 19:54:09 2008 +0200

    Make Eq(f) default to Eq(f, 0).
    Rationale: when constructing equations, many times it is just LHS == 0, so it's
    boring to type Eq(LHS, 0) all the time. Eq(LHS) is much easier and it has even
    less characters than "LHS == 0".

commit b4569781e026126b155f69c3a14528a6293cf92d
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Thu Oct 2 17:08:21 2008 +0200

    Add Matrix.evalf(precision,**options) support

commit 1e12e35c483e518b4b38a6d2ec1486bcab2211a6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 30 18:12:55 2008 +0200

    Execute galgebra tests only if numpy is available.
    This is achieved by trying to import numpy and if it fails, setting
    disabled=True, so py.test doesn't execute any tests.

commit fe9d7bbe9847c5bb72fb2fa6db26f6895e78d862
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 30 18:12:55 2008 +0200

    Move test_symbolicGA.py to testsymbolicGA.py so that it's not tested.

commit d8f0e96fb15c8837e26ccfe56def3ac0aabc2ced
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Tue Sep 30 13:46:02 2008 +0200

    Fix for issue 1115, comment#5: sympy failed to declare a function under python2.6.
    I changed the constructor on BasicMeta and now calls it's superclass without arguments. I believe this does not affect anything since it's superclass is just an empty class inheriting type.

    Still there are some test that do not pass with python2.6, but 99% do and sympy is fully usable now with python2.6.
    ---
     sympy/core/basic.py |    2 +-
     1 files changed, 1 insertions(+), 1 deletions(-)

commit 867c22d994c05230ee035a4bef7f1654d1a74cae
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sun Sep 28 23:14:56 2008 +0200

    rename keyword as to as_, this made the import of sympy to fail under python2.6
    ---
     sympy/mpmath/specfun.py |   10 +++++-----
     1 files changed, 5 insertions(+), 5 deletions(-)

commit 739ff190c40cd1e281ab86a78dbc16ef19c174d7
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sun Sep 28 23:14:43 2008 +0200

    Added docstrings for collect and tests when there is a list as second argument
    ---
     sympy/simplify/simplify.py            |    5 +++++
     sympy/simplify/tests/test_simplify.py |    1 +
     2 files changed, 6 insertions(+), 0 deletions(-)

commit ac8e3344c347468eb149e2cc9ab79c568b24cab1
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Wed Sep 24 07:55:46 2008 +0200

    Repair some tests to deal correctly with complex/real variables (896)

    This patch consists mainly of setting right assumptions before
    testing

commit 87b905adcf127c87b493dfcb20106f4be51de0cc
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Thu Sep 25 13:01:17 2008 +0200

    Little change to Function.__new__ logic.

    After the previous patches we have that every Function class has nargs defined
    but undefined Functions, so we can skip hasattr(cls, 'undefined_Function')
    check.

    The if is moved up to optimize the checks a little more.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e5cf88426fcaec04e81eee4069b0c4f51219e2cd
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Sep 23 19:14:02 2008 +0200

    Fix more functions subs + tests

    It fix a regression introduced with the previous patch
    and adds support for tuple nargs in function subs

    Before:
    >>> (sin(x)).subs(sin,f)
    sin(x)

    After:
    >>> (sin(x)).subs(sin,f)
    f(x)

commit 3b3da5044a6e4e3410a46beb50cd948c12e398e6
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Sep 24 00:59:17 2008 +0200

    patch for issue 817 (Integral().diff() fails)
     Implemented Integral._eval_derivative and some tests
    test_integrals.test_unevaluated now passes and was moved to test_basics

    also: better debug message for ValueError in Integral.__new__ and Derivative.__new__
    ---
     sympy/core/function.py                  |    5 ++-
     sympy/integrals/integrals.py            |   48 +++++++++++++++++++++++++++++--
     sympy/integrals/tests/test_integrals.py |   26 +++++++++++------
     3 files changed, 65 insertions(+), 14 deletions(-)

commit 09798fee1ed467aaa8d74380905c33dc361d5145
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Wed Sep 24 00:58:58 2008 +0200

    formatting typo
    ---
     sympy/core/basic.py |    2 +-
     1 files changed, 1 insertions(+), 1 deletions(-)

commit f614db68861ae6b7c18faf839545751c1cbd66ee
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Sat Sep 20 16:59:47 2008 +0400

    test for integrating the derivative of an unknown function

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 06a54483c71f3353d84a93136aa670e81dfdd7a2
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Fri Sep 19 17:46:31 2008 +0200

    compilef.py can optionally use cse(),  minor improvements

    I've added a use_cse flag. Using it results in a large sympy overhead, but
    it might speed up functions with many common supexpressions.

    You can also use it to generate optimized C code from Python/SymPy expressions.

commit f1c72b9e03b53b4f95d442cce2f5406975a1ee8b
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Fri Sep 19 09:50:12 2008 +0400

    Fix for issue 1018: atoms fail on Integral

    The try-except block could be removed if we force
    .atoms() to take only classes (and not instances) as arguments ...

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit ac4298095258edb9b7589663be8b7d8dc4adc3f6
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Thu Sep 18 19:10:57 2008 +0200

    updated instructions how to set up libtcc

    You have to use a recent version of tcc to get it working without root
    privileges, I updated the docstring accordingly.

    Credits go to Kirill, thank you a lot!


    Kirill: Vinzent - thank you!

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit fa3c5a9e0d287d48585ee78b8a61f36d7fc33693
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 16 21:58:31 2008 +0400

    _combine_inverse() fixed and a test + docstring written.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit 384ad56999d5d062a219e5caab0688b0a3edae52
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 16 21:57:47 2008 +0400

    seterr() implemented, just like in NumPy.

    This allows setting what happens on 0/0. Either an exception is raised, or nan
    returned. The default is to return nan, as it used to be.

    Having the option to return an exception is extremely useful for debugging,
    when you get nan, but you want to know when exactly something went wrong. So
    you just do seterr(True) and rerun your code.

    Note: when you do seterr(True), not everything is working properly, for
    example:

    In [1]: integrate(log(x), (x, 0, 1))
    Out[1]: -1

    restart isympy (due to caching):

    In [1]: seterr(True)

    In [2]: integrate(log(x), (x, 0, 1))
    Exception: Indeterminate 0/0

    So seterr() is default set to False. There is a question, whether our
    algorithms should rely on the 0/0 behavior.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit e9977ac5a414d075a1f7eab5843ca5d50cf47a9a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 16 21:56:15 2008 +0400

    O(x).contains(nan) fixed.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit e28c1d4d9f428efa0f17fdf1d74afd319b13cdaa
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 16 21:55:44 2008 +0400

    Fixes gruntz(I*x, x, oo) to return I*oo.

    Tests written for this and also for couple related cases.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit d5465ac920ab178952db5539222a730d92fb285a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 16 21:55:18 2008 +0400

    Make str(I*oo) return I*oo, instead of I/0.

    Both str() and pretty() was fixed and test written.

    General fix should make Infinity not subclass Rational, but that would break a
    lot of code in SymPy, so it needs general fixing. Nevertheless, this patch
    fixes a real bug and that is what matters.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit e2010b8cc342ca047d71652695512c240239f62e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Sep 16 21:54:11 2008 +0400

    Make exp(I*oo) return nan.

    Before:

    In [2]: print exp(I*oo)
    (oo)**I

    After:

    In [1]: print exp(I*oo)
    nan

    Btw, Mathematica returns Indeterminate.

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit 2defebe91c4c45bed293f3d5dc673d893e220616
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Sep 16 18:49:26 2008 +0200

    Fix my identation error on deprecated constructor

    I've introduced a bug on deprecated (and untested) code some patches ago.
    Please apply this patch to fix it.
    Sorry

    Matrix([1,2],[3,4]) now works again

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 0a72b96ce1fd96965f28b64a9216c595c7f4b0b1
Author: Fabian Seoane <fabian@fseoane.net>
Date:   Tue Sep 16 20:24:07 2008 +0400

    flatten fails for nested lists

    It fails for things like (x,(x,)), which happen in classes like Integral.
    I attach a patch that corrects this and implements a test

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3cf03d0735fd1248a127f7b0d3e7aee3ca76d31c
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Sep 16 14:39:44 2008 +0200

    Remove XPASS in Matrix tests to close bug 650

    Thanks to Boris Timokhin for fixing Issue #650

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 519f766e5eaf3797e6e6b08332cddb8a2adbc838
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Sep 16 00:48:02 2008 +0200

    Fix Issue #792: better Function -> Lambda substitution

    Now sympy can do:
    >>> l = Lambda(x,sin(x)/log(x))
    >>> (g(y)+5*cos(y)).subs(g,l)
    sin(y)/log(y)+5*cos(y)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 50ddf310f16c0e2ea57574ee694f9cbb13b71236
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Sep 16 00:44:46 2008 +0200

    Fix nargs for undefined Functions

    Before:
    >>> f(x).nargs == None
    True

    After:
    >>> f(x).nargs == 1
    True
    >>> f(x,y).nargs == 2
    True

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 883041410dc88c9961ec12b22044f44b68079eb3
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Mon Sep 15 16:50:23 2008 +0200

    Fix Lambda.nargs.

    Before:
    >>> f = Lambda(x,y,z,sin(x)*y/z)
    >>> f.nargs
    4

    After:
    >>> f = Lambda(x,y,z,sin(x)*y/z)
    >>> f.nargs
    3

commit 83bcef267487173a285b153873552034794e014e
Author: Boris Timokhin <qoqenator@gmail.com>
Date:   Fri Sep 12 23:19:33 2008 +0400

    Basic.integrate

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 59ab640e7f4c7dc185487559c2c9932c130eeaad
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Sep 14 12:52:30 2008 +0400

    Welcome to SymPy  (Boris Timokhin)

commit ec6b29aa5ac89ed7c4c297a03fba8fb07235b9df
Author: Boris Timokhin <qoqenator@gmail.com>
Date:   Sun Sep 14 12:52:25 2008 +0400

    Matrix methods: diff, integrate, limit (related Issue650)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit c4d55e6cbd10adc91179e30e7e649422304298e7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Sep 7 18:03:45 2008 +0200

    Use new GF(p)[x] utilities in factorization algorithm over Z[x]

    factor() is now a bit faster:

    (old)

    In [1]: %time a = factor(x**80 + x + 1)
    CPU times: user 24.51 s, sys: 0.28 s, total: 24.79 s
    Wall time: 24.98 s

    (new)

    In [24]: %time a = factor(x**80 + x + 1)
    CPU times: user 5.93 s, sys: 0.07 s, total: 6.00 s
    Wall time: 6.07 s

    For comparizon, AXIOM can do it in 0.5 s.

    Note that in both cases one prime p = 5 is chosen. The
    new algorithm spends 1 s on factorization over GF(5)[x].
    So Hensel lifting and factor recombination takes a lot
    time. This will be improved.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 6518773267be10feaf6db56f156b6cf24c75ca4e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Sep 7 18:03:32 2008 +0200

    A few improvements to factorization utilities over Galois fields

    In fact reimplemented GF(p)[x] polynomials from scratch:

     [1] New dense representation of GF(p)[x] polynomials.
     [2] Efficient classical O(n**2) arithmetics (in-place).
     [3] Fixed and improved Zassenhaus DDF and EDF:
      [3.1] EDF now supports GF(2)[x] polynomials.
     [4] Implemented Shoup's DDF and EDF:
      [4.1] Support for large polynomials and big modulus.
     [5] Implemented square-free decomposition algorithm.

    What remains to do is to implement fast arithmetics, especially
    FFT multiplication and related algorithms. Also efficient matrix
    multiplication is needed to improve polynomial compositions. Then
    we should see full potential of Shoup's algorithms.

    The big picture of polynomial factorization is as follows:

      f : Z[x] -> SQF -> F : GF(p)[x] -> DDF -> EDF ->

        -> Hensel -> Zassenhaus -> f_1 ... f_k : Z[x]

    where

      SQF -> square-free decomposition (poly time)
      DDF -> distinct-degree factorization (poly time)
      EDF -> equal-degree factorization (random poly time)
      Hensel -> Hensel lifting F mod p -> F mod p**l (poly time)
      Zassenhaus -> factor recombination phase (avg. poly time -> exp time)

    This patch improves arithmetics over GF(p)[x] and DDF, EDF phases.
    Previously factorization over Galois fields dominated factorization
    time. Now we have the opposite situtation, so the following steps
    will be to improve Hensel lifting and factor recombination phase.

    Two algorithms for factorization over GF(p)[x] are implemented:

     [1] Zassenhaus : DDF + EDF
     [2] Shoup      : DDF + EDF
      [2.1] Kaltofen-Shoup : DDF (baby/giant steps)
      [2.2] Gathen-Shoup   : EDF (trace maps)

    Note that both DDF algorithms are deterministic
    and both EDF algorithms are probabilistic.

    Algorithm [1] is well suited for small and avarage
    input (polynomial degree) and small modulus.

    Algorithm [2] is well suited for large input and
    medium and large modulus (deg(f) ~ lg(p) over GF(p)[x]).

    Currently [1] is used by default and we can force Shoup's
    method. Later cross-over points must be found to use
    appropriate algorithm to the given problem.

    Two "hard" examples follows (see Zimmermann 1996).

    Consider sparse polynomial f_60 (Gathen):

     f = x**60 + x + 1 over GF(3622009729038561437)

                      |  Python  |  Psyco
    ----------------------------------------
     Shoup            |   5.06 s |   2.27 s
     Zassenhaus (new) |   5.66 s |   2.80 s
     Zassenhaus (old) | 143.37 s | 101.13 s

    The table above speaks for itself. AXIOM was
    able to factor f_60 in 1 s, so there is still
    place for improvements (as I said FFT is needed).

    Consider dense polynomial F_80 (Shoup):

     def shoup_poly(n, p=None):
         p = p or nextprime(int((2**(n-2) * pi).evalf()))

         f = [1] * (n+1)

         for i in xrange(1, n+1):
             f[i] = (f[i-1]**2 + 1) % p

         return f, p

    In [43]: f, p = shoup_poly(80)

    In [44]: %time a = gf_ddf_zassenhaus(f, p)
    CPU times: user 24.31 s, sys: 0.24 s, total: 24.56 s
    Wall time: 24.99 s

    In [46]: %time a = gf_ddf_shoup(f, p)
    CPU times: user 16.17 s, sys: 0.23 s, total: 16.40 s
    Wall time: 16.64 s

    Here we see that for large degree and big modulus new algorithm
    is much faster than the old one. However for small modulus the
    old algorithm performs better:

    In [18]: f, p = shoup_poly(60, 11)

    In [19]: %time a = gf_factor_sqf(f, p, method='zassenhaus')
    CPU times: user 0.81 s, sys: 0.00 s, total: 0.81 s
    Wall time: 0.83 s

    In [21]: %time a = gf_factor_sqf(f, p, method='shoup')
    CPU times: user 1.70 s, sys: 0.04 s, total: 1.74 s
    Wall time: 1.80 s

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 2c8843e8e20944735830a91130885520abbe9aca
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Sun Sep 7 12:01:22 2008 +0200

    Implement dir parameter for series() (1063)

    Parameter similar to dir in limit(). It makes sense for non-smooth
    functions and solves some confusion about the undocumented implicit
    right direction of nseries().
    >>>floor(x).series(x, dir='+')
    0
    >>>floor(x).series(x, dir='-')
    -1

commit 4882bf6e83a717c0f5357e972bddc29d6fce4df0
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Sat Sep 6 19:39:02 2008 +0200

    Remove with_order parameter from series()

    It was neither implemented nor used anywhere in the code.
    Solves issue 1062.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 45b8da46c08463c1e6eabc27280d36ea216ccf32
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Fri Sep 5 17:21:51 2008 +0200

    Added a warning when constructing a Matrix without bracket + test modified

commit fb12f3acf2c1b67e70f3c4d8b00a1ec7ebeed96f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Sep 6 10:47:14 2008 +0400

    setup.py: install galgebra on "setup.py install".

    Acked-by: Stepan Roucka <stepan@roucka.eu>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 685346475c16d4c53c4b861917a383fe12f9b890
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Sep 1 23:36:30 2008 +0400

    Initial SymPy benchmark suite

    I've just went through our commit history and searched for commits with
    %timeit or %time in their description and extracted benchmarks from
    there.

    So now we have at least something. Here is how it looks like:

        kirr@evo:~/src/sympy/sympy-git$ ./bin/py.bench sympy/
        ====================== test process starts =======================
        executable:   /usr/bin/python  (2.5.2-final-0)
        using py lib: /home/kirr/src/tools/py/py/py <rev unknown>

        sympy/benchmarks/bench_symbench.py[8] ........
        sympy/core/benchmarks/bench_arit.py[10] ..........
        sympy/core/benchmarks/bench_assumptions.py[2] ..
        sympy/core/benchmarks/bench_basic.py[4] ....
        sympy/core/benchmarks/bench_expand.py[4] ....
        sympy/core/benchmarks/bench_numbers.py[21] .....................
        sympy/core/benchmarks/bench_sympify.py[2] ..
        sympy/functions/elementary/benchmarks/bench_exp.py[1] .
        sympy/functions/special/benchmarks/bench_special.py[1] .
        sympy/integrals/benchmarks/bench_integrate.py[4] ....
        sympy/integrals/benchmarks/bench_trigintegrate.py[2] ..
        sympy/matrices/benchmarks/bench_matrix.py[4] ....
        sympy/polynomials/benchmarks/bench_factor.py[2] ..
        sympy/series/benchmarks/bench_limit.py[1] .
        sympy/solvers/benchmarks/bench_solvers.py[1] .

        =========== tests finished: 68 passed in 64.66 seconds ===========

        ==============================
         *** BENCHMARKING RESULTS ***
        ==============================

        bench_R1                        |      670              ms  |  real(f(f(f(f(f(f(f(f(f(f(i/2)))))))))))
        bench_R2                        |      664              ms  |  Hermite polynomial hermite(15, y)
        bench_R3                        |            731        us  |  a = [bool(f==f) for _ in range(10)]
        bench_R4                        |              6.2      us  |  # we don't have Tuples
        bench_R5                        |       12.9            ms  |  blowup(L, 8); L=uniq(L)
        bench_R6                        |      465              ms  |  sum(trim((x+sin(i))/x+(x-sin(i))/x) for i in xrange(100))
        bench_R10                       |      150              ms  |  v = [-pi,-pi+1/10..,pi]
        bench_R11                       |  3.17                 s   |  a = [random() + random()*I for w in [0..1000]]
        timeit_neg                      |             20.5      us  |  -x
        timeit_Add_x1                   |             28.7      us  |  x+1
        timeit_Add_1x                   |             42.3      us  |  1+x
        timeit_Add_x05                  |             24.3      us  |  x+0.5
        timeit_Add_xy                   |             24.3      us  |  x+y
        timeit_Add_xyz                  |             23.3      us  |  Add(*[x,y,z])
        timeit_Mul_xy                   |             24.1      us  |  x*y
        timeit_Mul_xyz                  |             22.8      us  |  Mul(*[x,y,z])
        timeit_Div_xy                   |             39.4      us  |  x/y
        timeit_Div_2y                   |             46.6      us  |  2/y
        timeit_x_is_integer             |              4.72     us  |  x.is_integer
        timeit_Integer_is_irrational    |              1.06     us  |  i3.is_irrational
        timeit_Symbol_meth_lookup       |              1.07     us  |  x.diff  # no call, just method lookup
        timeit_S_lookup                 |                  765  ns  |  S.Exp1
        timeit_C_lookup                 |                  627  ns  |  C.Add
        timeit_Symbol_eq_xy             |             11.3      us  |  x == y
        timeit_expand_nothing_todo      |            363        us  |  p.expand()
        bench_expand_32                 |  5.66                 s   |  (x+y+z+1)**32  -> expand
        timeit_expand_complex_number_1  |        3.6            ms  |  ((2+3*I)**1000).expand(complex=True)
        timeit_expand_complex_number_2  |        4.94           ms  |  ((2+3*I/4)**1000).expand(complex=True)
        timeit_Integer_create           |              3.42     us  |  Integer(2)
        timeit_Integer_int              |              4.96     us  |  int(i3)
        timeit_neg_one                  |              2.51     us  |  -S.One
        timeit_Integer_neg              |              6.72     us  |  -i3
        timeit_Integer_abs              |              4.21     us  |  abs(i3)
        timeit_Integer_sub              |             13        us  |  i3 - i3
        timeit_abs_pi                   |              2.86     us  |  abs(pi)
        timeit_neg_oo                   |              2.18     us  |  -oo
        timeit_Integer_add_i1           |             10.3      us  |  i3+1
        timeit_Integer_add_ij           |             13        us  |  i3+i4
        timeit_Integer_add_Rational     |             45.3      us  |  i3+r34
        timeit_Integer_mul_i4           |             10.5      us  |  i3*4
        timeit_Integer_mul_ij           |             13.2      us  |  i3*i4
        timeit_Integer_mul_Rational     |             42.7      us  |  i3*r34
        timeit_Integer_eq_i3            |              4.56     us  |  i3==3
        timeit_Integer_ed_Rational      |             33.8      us  |  i3==r34
        timeit_integer_nthroot          |             18.7      us  |  integer_nthroot(100, 2)
        timeit_number_igcd_23_17        |             26.7      us  |  igcd(23,17)
        timeit_number_igcd_60_3600      |             24.6      us  |  igcd(60,3600)
        timeit_Rational_add_r1          |             40.8      us  |  r34+1
        timeit_Rational_add_rq          |             36.2      us  |  r34+q45
        timeit_sympify_1                |             12.5      us  |  sympify(1)
        timeit_sympify_x                |              3.39     us  |  sympify(x)
        timeit_exp_subs                 |             22        us  |  e.subs(q, y)
        timeit_Ylm_xy                   |            766        us  |  Ylm(1,1, x,y)
        bench_integrate_sin             |       16              ms  |  integrate(sin(x), x)
        bench_integrate_x1sin           |      887              ms  |  integrate(x**1*sin(x), x)
        bench_integrate_x2sin           |  1.61                 s   |  integrate(x**2*sin(x), x)
        bench_integrate_x3sin           |  3.04                 s   |  integrate(x**3*sin(x), x)
        timeit_trigintegrate_sin3x      |        3.36           ms  |  trigintegrate(sin(x)**3, x)
        timeit_trigintegrate_x2         |            610        us  |  trigintegrate(x**2, x)  # -> None
        timeit_Matrix__getitem_ii       |             16.2      us  |  M[3,3]
        timeit_Matrix__getitem_II       |             18        us  |  M[i3,i3]
        timeit_Matrix__getslice         |       41.2            ms  |  M[:,:]
        timeit_Matrix_zeronm            |       39.6            ms  |  zeros((100, 100))
        timeit_factor_x4_x_1            |       62.4            ms  |  factor(x**4+x+1)
        bench_factor_x56_1              |  8.91                 s   |  factor(x**56-1)
        timeit_limit_1x                 |            175        us  |  limit(1/x, x, oo)
        timeit_linsolve_trivial         |        8.22           ms  |  solve_linear_system(M, *S)

    Not ideal, but still worth to have ...

    ----

    The next step will be to implement

      a. storing benchmark data to files, and
      b. comparing results of benchmarks runs.

    >>> Anyone want to help with this?

    I'm afraid I'll be working hard at work for the whole next week and
    don't have time for this.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b65eb0e55792af60949c10c18287dbf79b1d4ea4
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Sep 1 23:36:30 2008 +0400

    ./setup.py bench  now works correctly!

    I've moved toplevel benchmarks/ to sympy/benchmarks/ and made

      './setup.py bench'  alias for  'py.bench sympy/'

    Other tests which I used to time my changes follow in the next commit.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit bf05f5edefe044c5ef10179c96e2c90ea38a6522
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Sep 1 23:36:30 2008 +0400

    symbench.py -- adapt it to structure py.bench expects

    Running just ./benchmarks/bench_symbench.py is still supported ease
    comparison with results under SAGE

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 05d9053ff446f888b3b497937e92e2337ec5c9c6
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Sep 1 23:36:30 2008 +0400

    py.bench -- py.test based benchmarking

    The idea is to reuse py.test infrastructure to

      o collect tests
      o run collected tests
      o present test runs results

    and substitute 'test' -> 'benchmark'.

    What we do is

      1. collect benchmark files that start with 'bench_' prefix
      2. execute two kind of benchmarks

         a. 'bench_<smth>', and
         b. 'timeit_<smth>',

    for bennch_XXX we simple mesure time to execute, and for timeit_XXX in
    essence we do IPython's %timeit on it.

    For actually running benchmarks small py.test like utility is provided
    and installed for the benefit of all.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 957696d113adce0c8b0f2f787286d9b8e2930aea
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Aug 30 22:55:17 2008 +0400

    .coeff() implemented.

    Unfortunately since collect does not distinguish nested/flattenned
    Derivatives, coeff for f.diff(x, n>=2) does not work.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Cc: Mateusz Paprocki <mattpap@gmail.com>

commit df5f8b3baa07017e95c935d848043681b6770952
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 30 22:55:15 2008 +0400

    collect: Add support for higher-than-1 order Derivatives

    We still can't properly handle multivariate expressions, but the
    following should work:

    In [1]: a,b=symbols('ab')

    In [2]: D = Derivative

    In [3]: e = a*D(f(x), x,x) + b*D(f(x), x,x)

    In [4]: e
    Out[4]:
         2               2
        d               d
    a⋅─────(f(x)) + b⋅─────(f(x))
      dx dx           dx dx

    In [5]: collect(e, D(f(x),x))
    Out[5]:
            d ⎛d       ⎞
    (a + b)⋅──⎜──(f(x))⎟
            dx⎝dx      ⎠

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Cc: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7e0866f383c0f8ea082e3809ed548f34c5bd741c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 30 20:30:09 2008 +0400

    dsolve: be more informative on what we can't solve

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c2a4873768e5f0b9dd63d2a2d9b26b79f4906982
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Sat Aug 30 16:37:58 2008 +0200

    write tests for PDF

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 037852d1e504aa291c3d86f6ecc56d06c5fe598a
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Sat Aug 30 16:37:14 2008 +0200

    write docstrings for PDF

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 9e34d4fdd34a8cff423b84d84beb3cea30691b0a
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Fri Aug 29 10:19:59 2008 +0200

    fix series expansion of floor and ceiling at arbitrary point

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit b53d1b04c827a2f9f98c6d5e7a4b9fb27528c16e
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Fri Aug 29 13:41:10 2008 +0200

    fix limits of polynomials at infinity (#1061)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 16fdc09aa7eb32633bdf74acfbb3a1065ff38a64
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Sat Aug 30 15:08:30 2008 +0200

    fix series expansion of abs

    This improves series of abs around zero. Error term
    is returned only if needed
    before:
    In [23]: abs(x).nseries(x,0,2)
    Out[23]: x + O(x**2)
    now:
    In [27]: abs(x).nseries(x, 0, 2)
    Out[27]: x
    Expansion is now computed also for nonzero arguments of abs,
    In [34]: abs(sin(x+1)+1).nseries(x,0,2)
    Out[34]: 1 + x⋅cos(1) + sin(1) + O(x**2)
    Now the abs(sin(x+1)) limit works
    In [37]: abs(sin(x+1)).limit(x,0)
    Out[37]: sin(1)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 1b7efdd676e2609abed1389e4b5df38a8358b8bd
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Sat Aug 30 11:13:48 2008 +0200

    draft implementation of arbitrary PDF

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 905bd2960c4c3a4de82c6b11dbfb9a6e4c8baf35
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 29 11:05:54 2008 +0400

    Welcome to SymPy  (Alan Bromborsky)

commit 2f8d2cbf99f3a401315a2705345c16059f28907c
Author: Alan Bromborsky <abrombo@verizon.net>
Date:   Thu Aug 28 09:53:26 2008 -0400

    Initial version of GAsympy.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 32440f9d20065a80686bafa931664bab88c724f0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 29 09:18:48 2008 +0400

    Welcome to SymPy  (Dan coolg49964)

commit a094e9aecef497d9a3d1505f85b466b49d2e0095
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Fri Aug 29 00:14:16 2008 +0200

    fix series of floor and ceiling

    This patch fixes issue 1057. In the discontinuous points,
    the series from right is always computed:
    >>>floor(sin(x)).series(x)
    0
    >>>floor(sin(-x)).series(x)
    -1

commit a2be7620ce9762cdd41b751a2c555a14fe283bde
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Thu Aug 28 18:50:08 2008 +0200

    fix the abs(sin(x)).limit(x,0)

commit ebf9ad529aa1e313548845dcd9409582b3847421
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 28 14:16:52 2008 +0200

    heurisch() now supports more complicated symbolic expressions

    Given integrand f, previously symbols mapped to components of
    f were confused with other symbols (constants in this context).

    Example:

    (old)

    In [1]: from sympy.integrals.risch import heurisch

    In [2]: heurisch(1/(x+sin(y)), x)
    AttributeError: 'NoneType' object has no attribute 'as_primitive'

    (now)

    In [1]: from sympy.integrals.risch import heurisch

    In [2]: heurisch(1/(x+sin(y)), x)
    Out[2]: log(x + sin(y))

commit 884559b9c54c2848112a6b9c905af1e3793a2397
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Aug 28 14:16:52 2008 +0200

    solve_linear_system() now supports overdetermined systems, #1054

    With this patch we can compute the following integral:

    In [1]: trim(integrate(log(x+y+z), y))
    Out[1]: x + z - y + x⋅log(x + y + z) + y⋅log(x + y + z) + z⋅log(x + y + z)

    In [2]: diff(_, y)
    Out[2]:
                              x           y           z
    -1 + log(x + y + z) + ───────── + ───────── + ─────────
                          x + y + z   x + y + z   x + y + z

    In [3]: trim(_)
    Out[3]: log(x + y + z)

commit cfa2b346e015c6674c9e70e6d2802220bf82bc6f
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Thu Aug 28 10:36:32 2008 +0200

    test for issue 410

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit d1309385900f92264b0c19e761f363cc0a7eca07
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 28 12:30:18 2008 +0400

    Fixed the limit(log(2+sqrt(atan(x)*sin(1/x))), x, 0), test written.

    This was fixed by improving the heuristic algorithm to cover this particular
    case as well.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 14fa44ecad7e60f6bb9876b253d8b08c5aa265fb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 28 12:30:09 2008 +0400

    A test written for limit(atan(x)*sin(1/x), x, 0).

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 1ecc823b002d1be94aafe3ee4d1ac7619bc71760
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 28 11:45:26 2008 +0400

    Make tests for issue 936 more robust

    It is good we check that say

        abs(x).expand(trig=True)

    does not raise,  but it would be better to actually also check its result -- So
    I've just added appropriate asserts like

        assert abs(x).expand(trig=True)  == abs(x)


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 4133be6874f805d76f14e55b431b441b23796c35
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Wed Aug 27 21:59:29 2008 +0200

    test for issue 936

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 2b21556f6f121610aa77d68ad7b9d777eb121708
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Wed Aug 27 22:18:49 2008 +0200

    test issue 772

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 2681c29b70e68520a1c8f2f7b2498f36e3eb2fd0
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Wed Aug 27 18:35:54 2008 +0200

    test for some exponential limits (#1015)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 26ea37932ebdd94403bc3a249b4d584e4675cef6
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 28 10:24:41 2008 +0400

    Initial .gitattributes

    We tune git diff core to properly show in which Python methods and
    classes patch changes are.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0d506ccf84968a0da6d3f7c07c50c73e9e0f73c7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 28 10:24:30 2008 +0400

    Initial .gitignore

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 70747d9305c7cdce0945acb84cb6766d0b53fc86
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Wed Aug 27 10:48:52 2008 +0200

    More powerful and less redundant logic in floor and ceiling canonize

    A few XFAIL'ed tests were added for new simplfications that ought to work, but don't because of issue 1050

commit b7ca5141d25d881fc0cdb6a37885b5076b560c21
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Tue Aug 26 15:35:16 2008 +0200

    Optionally let the user specify tolerance or the full=True option for nsimplify

commit 5bf65858873afd24a0016b3e8059ea5a83356d07
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Tue Aug 26 12:38:04 2008 +0200

    Implement nsimplify, a wrapper for mpmath.identify with some extensions

commit f9dc80a690d2ff367372107dc61815da11398e78
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 11:20:43 2008 +0200

    A test for limit(abs(x), x, 0) written.

commit 1cf0bf367fa7bd5d1247ed9fb14a1e4e7a19790e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:56 2008 +0400

    Initial implementation of Basic.lseries().

    lseries is a lazy series, which returns a generator yielding term by term of
    the series (thus never ending if the series is infinite).

    Basic._eval_lseries() contains a general implementation using nseries() which
    is very slow, but works.

    Subclasses should implement it's _eval_lseries(), that can be very optimized,
    because the implementation should just use .lseries() to get only terms that it
    needs.

    This patch implements lazy series for Basic, Function, exp, Integral and
    Derivative. In addition it also implements Integral._eval_nseries(), that is
    needed in Integral lazy evaluation. Tests were written for some basic cases.

    This is by no means a complete implementation, just a start.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 6fca85c50a74ddc75f377da85b6f25f1e543fd03
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:56 2008 +0400

    limit(ceiling(x), x, 0, "+") and limit(ceiling(x), x, 0, "-") fixed.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit a4ad0cb59fa8d670fb261b6f86b2c3c59df1eef3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:56 2008 +0400

    limit(floor(x), x, 0, "+") and limit(floor(x), x, 0, "-") fixed.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 330874aaef76f15767b0cc42b52efd10035ae776
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:55 2008 +0400

    exp(sin(x)).series(x, 0, 1) fixed.

    The problem was that arg_series in exp._eval_nseries() was only containing O(x)
    and it then failed in limits. So we just catch this case and return a correct
    result.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit ea6f551866149de5fee2cc808e720cff298e00a3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:55 2008 +0400

    limit(((x-1)/(x+1))**x,x,oo) fixed.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit d4a09f76294d75d7b2fae1994e6997405e0b23c6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:55 2008 +0400

    Several limits in test_demidovich.py started to work, so enabled.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 5147620421c6dc484a20572f9b99cda2c323e387
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:55 2008 +0400

    limit(sin(x)/x, x, oo) fixed.

    We just improved our heuristic algorithm to handle limits x->oo.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit ce680394c874536753604736246175cab1e5e4b3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:55 2008 +0400

    limit(x*sin(1/x), x, 0) fixed.

    This is achieved by catching a PoleError exception (signaling that the gruntz
    algorithm has failed) and employing a heuristic algorithm in limits.py.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 965dacdc7db51745fe8209b19f789a7dae0ab885
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:55 2008 +0400

    sin(1/x).series(x, 0, 5) now raises a PoleError.

    This will be catched in limits and a different algorithm will be invoked to
    calculate such limits.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 35f6ea2bd3e99b8999d78aaa213f7a42a2fe1bd1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:54 2008 +0400

    gruntz: just use series expansion, without prior expand().normal().

    This hack was needed because the old series was broken. This is not necessary
    anymore.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit e18577589ca6f44d9998ab937c27932ccd6d6b86
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:54 2008 +0400

    gruntz: leadterm and series error reporting removed.

    This was only causing pain and hiding true problems. With robust series
    expansion, it is sufficient to just rely on Python exceptions.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit bbb03b0595b50b482e035e80f2cb3b8dbd10fcf6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:54 2008 +0400

    Docstrings for Basic.series() updated.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 3c25e588502e19a581325e71b6aaf255fb924e4e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:54 2008 +0400

    Deletes oseries methods and all oseries tests.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 4aae7dc90bd96417850ba1d44d6de2ad0c3ec3a5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:53 2008 +0400

    Basic()._series is not used anywhere in sympy, so removed together with tests.

    Bye bye old broken code. :)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 0948535770b092eaab018dc0431b84bd418c55e9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:53 2008 +0400

    Use nseries() instead of oseries() in Add and Pow.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit d39f8cd4a61428a89dbde6de17c4ff069620adba
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:53 2008 +0400

    pow._eval_nseries() refactored.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit e5839dd3b01311c22eba4ea0ac98797a44b0adf6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:53 2008 +0400

    log._eval_nseries() refactored.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit ef11bfd2572ee4ec2eab4c7b2493054c5a39ab69
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:53 2008 +0400

    exp._eval_nseries() refactored

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 88e9ebe8ec20f0e31d31c6bb9baf15dfb7bfc610
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:53 2008 +0400

    Function._eval_nseries() implemented.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 4dc1537ed54aa375caff40f7e9e3c2f744fa5828
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:52 2008 +0400

    Docstring to ._series() added.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 378bbe690d16e5eb673894f031f450fbd491a4d4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Aug 27 10:35:52 2008 +0400

    All nseries() renamed to _eval_nseries(), which is called from Basic.nseries().

    This is so that the user interface to the nseries facility is at one place in
    Basic and not scattered all over sympy. Also this solves the problems with a
    docstring.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 565273e677e60e4fd9f7cba99a38af675b8bdeb5
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Tue Aug 26 23:20:10 2008 +0200

    evalf housekeeping

    * Fixes wrong value in abs and log of pure imaginary numbers
    * Fixes precision issue and cleans up code in get_integer_part

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit aa9b42276aa824b6cfa6bf0b12b5e14d4f220061
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Aug 26 23:45:43 2008 +0400

    collect: restore Derivative handling after migration-to-new-core

    Spot while reviewing #1042 and #979

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit be38bf6c25285f8d0b4c4b42370a549cd8bed3ec
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Aug 26 23:45:13 2008 +0400

    collect: reenable XPASSing docstrings

    I've spot them ocassionally, and this only justifies why marking tests
    with @XFAIL is _good_ -- you'll automatically notice when they will
    start to pass.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 45784fed84ab1e1707f5b3ee87f13ffaba5650b3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Aug 26 21:11:46 2008 +0400

    Integer: optionally collect info about objects creations and cache hit/miss

    This is turned off by default an in no way affect runtime performance
    when turned off.

    When this mode is on, we'll see how effective _intcache was for a
    particular workload, e.g.:

        $ SYMPY_TRACE_INT=yes ./examples/fem_test.py
        ⎡ 1/60     0    -1/360    0    -1/90  -1/360⎤
        ⎢                                           ⎥
        ⎢  0     4/45     0     2/45   2/45   -1/90 ⎥
        ⎢                                           ⎥
        ⎢-1/360    0     1/60   -1/90    0    -1/360⎥
        ⎢                                           ⎥
        ⎢  0     2/45   -1/90   4/45   2/45     0   ⎥
        ⎢                                           ⎥
        ⎢-1/90   2/45     0     2/45   4/45     0   ⎥
        ⎢                                           ⎥
        ⎣-1/360  -1/90  -1/360    0      0     1/60 ⎦

        Integer cache statistic
        -----------------------

        #items: 81

         #hit   #miss               #total

         4261      78 (1.79765 %)    4339

        [-80, -73, -72, -64, -60, -57, -56, -49, -48, -47, -40, -39, -36,
         -34, -32, -30, -28, -26, -25, -24, -21, -20, -19, -18, -16, -14,
         -13, -12, -11, -10,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,
           1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
          14,  15,  16,  18,  19,  20,  21,  24,  26,  28,  29,  30,  31,
          32,  34,  36,  39,  40,  44,  47,  48,  49,  54,  57,  64,  66,
          72,  80,  85]

    Another example:

        $ SYMPY_TRACE_INT=yes ./bin/isympy

        In [1]: integrate(x**3*sin(x), x)
        Out[1]:
                     3             2
        -6⋅sin(x) - x ⋅cos(x) + 3⋅x ⋅sin(x) + 6⋅x⋅cos(x)

        In [2]:
        Exiting ...

        Integer cache statistic
        -----------------------

        #items: 46

         #hit   #miss               #total

        14977      43 (0.28628 %)   15020

        [-24, -6, -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
          10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
          27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]

    Initially I wrote this to demonstrate that caching Integers is
    important, but later I thought that maybe we'll better have it in SymPy
    and gradually generalize tracing into its own subsystem.


      **************************************
      * Special thanks to Sebastian Kreft! *
      **************************************

    Sebastian, good questions are already part of an answer. Please ask them more
    -- we need this stuff in SymPy to look at the system from different points of
    view -> to improve it.

    More question and more patches are welcome!
    Thanks beforehand.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3c4a0cf41ea56b860e9f1523878529271635374c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Aug 26 21:11:44 2008 +0400

    Fix Integer(Integer(4))  (#1034)

    When we do

        sympify('Integer(4)')

    it boils down to

        Integer(Integer(4))

    because internally our sympify converts Python ints to Rationals at
    Python AST level.

    But previously Integer ctor was acception only Python ints and longs, so
    let's fix it.

    Also, when doing so we should always remember that Integer(n) should be
    optimized for cache-hit case. Why? -- The answer is in the second patch.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 865d6a48d0711e7182c2f4b5d5d7693ffc2d353c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Aug 26 13:36:07 2008 +0400

    Implements cosh() simplifications.

    Currently these simplifications were implemented:

    cosh(acosh(x)) -> x
    cosh(asinh(x)) -> sqrt(1+x^2)
    cosh(atanh(x)) -> 1/sqrt(1-x^2)

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 6db16c5dd9b7085dd917b73c9f7dfb6a1623e32e
Author: Sebastian Kreft <skreft@gmail.com>
Date:   Tue Aug 26 13:36:05 2008 +0400

    Dirac delta function  (#672)

    This patch implements Heaviside, Dirac-delta and integer derivatives of
    Dirac-delta.

    What is done:

    o integrate now can integrate several kinds of expressions with DiracDelta, and
      only Derivatives of DiracDelta of the form DiracDelta(a*x+b,k)
    o simple evaluation rules (like DiracDelta(1) = 0, and DiractDelta(0) = oo)
    o latex printing

    There are some open questions on how to do things better (see #672 for this),
    but guys, let's get this merged and use as a base to build upon.

    Signed-off-by: Sebastian Kreft <skreft@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit af5b19a53567bb2dcf927d657ad4179af9eed157
Author: Sebastian Kreft <skreft@gmail.com>
Date:   Tue Aug 26 13:36:04 2008 +0400

    Sum().doit() doesn't do it  (#1028)

    I fixed the error in Sum(1/k - 1/(k+1),(k,1,n)).doit().
    The problem was in eval_sum_symbolic when trying to multiply
    L*eval_sum_symbolic(R, (i, a, b))

    The problem was thas sometimes eval_sum_symbolic returns None.

    Also I added a way to compute sums using the telescopic property.
    Currently the solution relays in solve, so the algorithm is limited by solve.
    For example:
    >>>solve(f(k+m)-f(k),m) fails
    I would like k=0
    >>>solve(cos(k+m)-cos(k),m)=-k + acos(cos(k))
    I would like k=0

    When computing the symbolic sum, we should expand the fractions to partial fractions,
    this way we could solve more cases using telescopic.
    For example Sum(1/(k*(k+1)), (k,1,n)) would be computed.

    And finally, the telescopic method only deal with direct 2 terms telescopic, so the
    following sum won't be computed:
    Sum(1/k-2/(k+1)+1(k+2),(k,1,n))

    - - - -

    Now the patch handles telescopic sum for f(x).

    First I try to solve the equation using match, and then solve. Maybe this approach
    should be implemented in solve.

    Signed-off-by: Sebastian Kreft <skreft@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 66ed02fb81839eb9957ee494ccf8d25aa8ccb8a3
Author: Sebastian Kreft <skreft@gmail.com>
Date:   Tue Aug 26 13:36:03 2008 +0400

    latex(1/x) should return $\frac{1}{x}$  (#1030)

    when I try something like :

    >>> latex(1/x)

    the answer is :

    '${x}^{(-1)}$'

    and not $\frac{1}{x}$.

    Is it a way to get the previous result ?

    Ondrej:

    Thanks a lot for the patch.

    I am little afraid of its fragility, i.e. what happens if someone changes the way
    -1*x is printed, e.g. from:

    In [3]: latex(-1/x)
    Out[3]: '$- \\frac{1}{x}$'

    to

    In [3]: latex(-1/x)
    Out[3]: '$-\\frac{1}{x}$'

    and your code will stop working.

    How about just returning \\frac{1}{x} directly in your code?

    ...

    If there is not a better way to do it, I am ok with it.

    Signed-off-by: Sebastian Kreft <skreft@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 26308fa6d0dcafc73268fbae149b6e906e655db6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Aug 26 13:36:01 2008 +0400

    RealNumber = Real implemented, so that we work nice in Sage.

    For more info, see this thread on "Improving sympy/Sage integration"

    http://groups.google.com/group/sympy/browse_thread/thread/53191af6d04ccdb

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 0f30c50fb989d9568c8075bc978e030fd40a3b0e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Aug 26 13:35:59 2008 +0400

    The benchmark changed to reflect the Sage benchmark change

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit ff8acd74026e031eef85ec2c3b7781e30fcd88b8
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 22 20:19:32 2008 +0400

    Let's finally intorduce ./setup.py bench

    We need benchmarking badly already for some time. Let's finally
    introduce them.

    I've just taken SAGE symbench adapted to SymPy by Ondrej from here:

    http://wiki.sympy.org/wiki/Symbench

    and put the script under benchmarks/

    Also, I've added simple

        $ ./setup bench

    command, which as I view it should run all our benchmarks.

    Let's start from something and improve gradually.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b971126067b471d5c917896dc1bafaf177f78d3c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 22 01:15:25 2008 +0400

    Integer: implement own __sub__ for speed reason

    Some of our algorithms need this badly (e.g. solve_linear_system), and
    in general we don't want to have weak places, so here it is:

    Timings (cache: off)
    --------------------

    i=Integer(3)

    N=8
    M=zeros((N,N+1))
    M[:,:N] = eye(N)
    S=[Symbol('A%i' % i) for i in range(N)]

            %timeit   %timeit                     %time
            i-i       solve_linear_system(M, *S)  integrate(x**3*sin(x), x)

    old:    100 µs    10.7 ms                     4.55 s
    new:     11.9 µs   8.4 ms                     4.14 s

    speedup:  8x        27%                        10%

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit d7222a2a48222e7fcd06ba845177a3a559217da0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 21 22:33:00 2008 +0400

    solve_linear_system: precompute inverse pivot before normalizing a row

    Previously we did:

        pivot = X

        for i in ...:
            row[i] /= pivot

    And now we do

        pivot_inv = 1 / X

        for i in ...:
            row[i] *= pivot_inv

    And since in SymPy A/B is A * (B**-1) the second way involves less
    flattenning in Mul and thus is faster.

    Timings (cache: off)
    --------------------

    N=8
    M=zeros((N,N+1))
    M[:,:N] = eye(N)
    S=[Symbol('A%i' % i) for i in range(N)]

            %timeit                         %time
            solve_linear_system(M, *S)      integrate(x**3*sin(x), x)

    old:    16.7 ms                         5.04 s
    new:    10.7 ms                         4.55 s

    speedup: 56%                            10.7%

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 618fa9d50cf8b1082666b5d6dfee6c07d3d12ca5
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 21 22:32:55 2008 +0400

    Integer: implement own __int__ for speed reason

    i = Integer(3)
    M = eye(8)

            %timeit         %timeit
            i.__int__()     M[i,i]

    old:    4.76 µs         23.2 µs
    new:    1.95 µs         17.0 µs

    speedup: 44%            36%

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 683c877946737b6f165c8e84c8295f1715ba9ca0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 21 22:30:51 2008 +0400

    Matrix: speedup __getattr__ and __setattr__ for element-wise access

    This two operations are the workhorse of many matrix algorithms, e.g.
    solve_linear_system. That's why it is so important to provide fast
    access to matrix elements.

    The speedup is done through:

    o not using isinstance (which is slow) and using type(x) is Y (which is
      much faster) instead
    o inlining calls to a2idx  (function calls are expensive in Pthon)

    Timings (cache: off)
    --------------------

    N=8
    M=eye(N)

            %timeit     %time
            M[0,0]      integrate(x**3*sin(x), x)

    old:    38.3 µs     5.77 s
    new:    14.4 µs     5.04 s

    speedup: 2.66x       14%

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 54c0646bb1d4571d7465c54b98335f651cf4a931
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Aug 18 16:48:33 2008 +0200

    Make digits shown by str(Real) reflect the precision more accurately

    * Only display an exponent (no mantissa) if decimal precision < 1
    * Don't strip trailing zeros

    Before:

    >>> N(cos(Rational(1,10000)))
    0.999999995
    >>> N(fibonacci(1000) - GoldenRatio**1000/sqrt(5))
    -4.0e+84
    >>> N(10**90 + fibonacci(1000) - GoldenRatio**1000/sqrt(5))
    1.0e+90
    >>> N(10**95 + fibonacci(1000) - GoldenRatio**1000/sqrt(5))
    1.0e+95

    After:

    >>> N(cos(Rational(1,10000)))
    0.999999995000000
    >>> N(fibonacci(1000) - GoldenRatio**1000/sqrt(5))
    -.0e+84
    >>> N(10**90 + fibonacci(1000) - GoldenRatio**1000/sqrt(5))
    1.000e+90
    >>> N(10**95 + fibonacci(1000) - GoldenRatio**1000/sqrt(5))
    1.000000000e+95


    Acked-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 9cf81a668464d31e47942f880927ca0b5ad287df
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 21 12:20:42 2008 +0400

    examples/qft.py -- convert output to pprint  (#719)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e42d20ae7a6be4e5025d3ca8ba50ae58e3081eff
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 21 11:42:10 2008 +0400

    Fix examples/qft.py  (#711)

    The attached patch makes it work.

    It's reasonably fast now. I'll try to calculate something meaningful with it, so that
    we have another real world application for benchmarking.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 5eb1146431222d92560e9d78ecb70bdb37b289d6
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Aug 19 16:36:07 2008 +0200

    Fix (deprecated) Matrix one(). Issue 1024

    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9766bd39c19cd04dd976894d757bdd02eede6819
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 17:16:35 2008 +0200

    Start of the 0.6.3 development cycle

commit 70e505f41de71ea7afdaca7a50b713bae3256a36
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 16:57:05 2008 +0200

    Added tag sympy-0.6.2 for changeset d446bbb1cd00

commit 29527970b7de602ba73af78a26939fa116f987ca
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 16:56:57 2008 +0200

    v0.6.2

commit 2f48ffad6ba48c160fb291dafb95ce5ad49bd8b9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 16:54:15 2008 +0200

    Credits updated

commit 6501324488234434a20d2780843019dd281c944c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 17 14:20:51 2008 +0200

    Add passing tests for #1008

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 9b948fd63874579e21e63518ba67aed9db90ed38
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 17 11:05:37 2008 +0400

    Backed out c627a6870a98  ("Use nseries in Pow.nseries()")

    http://code.google.com/p/sympy/issues/detail?id=991#c21

    Ondrej:
    This patch also brings useful functionality:

    http://groups.google.com/group/sympy-patches/msg/82a970aa35473e09

    that was nontrivial to implement, so leaving it here for later reuse. It should be
    polished.


    Kirr:
    So we'll apply this patch right after we start 0.6.3 cycle

commit 54395f239353fc0be04b786db5474779f88b654d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 05:39:24 2008 +0200

    Use nseries in Pow.nseries().

    This makes one less dependence on the fragile oseries.

    Speed of series tests:

    before: 8.91
    now: 8.48

    But we commented out one test, so it's about the same.


    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 783d0e0f7efea772996fd993a0a34eb0cc7a51cf
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 05:39:26 2008 +0200

    Fixes (x*log(2)/(2*x + pi*x)).as_coeff_exponent(x) plus a test written.

    Here for some reason a*x**n doesn't match a number. So we just return the
    result of collect, that cancels the "x" from both nominator and denominator.

    Kirr:

    it's because

    In [1]: x*log(2)/(2*x + pi*x)
    Out[1]:
     x⋅log(2)
    ─────────
    2⋅x + π⋅x

    In [2]: collect(_, x)
    Out[2]:
    log(2)
    ──────
    2 + π

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 8501e573f84b678a775cd54fa980dee996437f95
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 05:39:25 2008 +0200

    (2*x**3+pi*x**3).as_coeff_exponent(x) fixed and test written.

    The problem was that we were matching a*x**n, so it failed if "self" was Add.
    This was fixed by calling collect on self first to get it into a form:

    (2+pi)*x**3

    That then successfully matches.

commit 3195d096debbbda450c665013ef96e815df8d2e6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 07:11:09 2008 +0200

    Comment in Add.flatten() made more clear.

commit 7906eb1a304cae0a80f31061f137ab58b27616c1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 07:07:00 2008 +0200

    Fixes O(x)._eval_as_leading_term() exception (#1016).

    This was causing some series and limits to fail.

commit 5dea36ebfca8c3b4e1c8af7d4d1dcae66ed7a1a2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 07:41:07 2008 +0200

    Robustify latex tests.

commit dc440ef608dbcffc9c6c3919f43c4ece8cb8e3f2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 05:39:24 2008 +0200

    A little refactoring in Pow.nseries().

    This makes the code more robust and also shorter. Basically, when one has

    e = 1+y+x+x**2
    prefactor = 1+y

    then it's better to use

    (e - prefactor)/prefactor

    rather than

    e/prefactor - 1

    because we will then have problems with simplification:

    -1 + 1/(1+y) + y/(1+y) + x/(1+y) ....

    while in the first case we get immediatelly

    x/(1+y)

commit c888625f483333dd120c5cf0d06185e8c09b3ec1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 06:56:46 2008 +0200

    Welcome to SymPy (Sebastian Kreft).

commit 28fa133cb6c889a5476b7b17fff79e41587533a0
Author: Sebastian Kreft <skreft@gmail.com>
Date:   Sun Aug 17 06:53:35 2008 +0200

    Fixes the minus bug in latex printing.

commit 7b6d492434b908c8e11759e90371d146703d313d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 05:39:23 2008 +0200

    Let's use .nseries() by default.

    We rename Basic.series() to Basic._series() for internal use and
    call Basic.nseries() from the newly introduced Basic.series() function.

    The rest of sympy was fixed to use _series().

    Read the Basic.nseries() docstring to understand pro and cons of nseries.

commit f85e5aaadbdcc8bdcab1083052fa2273e3bc56fa
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 02:21:38 2008 +0200

    Tests and a docstrings written for Add.extract_leading_order().

commit 9d35d6900a4e1dcaecd689f5f760ff2606753727
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Aug 17 02:01:45 2008 +0200

    Make 1+O(1) return O(1) instead of 1+O(1).

    The problem was here:

    In [4]: Add.flatten((sympify(1), O(1)))
    Out[4]: ([1, O(1)], [], None)

    In [5]: Add.flatten((sympify(x), O(1)))
    Out[5]: ([O(1)], [], None)

    [5] is right, but [4] is wrong, it should return the same as [5].
    The reason for that is that O(1).contains(1) was not called (and action taken
    depending on the result) in Add.flatten(). This was a mistake caused by the
    fact that numbers are handled separately.

    This is fixed by this patch and a tests written.

commit 98b4fc903c867c3c0da968172fed4c3d454fdeac
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 17 00:56:54 2008 +0400

    risch: recognize Derivatives as components  (#1012)

    If I understand it correctly, when heurisch sees f(x), it needs to extract f(x)
    derivative and put it into set of terms. Each term is then called a new
    variable and we do computations in their space.

    But previously, components(Derivative(f(x),x), x) was only

        set([f(x), x])

    instead of

        set([Derivative(f(x),x), f(x), x])

    which resulted in that

        heurisch(f(x), x)  -> x⋅f(x)

    I don't understand this stuff, but keeping Derivatives in a list of
    components seems logical to me, and by the way, now heurisch is a bit
    more clever:

    In [1]: heurisch(f(x), x)

    In [2]: heurisch(diff(f(x),x), x)
    Out[2]: f(x)

    In [3]: heurisch(f(x)*diff(f(x),x), x)
    Out[3]:
     2
    f (x)
    ─────
      2

    In [4]: heurisch(diff(f(x),x) / f(x), x)
    Out[4]: log(f(x))

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    CC: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 17d0ad249c39637a82bb993f560c6754aa7a137c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 17 00:56:44 2008 +0400

    Derivative: fix .subs(self, something)

    it used not to recognize it should do the substitution:

    In [1]: d = f(x).diff(x)

    In [2]: d
    Out[2]:
    d
    ──(f(x))
    dx

    In [3]: d.subs(d, y)
    Out[3]:
    d
    ──(f(x))
    dx

    Out[3] is wrong -- should be y

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 96dc509bbb4cc75426110181117fc619a1503d71
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 17 00:56:39 2008 +0400

    Let's use .is_Derivative for Derivative

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 48ecba04def766577107ea280ed74d1c0729ae2b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 16 00:06:30 2008 +0400

    Welcome to SymPy  (Sebastian Krause)

commit 354f4384da2ff4a30df58fad8b1ebbb36f0663bd
Author: Sebastian Krause <sebastian.krause@gmx.de>
Date:   Fri Aug 15 18:06:01 2008 +0200

    Wild() properties added

    Signed-off-by: Sebastian Krause <sebastian.krause@gmx.de>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit a86778a9e68152e1f1b9d922d6a8d5873de1f671
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 15 02:10:25 2008 +0400

    tsolve: teach it to solve  exp(x)+exp(-x)==y  (#1011)

    If we consider the following equation

        f(x)+g(x)+... = y

    This is done by simply trying to substitute lhs f(x) -> t, and see what
    happens.


    The interesting case here is when all the functions in the lhs part go away --
    we can now proceed with solving algebraic equation and then do back
    substiotution.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0462607065ed9357812459bddf85765ff8e7bec1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 15 02:10:24 2008 +0400

    tsolve: prevent infinite recursion for f(x)+g(x)=y case  (#1011)

    When moving independent parts of an equation to rhs, we were catching that
    "we've done it all" only in lhs!=Add case


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 61bff6c6f85b99724ef2afeec6f45fe5683c6d72
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sun Aug 10 19:39:08 2008 +0200

    Implement Basic.__complex__, with tests added for both float(a) and complex(a)

commit 713ad7ac509213194545f3a072b422d3eab5621d
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sun Aug 10 19:31:20 2008 +0200

    Improvements to evalf of powers

    All cases are now handled in evalf_pow. Previously, for example
    <real> ** <complex> was handled by falling back to the old evalf
    code, which is slow and inaccurate. The case
    <negative real> ** <real> also used to be broken.

    Pure sqrt and exp are also optimized by avoiding the unnecessary
    evaluation of the exponent/base, and calling fsqrt / fexp
    instead of the general mpmath power functions

commit b91318ef9b159c2728b97d9a9d7ca01abb40431f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 22:52:47 2008 +0400

    Mul.flatten -- optimize for all-objects-are-commutative case

    Previously we used to pass all objects through non-commutative flow path, and
    only then they were returned back to commutative code-path.

    Of course this was adding some overhead, and this patch reorganizes PART-1 of
    Mul.flatten to handle commutative objects more effectively.


    Timings (cache: off)
    --------------------

        d = [x,y,z]
        q = [x,y,z,x**2,y**2,z**2]

            Mul(*d)     Mul(*q)     fem_test.py

    old:    253 µs      599 µs      4.99 s
    new:    208 µs      501 µs      4.67 s

    speddup: 21.6%      19.5%       6.8%


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 94918f59b7d2c9df67567d2183f5b338e0159b7a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 22:52:46 2008 +0400

    Mul.flatten -- more comments on how things work

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8f68263f76b014c9b8d3df38de535a548d4e76f9
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 22:52:45 2008 +0400

    Mul.flatten - rework how coeff is stored into c_part.slot0 wrt sorting

    Previously coeff was always put into slot0 in c_part after sorting, but ow we
    just do it more clever way:

    In typical scenario, Mul is instantiated with say 3-4 factors, e.g. 3*x*y*z,
    and since calling Basic.compare from list.sort is _expansive_, we can save some
    time from using our knowledge that coeff always goes to slot0 - just put it
    there after sort is done.


    This speedup things a bit:


        d = [x, y, z]
        q = [x, y, z, 3]

            Mul(*d)     Mul(*q)     fem_test.py

    old:    253 µs      340 µs      5.25 s
    new:    255 µs      308 µs      4.99 s

    speedup: -0.7%      10.4%       5.2%


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit da4ef7617aed3c2ea135a1ffa855f115e770df9c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 17:18:47 2008 +0400

    Mul.flatten: remove special handling for C.exp thus refactoring o=b**e processing

    Since we just reworked exp(x).as_base_exp() to return (E, x) there is no reason
    to do special handling of C.exp in Mul.

    This allows us to simplify the code, and speed it up a bit:


    Timings (cache: off)
    --------------------

        d = [x,y,z]


            %timeit     fem_test.py
            Mul(*d)

    old:    270 µs      5.35 s
    new:    253 µs      5.24 s

    speedup: 6.7%        2%


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 73a7b69ada74ccb71df48b53605355b85def5d7d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 17:18:46 2008 +0400

    exp(x).as_base_exponent()  ->  (S.Exp1, x)  (#1005)

    Consider:

    In [1]: exp(x).as_base_exp()
    Out[1]:
    ⎛ x   ⎞
    ⎝ℯ , 1⎠

    In [2]: exp(2*x).as_base_exp()
    Out[2]:
    ⎛ x   ⎞
    ⎝ℯ , 2⎠

    In [3]: exp(y*x).as_base_exp()
    Out[3]:
    ⎛ x⋅y   ⎞
    ⎝ℯ   , 1⎠


    Now let's look what we have with powers:

    In [4]: (x**y).as_base_exp()
    Out[4]: (x, y)

    In [5]: (x**(2*y)).as_base_exp()
    Out[5]: (x, 2⋅y)

    I think [1], [2] and [3] are not convenient, so

      *** I propose exp(x).as_base_exp() to be (ℯ, x) ***



    It seems the old behaviour was needed only for exp._eval_subs to handle cases
    like:

        exp(a*expr) .subs( exp(b*expr), y )  ->  y ** (a/b)


    So I've moved relevant logic into exp._eval_subs, and btw made it faster:

        e = exp(2*x)
        q = exp(3*x)

            %timeit e.subs(q, y)

    old:    826 µs
    new:    556 µs


    Otherwise all tests pass.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 98997b9a5378f4e3578674b5780e51a2a6a1871a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 17:18:45 2008 +0400

    Fix Integer.factors()

    I've spot this recently:

        In [1]: Integer(10).factors()
        Out[1]: {10: 1}

    but it should be

        {2: 1, 5: 1}


    Anyway, factors should be supported for Rationals too, but

        In [2]: Rational(10,3).factors()
        Out[2]: {3: -1, 10: 1}

    which should be

        {2: 1, 3: -1, 5: 1}



    It seems there was some leftover code in Rational.factors() (from revision 0),
    so I've just deleted it and wrote tests.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 4fa9eb3e28a4b87be7c92b35cf7f77260c48329a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 11:50:39 2008 +0400

    Add: optimize collect of poly terms (2*x*y + 3*x*z) + general speedup

    The main speedup is achieved bu carefully not recreating Mul the dumb way, e.g.

        s = Mul(*o.args[1:])

    but leveraging our knowledge of arguments nature and using ._new_rawargs() and
    Mul.as_two_terms()  /which is now too converted to us ._new_rawargs()/ in
    performance critical points, e.g.

        if o.is_Mul:
            ...

            # o=3*x*y -- this will call ._new_rawargs(*o.args[1:]) behind the scene
            # o=  x*y -- this will just return y
            s = o.as_two_terms()[1]


    Also, general cleanup/speedup is done:

    - we don't do seq.pop(0) anymore (this is slow), instead we just iterate over seq
    - we don't do terms.has_key(s) -- this is slower than "s in terms"


    Timings (cache: off)
    --------------------

    d = [2*x*y, 3*x*y]
    q = [2*x*y, 3*x*z]
    p = [x, 3, y]

                Add(*d)   Add(*q)   (x+y+z+1)**40   Add(*p)   fem_test.py
                                    .expand()

    old:        922 µs   1200 µs    27.8 s          173 µs    5.72 s
    new:        325 µs    354 µs    13.7 s          160 µs    5.35 s

    speedup:    2.83x     3.39x     2.03x           8%        7%


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Riccardo Gori <goriccardo@gmail.com>

commit fd09ab843cde789d295b9b001a27a3a4cbffc576
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Aug 10 11:50:38 2008 +0400

    Add/Mul -- introduce ._new_rawargs()

    To create new instance of own class with args exactly as provided by caller

    This is handy when we want to optimize things, e.g.

        >>> from sympy import Mul, symbols
        >>> x,y = symbols('xy')
        >>> e = Mul(3,x,y)
        >>> e.args
        (3, x, y)
        >>> Mul(*e.args[1:])
        x*y
        >>> e._new_rawargs(*e.args[1:])  # the same as above, but faster
        x*y


    Timings (cache: off)
    --------------------

        %timeit             %timeit
        Mul(*e.args[1:])    e._new_rawargs(*e.args[1:])

        204 µs              25.7 µs


    We'll use this nice new function to optimize Add(*looong_seq) in the next patch.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 27e3746a101b08890de3e12d8c5227942c4d3803
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 20:01:38 2008 +0400

    Pow/Symbol -- don't let is_commutative to through assumptions

    In spirit of ee75a18ca7b2, let's store it directly into .is_commutative slot.

    This avoids a lot of assumptions inference calls just for every

        Mul(Pow(x,2), Pow ...)


    And we need a lot of them when doing (x+y+z)**n expand

    All tests pass except one nseries test which was "robustified" (btw, new
    nseries output is simpler, compare:

        new                 old

         x                    1
    ────────────        ──────────────
               2          ⎛    2   1 ⎞
    1 + 2⋅x + x         x⋅⎜1 + ─ + ──⎟
                          ⎜    x    2⎟
                          ⎝        x ⎠

    Timings (cache:off)
    -------------------

               Pow(x,y)   e=Pow(x,y);       Mul(x,y)    (x+y+z+1)**40   fem_test.py  integrate
                          e.is_commutative              .expand()                    x**3*sin(x)

    old:       31.3 µs    141   µs           205 µs      37.3 s          6.41 s       7.40 s
    new:       33.7 µs     34.4 µs           199 µs      27.8 s          5.85 s       7.09 s

    speedup:   -7%          4x                3%          34%             9.5%          4%


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a9b553b283793e9a31f4829fc1773d812583d6cb
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 20:01:37 2008 +0400

    Remove legacy assumptions thus improving import time  (#963)

    Removed are:

    - is_noncommutative (use is_commutative=False)
    - is_noncomplex     (use is_complex=False)
    - homogenous/inhomogenous  (were never used)
    - is_nni, is_npi, is_pi, is_ni  (were never used besides some tests)

    This greatly offloads assumptions engine and on my host "time import sympy":

    before merging assumptions:  0.51
    after merging assumptions:   0.65
    after this patch:            0.53

    I hope this is tolerable.


    Ondrej:
    > +1 to the patch.
    >
    > Only I don't understand in what way it affects performance? That the assumption
    > engine has harder time to infer the correct assumptions if there are more rules?

    As written at the top of facts.py assumption engine consists of two parts:

     - rules compilation and preparation of tables
     - runtime inference

    When doing it, I've put special attention to optimizing "runtime inference", but
    before going to runtime the rules have to be first compiled.

    This is the job of Prover

    http://hg.sympy.org/sympy/file/ca74a684946c/sympy/core/facts.py#l385

    And other 80% of facts.py, and infering additional rules from initial ones is
    costy, because:

    1. preparation steps was optimized only in a way to produce minimal deduction
       tables - performance was not a high priority because compilation is done only once
    2. beta rules (rules like &(a, b) -> c) is costy itself. Again as written on top of
       facts.py

    http://hg.sympy.org/sympy/file/ca74a684946c/sympy/core/facts.py#l20

    """
        The major complexity is in efficient beta-rules processing and usually for an
        expert system a lot of effort goes into code that operates on beta-rules.
    """

    So that's why removing some not-so-needed beta rules from our assumptions rules
    improves "time import sympy". I'd proceed this way...

    All tests and doctests pass.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 89c3f573d9fb09a7ce4ed31e8a4333bf7f9c753b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 20:01:36 2008 +0400

    poly_factors -- robustify docstring

    Internally poly_factors calls roots, which returns zeros of a poly in dict.
    Then poly_factor iterates over that dict and construct factors.

    Thus, ordering of constructed factors depend on the hash function used, and
    this particular doctest has to be "robustified" :(


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b45d4999c782033e8d3ac0fcf921d21e34f3cd2b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 18:08:52 2008 +0400

    As the result of prevous commit, some tests started to XPASS  (#605)

    Tested on both i386 and amd64

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 418baf6f410bd1e897996d8e4c9960b0df0a7ef1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 18:08:51 2008 +0400

    Add: current code expects coeff to always live in .args[0]

    For example Add.as_coeff_terms do this

        # -2 + 2 * a -> -1, 2-2*a
        if self.args[0].is_Number and self.args[0].is_negative:
            return -S.One,(-self,)
        return S.One,(self,)

    (note how it checks arg[0] for .is_Number)


    But when we introduced sort-args-by-hash in 2e496abeb32b we broke this
    invariant.


    Let's restore it -- it is really needed by current SymPy code.

    For example #974 was caused by this problem (test included), and on i386 once
    observed the following:


    In [1]: n = Symbol('n', integer=True)

    In [2]: e = n-2

    In [3]: e.args
    Out[3]: (n, -2)


    Which was the cause of this:

    In [4]: (n-2).as_coeff_terms()
    Out[4]: (1, (-2 + n,))      <-- should be (-1, (2 - n,))


    As .as_coeff_terms() catches this on i386 -- test for it was also written.


    All tests pass -- tested on i386 and amd64.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fc28d53d0cd3230e354fb32b0f4227d8171fef2b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 16:40:52 2008 +0400

    doctests: adjust to new sstrrepr output

    o containers are now printed in human-friendly / hash-stable way
    o no 'L' suffix for long integers  (in CAS context there should be just Integer)
    o floats are printed through float.__str__ (which has 12 digits precision in
      contrast to float.__repr__ which has 17)


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fd510e84d8e80de901bf846b242273f02297d4fd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 16:40:52 2008 +0400

    test_doc: make doctesting more robust wrt hash-changes  (#968)

    This is achieved through hooking our sstrrepr function into sys.display hook.

    reminder: sstrrepr uses StrPrinter, which prints containers with human-friendly
              hash-stable ordering -- that's why it works.

    We'll adjust ordering in docstrings all-over the place in the next patch.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 53555bed5d3531c88fa7f97b7040d70e34a3b9cd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 16:40:52 2008 +0400

    sympy.interactive -- rework init_printing to support different stringifiers

    This allows us to hook different printing functions as display_hook.

    At present init_session supports:

    o pprint    (isympy -p UNICODE | ASCII | any)
    o sstrrepr  (isympy -p no)

    an example which speaks for itself for `isympy -p no`:

    In [1]: x**2
    Out[1]: x**2

    In [2]: set(['abc', 1, x, x**2, x**3, x**4, y, x**5])
    Out[2]: set(['abc', 1, x, y, x**2, x**3, x**4, x**5])

    i.e. everything works like in usual Python session without pprint, but
    containers are printed with human-friendly / hash-stable ordering.

    we'll reuse this property to robustify doctests in the next patch.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 77b0762eb81a53b79c53e6b0c6168a26a6cc87c7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 16:40:52 2008 +0400

    printing: add support for GeometryEntity to StrPrinter and ReprPrinter

    Look, GeometryEntity.__str__ was broken:

          Point(0,0).__str__()    ->  PointPoint(0, 0)


    So I've just added support for GeometryEntity to repr and str printers (fixed
    it along the way) and wrote tests.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit bbb739d1e3118c20ce7ef278321bd5bbc113d836
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Aug 9 16:40:43 2008 +0400

    printing: `srepr` sisters -- `sstr` and `sstrrepr`

    Like we have `srepr` to obtain the result of printing an expression through
    ReprPrinter, it would be handy to have `sstr` do the same with StrPrinter.

    Also, introduced is a new function `sstrrepr` which job is to print everything
    strings, except strings itself which are printed in quotes, e.g.

    >>> e = ['a', 'b', 'c', x]
    >>> print sstr(e)
    [a, b, c, x]

    >>> print sstrrepr(e)
    ['a', 'b', 'c', x]


    That's why `sstrrepr` could be useful for hooking into sys.displayhook


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1816de3e8129ede82294c5416f50c9eb2fb87117
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 19:52:52 2008 +0400

    [6/6] let's remove multiple inheritance     (note on comparisons in py3k)

    While at it, add a note about Comparisons other than == and != in py3k


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 1e486bf74a505a670c447e8ecf07bbcf9678018d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 19:52:52 2008 +0400

    [5/6] let's remove multiple inheritance     (RelMeths,ArithMeths: no more)

    Remove useage of RelMeths and ArithMeths all over the place

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 928fb26728a5f43d90fce2e8c432476aaf2e8dc9
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 19:52:52 2008 +0400

    [4/6] let's remove multiple inheritance     (RelMeths,ArithMeths -> Basic)

    Move RelMeths & ArithMeths directly to Basic.

    This way we'll remove this separate bases from all over SymPy in the next patch.

    to see it last time this is how it used to be:

    class Symbol(Atom, RelMeths, ArithMeths):
        ...

    and this is how it will look soon:

    class Symbol(Atom):
        ...


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0ec41c9e039c555da188e47eb819c811228fea19
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 19:52:52 2008 +0400

    [3/6] let's remove multiple inheritance     (NoRelMeths)

    Kill NoRelMeths

    In Python 2.1 they added rich comparisons [1] and "a < b" should be always
    meaningful for all objects.

    However, in Python 3000, they are going to rework it [2], [3], so now:

        Comparisons other than == and != between disparate types will raise an
        exception unless explicitly supported by the type


    Now let's get back to SymPy.

    Originally NoRelMeths were there to indicate "no relation methods at all - just
    raise."

    Then we added sense to __lt__ even in NoRelMeths because of problems py.test
    had with such a behaviour  -- see

        #103  (Basic.__lt__ and Basic.__gt__ and "py.test -l")

    In another issue

        #454  (__lt__ should work in the pythonic way)

    we were discussing about how to thing the Pythonic way, and here I propose:


        Let's remove NoRelMeths altogether


    Look, now all objects are comparable, but we return Eq,Gt,Ge,etc ... instances
    for cases where we can't say True/False.

    I think this makes a lot of sense, consider old and new behaviour:

            old                             new

    In [1]: Limit(x, x, 0) > oo     In [1]: Limit(x, x, 0) > oo
    Out[1]: True   (huh!?)          Out[1]:
                                    ∞ < lim x
                                        x->0

    So let's just do it.


    [1] http://www.python.org/dev/peps/pep-0207/
    [2] http://www.python.org/dev/peps/pep-3100/#id18
    [3] http://mail.python.org/pipermail/python-dev/2004-June/045111.html


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0d3b0ebd45f2d6941062236704eb53404500a199
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 19:52:52 2008 +0400

    [2/6] let's remove multiple inheritance     (NoArithMeths)

    Kill NoArithMeths -- they are not used anywhere.

    Also I think when (and if) we'll need something like this, compared to multiple
    inheritance, it would be better to adjust BasicMeta to switch arith methods of
    a class to raisers at class creation time.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit bd0136d4708f35315ad2458fc91d397f9dcfdeb4
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 19:52:52 2008 +0400

    [1/6] let's remove multiple inheritance     (Singleton)

    Remove Singleton, and replace it with SingletonMeta metaclass.

    This way we remove Singleton from bases of Zero, One and the like

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 23143ebca00e3e3e09f7809fffbfd88e180af99f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 01:20:22 2008 +0400

    Teach tsolve how to solve a*cos(x) = y

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 9129d9ae23b85d1555d470e62040f46d4d53feed
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 00:02:53 2008 +0400

    printing: add support for sets for str and pretty printers

    Again, as for dicts, we pretty-sort sets so the output is easy-to-read and
    hash-stable.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 41305ec3938aceb6a1f000100f2a9ef4664476bc
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 00:02:52 2008 +0400

    printing: let's pretty-sort dicts

    Now Latex, Str and Pretty printers all first pretty-sort dicts by their keys
    before printing. This brings two benefits:

    1. the output is easier to read, e.g.

      ⎧               2       3       4    ⎫
      ⎨1: c₀, x: c₁, x : c₂, x : c₃, x : c₄⎬
      ⎩                                    ⎭

    2. the output is stable wrt hash changes


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e1e9f605f0f1fb4ea07130dda5fc74589cb95bc8
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 00:02:51 2008 +0400

    Basic.compare_pretty -- to pretty-compare both SymPy and non-SymPy objects

    Since containers (dict & set) can contain both SymPy and non-SymPy elements, we
    need pretty-comparison which supports both kinds of objects.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 58151390daa858b5a90dd6da9743c4cf615765fc
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 00:02:51 2008 +0400

    Move Add.compare_terms to Basic._compare_pretty

    This is currently used for pretty-sorting when printing Adds, but since we are
    going to do the same for dicts and sets, it is convenient to move this
    pretty-comparison to Basic.

    Leading underscore is added to the name to indicate that this function is only
    capable to deal with Basic objects. To compare both SymPy and non-SymPy objects
    we'll add Basic.compare_pretty in the next patch.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit cf56ff20a323047d514fffc514032c3ccf3d1ddb
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Aug 8 00:02:49 2008 +0400

    pretty: merge handling of str and unicode

    Since str and unicode are both subclasses of basestring we can merge them on
    this basis and handle just basestring.

    Here is why:

    Let's recall how printing works (see Printer docs) -- it sequentially tries
    _print_<class>, _print_<class_base>, _print_<class_base_base> etc...

    so here is what Printer tries for str:

        _print_str
        _print_basestring

    and for unicode:

        _print_unicode
        _print_basestring

    And since we have that _print_basestring now, everything works just fine, but
    with less code.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 95e991f432ae84e72ab3bfe5525fa4e972728de0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Aug 7 21:43:42 2008 +0200

    Docstring to N() added.

commit 7d0bdd968fe3bfc8b3d34b7343ad0decb03a84b0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 7 22:31:40 2008 +0400

    Robert Cimrman added to aboutus.txt

    Ondrej, you forgot to do this in 34af281f94bd

commit 97d964f508820ae2bab366564269b86c0f15b704
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 7 22:22:54 2008 +0400

    Bastian Weber added to credits

commit 22ebb0ade4bf58f53c01efbf6d292f82b085fbcd
Author: Bastian Weber <bastian.weber@gmx-topmail.de>
Date:   Thu Aug 7 11:40:46 2008 +0200

    Added sub- and superscript support for symbol names to latex() (#990)

    now it has the following behaviour:
       x12       -> x_{12}
       gamma_new -> \gamma_{new}
       alpha^old -> \alpha^{old}

    Signed-off-by: Bastian Weber <bastian.weber@gmx-topmail.de>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit c3c3a7087e9e175ff69774052e3204a65316f0df
Author: Stefano Maggiolo <s.maggiolo@gmail.com>
Date:   Wed Aug 6 10:56:53 2008 +0200

    Unit now behave like Symbol (e.g. Unit('meter', 'm').args = () and not ('meter', 'm')).


    Signed-off-by: Stefano Maggiolo <s.maggiolo@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit a323d925ed6182675fc4fe566c5cdc20069890d6
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Aug 4 12:54:39 2008 +0200

    Speedup Sum.evalf by forcing use of numerical integration

    Symbolically evaluating the integral is faster and more
    accurate if the integrand is simple; but when this is not
    the case, trying to do the integral symbolically is much
    slower than the numerical integration, at least at modest
    precision


    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit c2eb667c2ed4ab1458a5c31e242fd95cb37b4c59
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Aug 4 11:11:33 2008 +0200

    Improved Euler-Maclaurin summation

    Fixes bugs, and adds a few more features. Also makes Sum.evalf use
    Euler-Maclaurin by default for non-hypergeometric series. Several tests are
    added.

    Effects of this patch include:
    - Sum.euler_maclaurin is able to generate an error estimate
    - Sum.euler_maclaurin becomes more powerful for dealing with symbolic sums
    - Sum.evalf works for sums over finite ranges, e.g.
        Sum(1/k, (k, 1000000, 2000000)).evalf()
    - Sum.evalf works for sums of transcendental terms, e.g.
        Sum(1/k-log(1+1/k), (k, 1, oo)).evalf()  (= EulerGamma)


    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 1f456cdfecbdd5e3ffa499f0e214c9575b2bbb52
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Aug 4 11:11:33 2008 +0200

    Moves the implementation of Euler-Maclaurin from the old Sum2 class to Sum  (#710)

    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 803664478e42547e47f8ba87f31486d1c7a5f029
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 7 13:48:52 2008 +0400

    printing.str -- add appropriate tests for #992

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit a080da12ec1f60e97f4c114a9535f683fd83b55b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 7 13:48:52 2008 +0400

    printing.str -- remove HACK in _print_Add

    Since previous patch fixes the gist of #922, now is the time to cleanup
    temporary workaround Fredrik had to initially put and then Basti had to copy
    into StrPrinter._print_Add


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8df7084edbc301dd6371b5dc2e4b5fe989458ed3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Aug 7 13:48:52 2008 +0400

    Fix for w1.match(w2+w3)  (#992)

    AssocOp._matches_commutative was not accounting properly for already matched
    Wilds, so e.g. in this example the following was happening:

            Symbol                      Wild

        (w2+w3).matches(x)          (w2+w3).matches(w1)
        (x +w3).matches(x)          (w1+w3).matches(w1)
        (   w3).matches(0)          (w1+w3).matches(w1)
                                    ... (infinite recursion)
    --> {w2: x, w3: 0)


    So I've added appropriate checks so that already matched Wild go away from the
    pattern for sure -- this now works:

        (w2+w3).matches(w1)
        (w1+w3).matches(w1)
        (   w3).matches(0)

    --> {w2: w1, w3: 0)


    ----
    One .matches() doctest had to be reworked because .matches() is an internal
    function and should accept only already sympified objects.

    Also, this fixes original problem in #922, and we'll add appropriate tests in
    the next patch.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 14941a018346aab6c29a8445ebdbaa3aa2177ac9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Aug 1 08:49:52 2008 +0200

    Unified isympy and sympy.interactive code

    Now isympy calls init_session from sympy.interactive
    for any type of session. This simplifies creation of
    new interactive sessions.

    Other changes:

     [1] Added sympy.interactive.init_printing

         This will setup sys.displayhook, using Unicode
         or ASCII pretty printing (use_unicode parameter).

     [2] Added new option '-p' or '--pretty' to isympy.

     [3] Initialize f,g,h Functions by default.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit a576c5655d86fc87a959692281b49c818d9e1fc4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 29 22:14:02 2008 +0200

    XFAILs a failing limit. The problem is described in the issue #605.

    This is because of a bug in Basic.extract_leading_order(w), see the
    issue for more information. The bug was there for a long time, it only popped
    up just now.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit f12585af7442d8313fef8f7c8ca688a27dffefb9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 21:57:37 2008 +0200

    Fixes orthonormality to normality and a few other typos im matrices.txt  (#900)

    This was spot by coolg49964 - thanks!

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 87a96f8bee8fb6b46bceedb6c9f3d0f190013258
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Aug 5 00:52:31 2008 +0400

    Add support for var('x,y,z')  (#955)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d1853acca252ea2ecc577dc2761e1c07c3b2c3fa
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Aug 4 06:35:46 2008 +0200

    Move slow evalf tests (integrals and sums) out of core/tests

    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit a945bc60e126191846bc637060647fdaffa1c856
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sun Aug 3 00:12:36 2008 +0200

    Numerical summation of hypergeometric series via evalf().

    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3741e8040d91f4610a55576bb621b056e849518e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Aug 3 10:07:26 2008 +0200

    Removed **options from Function.canonize, #988

    Now this works:

    In [1]: hypersimp(1/factorial(x), x)
    Out[1]:
      1
    ─────
    1 + x

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 06b56cd4ea5ec3a4988d43b9d9301d06ad15a820
Author: Stefano Maggiolo <s.maggiolo@gmail.com>
Date:   Sat Aug 2 22:33:28 2008 +0200

    Extraction of coefficients and summand (basic expressions).

    Signed-off-by: Stefano Maggiolo <s.maggiolo@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0a7a3749043b5a51682c3881326c2bea8fe1d317
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sat Aug 2 13:13:48 2008 +0200

    Support variable transformation for integrals

    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 77eb732069aa03d488bb175cb7dadeabad8cd71f
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sat Aug 2 07:36:08 2008 +0200

    Expose mpmath's support for oscillatory quadrature via evalf

    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8590942cf68fb901e4a4c794194e99aa29b08415
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Fri Aug 1 14:58:16 2008 +0200

    Fix floor and ceiling from returning incorrect results.

    This is achieved by using adaptive evalf, and abstaining from returning
    the calculated value when it is numerically indistinguishable from an integer.

commit fabe7659726b92f503150f55d2c71e5ea8eed8b0
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Fri Aug 1 12:53:53 2008 +0200

    Fix rounding in Real.__new__ when converting from string.

    Updating ReprPrinter to use guard digits as calculated by mpmath.lib.repr_dps.

commit ce498aef97724b4f0406b1955d624f7f35a1395d
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Fri Aug 1 11:36:38 2008 +0200

    Adaptive and faster evalf implementation.

    There are still some missing features and minor problems, but most things
    should work. It falls back to the old evalf code when it encounters a function
    that hasn't been implemented yet.

commit a1fffd5007ae1f82ad1843fab98440951be40c5b
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Wed Jul 30 21:46:09 2008 +0200

    Improve output and tests of ReprPrinter + some basic fixes for printing.

    The following is included:
           (1) Excessive tests for ReprPrinter
           (2) Improvements for ReprPrinter
           (3) Fix of PythonPrinter (necessary because of slightly changed output
    of ReprPrinter)
           (4) Add _print_Zero to StrPrinter

    Most important, in my opinion, is that all tests of ReprPrinter now also
    test if the Relation eval(srepr(expr))==expr holds. E.g. this revealed
    that (at least for the tested examples) the srepr of Reals must not
    include more digits than their precision.

    Signed-off-by: Sebastian Krämer <basti.kr@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit ffdaa471e93977bd3571b827ac55088762ee699b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 16:09:06 2008 +0200

    Matrices documentation updated.

commit a72c86e56f5df198ed31bd2a8ce6e7c1bad42b86
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 16:01:35 2008 +0200

    Rest of occurences of zero and zeronm fixed.

commit d84dc9b763dc8c3265e6d72ef6d0b2a0dfb138f7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 15:51:25 2008 +0200

    Doctest failures fixed.

commit ab2cf239cb2b884c4bfbc389501df8ed32aa885d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 15:49:21 2008 +0200

    Robert added to README.

commit abfff09834e620da25f1bf3108bd2df4c948aa72
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 15:47:28 2008 +0200

    Got rid of all deprecation warnings by using zeros instead of zero and zeronm.

commit 0c0e5d17b9edac5b19764e2dc008270504a67031
Author: Robert Cimrman <robert.cimrman@gmail.com>
Date:   Thu Jul 31 14:58:55 2008 +0200

    Introduces the zeros and ones functions and methods that work like in NumPy.

    This unifies zero and zeronm. Deprecation warnings added to zero, zeronm, one.

commit ca0c2f20d52cc6ff8d8d87770b897bcc1991b9da
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 12:26:47 2008 +0200

    Removing lambda_args return parameter from all flatten methods.

    This functionality was not tested and used.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit a4e18f2725745ebfe512ee4fa4f73e2946e1edf1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 12:23:38 2008 +0200

    Refactors Poly.as_basic() to use the multinomial_as_basic() function.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit 45327177f2ed218265499d5318e657e2eee8aee1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 31 12:23:23 2008 +0200

    Refactors part of Pow.expand() into multinomial_as_basic() function.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Fredrik Johansson <fredrik.johansson@gmail.com>

commit 9413c507782a91233e910478661e7a3c73389b04
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon Jul 28 20:44:53 2008 +0200

    Fix printing of dict, limit, integral and a little tweak for mul.

    Signed-off-by: Sebastian Krämer <basti.kr@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5f38eb73900992beef0b45b7557680f56d9d32c8
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon Jul 28 20:40:30 2008 +0200

    Polish and complete Str tests.

    This discovered some bugs that will be fixed by the following patch.

    Signed-off-by: Sebastian Krämer <basti.kr@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 85e2823d7a71d617e4b9818b1273e1aaadefdad0
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon Jul 28 20:36:20 2008 +0200

    Completes the refactorint of printing for distributions.

    Signed-off-by: Sebastian Krämer <basti.kr@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit e67c753a717c7ac03768b82d73060957bf0ada53
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon Jul 28 20:33:37 2008 +0200

    Completes the refactoring of printing for Matrix and SMatrix.

    Signed-off-by: Sebastian Krämer <basti.kr@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 408237f086ea2730ad3559a0b34d0f8a063d9fe7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Jul 29 11:36:41 2008 +0400

    risch: "robustify" test_heurisch_fractions()

    When integrating depending on tests invokation order it either ruturns

        5*log(+2*x**6 - 5) / 12,     or
        5*log(-2*x**6 + 5) / 12


    Since

        log(-x) = i + log(x)

    both integration results are still correct, but I'd suspect something is wrong here.

    Mateusz, I need your help to track this -- this does not depend on caching be
    turned on or off.

    Mateusz:

    """
    Yes, both results are correct but we must finally do something to fix
    this annoying behavior (I mean playing with minus sign in expressions
    and dependence on term order which, in case of expressions, is almost
    always irrevelant).

    +1

    Thanks,
    Mateusz
    """


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 3ff20adbd5e6561af1651254cf069ba52f2e5d49
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Jul 29 11:34:52 2008 +0400

    Add/Mul -- don't let is_commutative to go to assumptions

    Because this would be a slow path - instead, let's store it directly into
    .is_commutative slot.

    This avoids a lot of assumptions enference calls just for every Add and Mul.


    All tests pass except one integration test, which we'll deal with in the next
    patch.

    Timings
    -------

               Mul(x,y)     fem_test.py     fem_test.py     integrate(x**3 * sin(x), x)
              (cache:off)   (cache:on)      (cache:off)     (cache:on)      (cache:off)ff)

    old:       285 µs        3.127 s         7.355 s         4.30 s          8.35 s
    new:       220 µs        2.910 s         6.580 s         4.06 s          7.70 s

    speedup:   29.5%          7.5%             12%             6%             8.5%


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit df761753a1efcecf75cf243a899ce7f09783d91f
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Mon Jul 28 14:02:55 2008 +0200

    fix integer division in Sample.mean

commit cef928d21ff98656d2ba5388a53794dee8763596
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 28 08:36:11 2008 +0400

    New-style classes + __getattr__ sucks, here is why:

    # new-style class with deep inheritance with root=object
    class Base(...)

    class A(Base):              class B(Base):
        ...                         ...

        # no __getattr__            def __getattr__(self, name):
                                        # not important what is here
                                        pass


        def func():                 def func():
            # some function             # some function
            pass                        pass



    a = A()
    b = B()


    # note - no call is made, just attribute access

    %timeit a.func  -->             830 ns
    %timeit b.func  -->  2.19 µs = 2190 ns

    That's more than 2.5x slowdown!


    ----
    Let's have a look here:

    http://landau.phys.spbu.ru/~kirr/cgi-bin/hg.cgi/py-fast-property


    The following is what I get on my host (rev a063185b02f5 used):

    ========================================
     *** INSTANCE VAR ACCESS TIMES (ns) ***
    ========================================

         cls     cls_o    cls(BB)  cls(OO)  note

    E:    527      607      591      589    class var (just for reference -- can *not* be used)
    I:    586      485      592      481    __slots__
    F:    715      478     1625      488    inst var
    G:    691      477     1638      482    inst var (+ another inst vars)
    J:    881      477     1825      477    __getattr__ (empty)  + __slots__
    C:   2035     2155     1966     2160    @property
    D:   1017      479     2885      490    __getattr__ (cached)
    H:   1010      488     2903      477    __getattr__ (empty)  + inst var
    d:   7190     7186     9381     8850    __getattr__

    =========================================
     *** INSTANCE FUNC ACCESS TIMES (ns) ***
    =========================================

         cls     cls_o    cls(BB)  cls(OO)  note

    I:    719      757      704      780    __slots__
    G:    797      768      771      767    inst var (+ another inst vars)
    F:    781      769      775      790    inst var
    C:    689      782      778      793    @property
    E:    686      828      782      774    class var (just for reference -- can *not* be used)
    J:   1011      761     1969      818    __getattr__ (empty)  + __slots__
    d:   1010      769     2041      770    __getattr__
    D:   1079      792     2048      757    __getattr__ (cached)
    H:   1089      781     2111      769    __getattr__ (empty)  + inst var

    ----
    legend:

     cls     -- new-style class without base
     cls_o   -- old-style class without base
     cls_BB  -- new-style class with long base
     cls_OO  -- old-style class with long base



    For -*- new-style -*-  classes this means that:

      - table 1 -

    (F) access to __dict__  vars is much slower in case of deep inheritance
    (I) access to __slots__ vars is independent of inheritance

    (J,H) access to both either __dict__ or __slots__ instance vars is _much_ slower
        in presence of __getattr__ (!)


      - table 2 -

    (I,F) access to function attributes is independent of inheritance
    (J,d,D,H) access to function attributes is _much_ slower if there is a
        __getattr__ (!)


    So you see, __getattr__ + new-style classes + inheritance is slow even if
    __getattr__ is not used at runtime!


    But for -*- old-style -*- classes the tables say that instance var & function
    attribute access times do not depend on inheritance and are immutable to
    __getattr__ presence.

    I just can't believe old-style classes are better!?

    (An interested reader is directed to read the following parts of CPython
     runtime:

     Objects/object.c
     Objects/typeobject.c
     Objects/classobject.c

     in particular:

     (old-style classes)
     `instance_gettattr`

     (new-style classes)
     `PyObject_GenericGetAttr`
     `slot_tp_getattro`
     `slot_tp_getattr_hook

     and maybe more ...
    )


    ----------------------------------------

    So what this all means for SymPy?

    Since Basic is a new-style class, and we use __getattr__

        all attribute access is *SLOW*

    So, we have to choose to either

    1. switch to old-style classes, or
    2. remove __getattr__ from Basic

    Personally, I'm afraid to go the old-style classes way, because:

    - new-style classes have nice features as e.g. __slots__
    - new-style classes are better maintained
    - e.g. Cython classes are new-style (not sure for 100%)
    - ...

    So here we choose (2).

    The only thing that Basic.__getattr__ was used for is to jump to assumptions
    code so things like:

        expr.is_positive

    work.

    There is a nice idea how this could be done without __getattr__ (please read
    the patch), so I see no reason not to remove it.


    So let's make this story short and just do it -- SymPy is 20% faster now:

                                                                 3
                %timeit   %timeit       fem_test.py   integrate(x sin(x), x)
                x.diff    x.is_integer  (cache:on)    (cache:on)

    old:        2.18 µs   15   µs        3.72 s         5.18 s
    new:        1.01 µs    4.2 µs        3.16 s         4.33 s

    speedup:     1.16x     3.57x          18%            20%



    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 8fa0484bd71da210a4de6485587a80a27a73868c
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Sun Jul 27 12:17:40 2008 +0200

    Precedence now doesn't test for class equality anymore, but only for class names.
    Also some unnecessary PRECEDENCE values were removed and more tests added + improved.

commit 047de084634f6d2143d4fb828ea8f32981f96ded
Author: Stefano Maggiolo <s.maggiolo@gmail.com>
Date:   Sun Jul 27 11:20:10 2008 +0200

    Fix: exp(sin(x)*log(x)) != x

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 61f0fc0796ebca36da93c0ce1e76704d94e996f7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jul 27 14:12:15 2008 +0400

    Stefano added to README and credits

commit f7729fe6ca3bb0532a6a0ddfcace1d76592fcba4
Author: Stefano Maggiolo <s.maggiolo@gmail.com>
Date:   Sun Jul 27 10:21:40 2008 +0200

    Better canonical form for exponential + test

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 61516c8a98bb9f0286bec2e8cfeb93cc96d5e74e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 26 15:13:12 2008 +0200

    Print the initial metrics in relativity.py

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 3fa6286dde03651456829a0abe55176c914acc94
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jul 26 17:01:03 2008 +0400

    examples/relativity.py -- convert output to pprint  (#719)

    This is how it now looks like:

    ----------------------------------------
    Christoffel symbols:
           d
           ──(ν(r))
           dr
    Γ⁰₁₀ = ────────
              2
           d
           ──(ν(r))
           dr
    Γ⁰₀₁ = ────────
              2

            -λ(r) + ν(r) d
           ℯ            ⋅──(ν(r))
                         dr
    Γ¹₀₀ = ──────────────────────


    ...

    ----------------------------------------
    Ricci tensor:

    ...

    ----------------------------------------
    solve the Einstein's equations:
               ⎛     C₂⎞
    λ(r) = -log⎜C₁ + ──⎟
               ⎝     r ⎠
    metric:
    ⎡      C₂                         ⎤
    ⎢-C₁ - ──     0     0       0     ⎥
    ⎢      r                          ⎥
    ⎢                                 ⎥
    ⎢             1                   ⎥
    ⎢   0      ───────  0       0     ⎥
    ⎢               C₂                ⎥
    ⎢          C₁ + ──                ⎥
    ⎢               r                 ⎥
    ⎢                                 ⎥
    ⎢                    2            ⎥
    ⎢   0         0     r       0     ⎥
    ⎢                                 ⎥
    ⎢                        2    2   ⎥
    ⎣   0         0     0   r ⋅sin (θ)⎦



    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 13d91b552525b7aa483f9a2864d8a001179775be
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jul 26 16:44:32 2008 +0400

    pprint: prettify matrix output  (#495)

    compare old and new look and feel for

    In [1]: Matrix([[x*sin(x)/y, 1], [1, 0]])

    (old)
    ⎡                 ⎤
    ⎢x⋅sin(x)         ⎥
    ⎢────────        1⎥
    ⎢   y             ⎥
    ⎢                 ⎥
    ⎢                 ⎥
    ⎣       1        0⎦

    (new)
    ⎡x⋅sin(x)   ⎤
    ⎢────────  1⎥
    ⎢   y       ⎥
    ⎢           ⎥
    ⎣   1      0⎦


    Now, we don't uniformly reshape each cell to maxw/maxh, but do this
    column-wise.


    Also, cells are now h-centered.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit c956539b40f13a92072ac0838cc04cf800db7599
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jul 26 14:40:23 2008 +0200

    Fixed RootSum.doit, now works on all roots

    In [1]: a = apart(36/(x**5-2*x**4-2*x**3+4*x**2+x-2), x, evaluate=False)

    In [2]: Add(*[ g.doit() for g in a.args ])
    Out[2]:
        4       4         9          3
    - ───── + ────── - ──────── - ────────
      1 + x   -2 + x          2          2
                       (1 - x)    (1 + x)

commit da23bcb7a99bdff3218b952e425a967cd6414cb2
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jul 26 15:30:57 2008 +0400

    Add test for already fixed  #634

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f472e215384b01a33251c837ecfb63698a4bb5c9
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jul 26 14:05:30 2008 +0400

    Fix str(Real)  (#962)

    This was broken after tostr/torepr refactoring, but since there was no test for
    Real.tostr() I think this is not a Basti fault.

    I've just added ._print_Real to StrPrinter with code basically from old
    Real.tostr() from sympy-0.6.1:

    http://hg.sympy.org/sympy/file/67014f91fe6d/sympy/core/numbers.py#l290

    and wrote tests.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 88963fe9a93cf1945fca9e148181ba7bf2180435
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jul 26 12:15:13 2008 +0400

    "Fix" docstring where output depends on internal ordering.

    This just postpones problem, but make docstring tests pass on x86.

    I think what we really need is to make StrPrinter sort items for lists, tuples
    and dicts before printing.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit a9f91faefb6d45abbf0c9cef176a8b5b86a4a2a0
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Sat Jul 26 00:42:04 2008 +0200

    Adjusts two docstrings that relied on the old repr output.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit aa7d5303c5f2b553f76867636ad030386ad90d1b
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Sat Jul 26 00:40:57 2008 +0200

    Improves the fallback case for unknown classes in ReprPrinter.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit c887b8c36a85aa16df26f4ee206e0aa4b1b02dcf
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Sat Jul 26 00:32:26 2008 +0200

    Export srepr globally

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5114ed1b102f7291eb16054ab3ec9c35944873ac
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri Jul 25 23:49:14 2008 +0200

    Change all docstrings that were false because of a little bit different printing output.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1dc7303f2120b9c13f3eb674a760c027aef77194
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri Jul 25 23:22:50 2008 +0200

    Add docstrings to repr.py and str.py.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5d37e648304d010c8e85890563e6c5017ef91fae
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri Jul 25 23:22:48 2008 +0200

    Both, str() and repr(), use now StrPrinter. For executable output srepr must be used.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 76c80bc3ca736c0ac166450adb027800f10b6b78
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri Jul 25 23:22:45 2008 +0200

    Handle complete printing of matrices in sympy/printing.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0acbf1c0a808e42b6e3917694f3db6bb343d2002
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri Jul 25 23:06:17 2008 +0200

    Implements srepr() and propper handling of lists and tuples.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5fa1cdf1fb95b3768727c3a09bfe10769a439cc3
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu Jul 24 19:53:49 2008 +0200

    Lets LambdaPrinter inherit from StrPrinter.

    Many methods become redundant and can be erased. Therefor the whole printer gets much simpler.
    (Some tests for the LambdaPrinter have to be changed since the implementation of precedences in StrPrinter makes many brackets needless.)


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit aa3ed61259ad65eb177baa4cf344740d9a5a5261
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu Jul 24 19:53:49 2008 +0200

    Moves all tests concerning repr() ro the printing/tests folder.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 35bba2f297f60030977e7bdd5d95e87b7809f6f5
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu Jul 24 19:53:49 2008 +0200

    Moves all tests concerning str() and repr() to the printing/tests folder.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 18966d0b65e6ed8fd4ce8ae49f9986001c0786b4
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu Jul 24 19:53:49 2008 +0200

    Fixes the PythonPrinter which was broken because of new StrPrinter.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit fb28d818acea42adea6be3b643e3f2c916b8e8f6
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu Jul 24 19:53:49 2008 +0200

    Adjust tests for new repr printer.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit f99809e12662d22f32e05341e73dddef3b69e05e
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu Jul 24 19:53:49 2008 +0200

    Moves all torepr methods to the repr printer.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 32e8bc3c5beec47c75996a8192f9112388189ff4
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu Jul 24 19:53:48 2008 +0200

    Adjust some tests for the new string printer.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 3a8f867a6642a269b115b89d623184b4922d1f68
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon Jul 14 16:53:19 2008 +0200

    Refractoring of the printing system.

     o Get rid of tostr() and torepr() - only __str__() and __repr__() are used.
     o Precedences are moved out of the Basic class to a dictionary PRECEDENCE in the basic module.
     o Always the upper class is now responsible for ptting brackets where necessary. This means there is no need for the "level" parameter in the printing methods.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 598726524de3271c8718e5848a64e1e56dd8aa4a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 25 00:30:57 2008 +0200

    Print the traceback in limits if the series expansion fails.

    This is useful for debugging if something goes wrong.

commit e0193fc997ab4448afb0f49bc33c09a9f47d9042
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [24/24] Mul: more tests for .is_negative & friends

    but this time starting from nonnegative & nonpositive terms


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit a3f2a9649a35489cd71ff0b843199ab4daf20ef4
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [23/24] Pow: fix tests (0**x).is_real

        x=Symbol('x', real), then the following should hold

        ( pos**x).is_real == True
        (zero**x).is_real == None       tricky, and hence
        (npos**x).is_real == None       because zero is contained in npos


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 5102168e396843d187a63763ea84e6b40a902648
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [22/24] 3 XPASS'ing tests in sympy/core/tests/test_assumptions.py

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit dbfdce8bb9733a4268dd125a9dc3c67c5b493303
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [21/24] New test for inference rule  (!real -> !integer & !positive & !zero & ...)  (#749)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 9e7c949eea2d3ee672895d9e21b65a74a61ee3a1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [20/24] Numbers: correct secondary tested assumptions

    basing on rules:

        even/odd                is always an integer  (if not =F)
        prime/composite         ---------------//----------------

        noninteger/rational     is always a real  (if not =F)
        positive/negative/...   ---------------//----------------


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 4d574a944fc017d31d18dda178da781ebb207c79
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [19/24] I: correct tested assumptions

        integer:    U -> F      (intgers are always real)
        rational:   U -> F      -----------//------------


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 82a536cf0f97c1565b3efa35c0ecbd008c655add
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [18/24] NeativeOne, Pi, Exp1: correct tested assumptions

    because now:

    NegativeOne
    -----------

        composite:  T -> F      (composite == integer & positive & !prime)

    Pi, Exp1
    --------

        integer:    U -> F      (obviously pi & e  are not integers)


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 7d53c96e9853bb685c18ead9d8eea4320186c4da
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [17/24] NaN: correct assumptions

        rational:   T -> U
        integer:    F -> U
        finite:     T -> U
        zero:       T -> U      (nan.is_zero was True !)
        prime:      F -> U
        comparable: U -> F      (=F because we .evalf() will not produce a number)

    Also NaN lacked assumptions tests, so I wrote them.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit bd09b9547134340b47b99d12f786f59f692d409c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [16/24] +-Infinity: correct assumptions

        finite:         U -> F      (not sure about this, but NegativeInfinity already was =F)
        integer:        F -> U
        rational:       T -> U
        infinitesimal:  U -> F


    Also Infinity and NegativeInfinity lacked assumptions tests, so I wrote them.

    References
    ----------

    http://en.wikipedia.org/wiki/Finite
    http://en.wikipedia.org/wiki/Infinitesimal
    http://en.wikipedia.org/wiki/Infinity


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 2a729d206b403743ff6d9318637041daac6b77ce
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [15/24] Zero: correct assumptions

        composite: T -> F

    because according to http://en.wikipedia.org/wiki/Composite_number

        composite == integer & positive & !prime


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 912ceb28f5a56b7c006326532c519021aa084116
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [14/24] Mul: teach ._eval_is_negative about all-terms-are-positive expressions (e.g. 2*positive)

    in such cases negative is known to be False for sure.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit f4816aa40a8d0e1d086b1454b7b7727ac83bde7c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [13/24] Mul: teach it that !integer -> !even & !odd

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 418f8ea7dbc5b5880b3a9c0a389e9fcac62dc595
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [12/24] Mul: teach .is_real & .is_imaginary to account for canceling imaginary multiplications

      e.g. (I*I).is_real == True

    and also to teach it to recognize real=F terms properly:

      e.g. (Symbol(real=True) * Symbol(real=False)).is_real == False


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 5a4a4dade38d02f6d9119096f8e4dacda4fe8665
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:07 2008 +0400

    [11/24] rework assumptions.py to use FactRules    (assume typeinfo)

    Switch to .new() and .assumptions0 all over the place  -- this solves the
    problem and make just introduced test pass.

    ----

    This is the final patch in the first part of this series. Following patches
    will fix wrong tests.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 61a52fb02495bec47fdbefdd8a155c243844b8f1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [10/24] rework assumptions.py to use FactRules    (assume typeinfo)

    The problem
    -----------

    if we have an expression, say

        s = 1 + pi

    its ._assumptions may evolve in time, e.g. if we'll ask

        s.is_positive   -> True     (it asks evalf)

    it will add 'positive' to ._assumptions.


    Now let's look at Basic._eval_expand_trig, I quote:

        def _eval_expand_trig(self, *args):
            ...
            terms = [ term._eval_expand_trig(*args) for term in sargs ]
            return self.__class__(*terms, **self._assumptions)

        b = a.expand(trig=True)


    It seems it wants to create an object of the same class  (self.__class__) and
    with the same assumptions (self._assumptions)

    Now the problem is that if even original s assumptions are empty, at expanded
    instance creation time there sit 'positive' as well.

    So expand will return *different* object with *different* starting assumptions
    compared to what s had on its creation time, and btw do you remember
    assumptions affect hash?

    So hash(a) will be != hash(b) and this is bad!


    To overcome this I introduce .assumptions0 property and .new() method.

    - assumptions0 is used to obtain typinfo assumptions, and
    - new -- to spawn new instance of self + assumptions0 typinfo applied.

    Alos, failing test that demonstrates the problem is attached. We'll switch the
    whole SymPy to .new and .assumptions0, and this will cure the problem and make
    the test pass.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 8dd5371cf0d3c90f50dd6e4de0a65eccba3e9117
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [9/24]: rework assumptions.py to use FactRules   (BasicMeta stores derived assumptions back)

    Teach BasicMeta to store newly derived assumptions back into class as class
    attribute.

    This speeds things up, consider:

        class Integer(Rational):
            is_integer  = True


    BasicMeta will then infere that is_irrational = False  (some previous patch),
    and will store it as Integer attribute:

        Integer.is_irrational = False


    Then when Integer.is_irrational will be accessed, the result will be obtained very fast:

        %timeit a.is_irrational     -> 20 us (without this optimization)
        %timeit a.is_irrational     ->  2 us (with    this optimization)


    This may not be that important since the overal effect of this change is hidden
    under our Add/Mul slowness, but:


        *****************************************************************************************
        * The patch itself contains a hint how one could speedup _all_ attribute access by x2.5 *
        *****************************************************************************************

    I think this is important.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 67340b871674ef98a54a140360b9930d70f1c173
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [8/24]: rework assumptions to use FactRules  (no .assume())

    .assume() is now disallowed -- in fact it was never a good idea to change
    assumptions in-situ.

    When we'll refactor them to be separate of expressions, it could make sense,
    but even then a lot of assumptions would be still bound to objects (e.g.
    Rational.is_integer=False for performance reasons)

    So let's just remove one tiny place where .assume() was 'used' to modify
    assumptions in-situ -- the only test.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit b0f9dd27e3c9447e0119e79d72434f92f8c15c6a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [7/24]: rework assumptions to use FactRules  (hash)

    As promised, rework Basic.__hash__ to properly account for assumptions.


    The problem
    -----------

    issue #726 contains records about how our hash was unstable some time ago.

    The gist of the problem was that Basic.__hash__ was taking ._assumptions into
    account, and also ._assumptions were used like cache for knew know facts so its
    content could change in time.

    That's why e.g. the following sequence used to 'change' a2 hash:

        x = Symbol("x")
        y = Symbol("y")
        a1 = x+y
        a2 = y+x
        a2.is_comparable

        h1 = hash(a1)
        h2 = hash(a2)
        assert h1 == h2     # boom!


    In b1b0cd23c21a Ondrej just turned assumptions cache off, and this solved the
    problem although also it slowed down runtime somewhat.

    Now, as we are again caching the assumptions we have to properly account for
    this effect.

    In fact, what is also important is that say for this two objects:

        Symbol('x', even=True)
        Symbol('x', integer=True, odd=False)

    Their hash be equal, and they themselve should be equal.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 8bf95bf21b5e2ec3b0b14b9933a3ccaa81ee3432
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [6/24]: rework assumptions to use FactRules  (Basic)

    Rework Basic to use new assumptions interface. In particular:

    - ._assumptions are initially created in shared state - i.e. in the hope that
      they will not differ from class.default_assumptions

    - Basic.__getattr__ is reworked to call ._what_known_about() and to act as a
      upper-level cache (earlier caching was done in ._what_known_about equivalent,
      but the soon we hit the cache - the better)


    Also, add a note that there are a *lot* of Add/Mul creations with the only
    'assumption' commutative=True.

    This slows things down, and frankly commutative is not an assumptions - it's
    like a type characteristic - so I hope we'll deal with it some day.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit f1f09e6d44c2b4ec6a5b76da5560eb05062c3eb1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [5/24]: rework assumptions to use FactRules  (BasicMeta)

    Rework BasicMeta to deduce all possible consequence of a class
    default_assumptions and make it complete at class creation time.

    e.g. if we define:

        class EvenInteger(Basic):
            is_integer  = True
            is_even     = True

            ...

    it will infer:

        integer -> real -> complex
        even    -> !odd
        (and probably other facts)

    and store them as class.default_assumptions.

    ----

    Why is this needed?

    In previous assumptions, when an object was created, Basic.__new__ was calling
    .assume() and the same work was done again and again.

    It's better to precompute whatever is possible, and we do exactly this -- so
    now cls.default_assumptions stores convex hull of all cls initial premises.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit db357d5a33c4cc2b86586369952940972d846d92
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [4/24]: rework assumptions.py to use FactRules   (kill ._eval_is_nonnegative)

    As we now use inference engine with proper beta-rules support (&(a,b) -> c),
    there is no need to provide ad-hock things like generic ._eval_is_nonnegative()

    In fact this old ._eval_is_nonnegative() was wrong -- it was correct only when
    an object in hand was real.

    So let's get rid of old unneeded stuff and use generic inference.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 32e0fbed3aa392879094f8974555efe76b8a8d7f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [3/24]: rework assumptions to use FactRules  (assumptions.py)

    This is start of big rewrite -- almost all old code goes away, and where
    possible we delegate to FactRules:

    - rework intro text
    - use FactRules to define inference rules
    - `._get_assumption()`  ->  `._what_known_about()`
      o rework to use FactRules prerequisites (not optimal at the moment)
      o rework to store new known facts in ._assumptions (this will not cause
        problems -- we'll change Basic.__hash__ not to depend on it later)

    - `.assume()`  ->  `._learn_new_facts()`
      o now this is private -- we don't allow users to modify assumptions in-situ
      o use FactRules inference engine to do actual logic stuff


    Also, now SymPy is in a state where a lot of things is temporarily "broken" --
    we'll "cure" it gradually and fully restore to "all tests pass" in the end of
    this patch series.

    ----

    Well, assumptions were a problem for a long period of time. I don't disentangle
    them here, but I consider what is being done is still an improvement, because:

    - we'll gain correctness
    - we'll gain some speedup
    - we'll separate logic stuff into its own subsystem


    Assumptions were long talked/grumbled about, and you know, when I was at school
    I've never understood why learning history is needed at all, but now I know
    that learning history brings answers to most of out today's problems -- that's
    why it is important.

    So a bit of relevent history ...

    References
    ----------

    1. "Remove assumptions"

        http://groups.google.com/group/sympy/browse_thread/thread/10e52aa310971289

    2. "Dealing with assumptions"

        http://groups.google.com/group/sympy/browse_thread/thread/c436fd9cfc701138

    3. "Pearu: 'it is difficult to resolve assumption, speed and caching issues within SymPy development policy'"

        http://groups.google.com/group/sympy/browse_thread/thread/ffdb5468fe5a8356#8545b50eab75c5d9

    4. "Ondrey: 'last large missing piece are assumptions'"

        http://groups.google.com/group/sympy/browse_thread/thread/652741aa2d4e952

    5. "Ondrej: 'I think SymPy will be ready for it (writing core in C/Cython) when we find a robust, simple, general and a fast way how to do assumptions'"

        http://groups.google.com/group/sympy/browse_thread/thread/4c13d88475def207#9b8609f18f2e1522

    6. "Ondrej: 'SymPy doesn't have a very robust assumption model, we are still investigating how this could be done.'"

        http://groups.google.com/group/sympy/browse_thread/thread/8e35d2b640cc16d0#cafc0591fb84aeea

    7. "Saroj: 'I am wondering if SymPy
        currently features assumption to limit a variable's range just as we
        can assume it to be real, so that a variable x can be defined as real
        in the range [-1,1].'"

        http://groups.google.com/group/sympy/browse_thread/thread/a220124034d22765

    8.  sympycore v 0.1 released, "Pearu: will try to implement a robust and flexible assumption model."

        http://groups.google.com/group/sympy/browse_thread/thread/675a631be78f027c#d13828298f6e3add

    9.  sympy robustness improved -- Ondrej fixes nasty caching bug sitting in assumptions.py

        http://groups.google.com/group/sympy/browse_thread/thread/c606f20119365de1


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit ac7cb8ddd2b72ca61e5791f160a3dd3c59692de0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [2/24] rule based inference engine (engine itself)

    Here I introduce new inference engine which I'm going to use for assumptions.


    When I started to play with assumptions ~ half a year ago, the firsts thing
    I've noted was that:

    - inference itself was intermixed with object creation etc (it was not possible
      to use logic stuff as separate subsystem)

    - the rules put into assumptions.py and the code was just wrong -- in the end
      of this patch series you'll see how much tests I have to change.


    So I've started to work on my own inference engine first.

    Initially I prototyped a system where one could define rules of form

        a -> b  (where a & b are atoms -- e.g. integer=T -> rational=T )

    and tried to hook this engine into assumptions.py, but I failed because as it
    turned out, inference engine that could satisfy all our tests have to be
    capable to process joined rules:

        a & b -> c  (e.g. real & positive -> !negative)

    Here I give up the first time:

    http://groups.google.com/group/sympy/browse_thread/thread/c436fd9cfc701138


    Recently I refreshed my work and put some time into studying the topic -- its a
    whole new world -- good inference engine is an art, and there are even family
    of software programs which heart is inference engine (I'm talking about expert systems) ...

    In short, there is a classic algorithm called RETE for this stuff

    http://en.wikipedia.org/wiki/Rete_algorithm

    And what is done here is a very simplistic apprach with some ideas borrowed
    from there -- I could not find ready stuff for this task :(

    The main design goals were:

    1. to be correct, and
    2. to be fast at runtime

    I think 1 is acheived, and 2 is so-so (but much better than we had before), and
    there is a room for improvements.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 69dc961a648870bfa443d02fc0e3e2fd2ca312c7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 22:03:06 2008 +0400

    [1/24] rule based inference engine (logic)

    Simple logic stuff -- And, Or, Not -- just bare minimum needed to get FactRules
    (next patch) up and going.

    However feel free to imporove this stuff for general purpose.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>

commit 43d608e95941fb5ae2b24e00676e79207dc0c351
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 21:43:59 2008 +0400

    pretty: fix printing of long strings e.g. pi.evalf(100)   (#941)

    When pretty needs to print long stringPicts, we see at what terminal width is,
    and wraps the picture. Also currently we add vertical spacer between blocks.

    For mathematical formulas with height > 1 this is certainly the right thing to
    do, e.g.:

           2  2        3        3    4    4
        6*x *y  + 4*x*y  + 4*y*x  + x  + y

    is wrapped into this:

           2  2        3
        6*x *y  + 4*x*y  +
                            <-- note vertical spacer
             3    4    4
        4*y*x  + x  + y


    But if we'll look at pi.evalf(100), or long dict or another string which is
    originally 1-character in height, it seems putting such v-spacers is not
    convenient:


    In [2]: pi.evalf(48)    |  In [2]: pi.evalf(48)
    Out[2]:                 |  Out[2]:
    3.14159265358979323     |  3.14159265358979323
    8462643383279502884     |
    19716939937             |  8462643383279502884
                            |
                            |  19716939937


    That's why I propose we stop adding this v-spacers if original picture is
    1-character in height.



    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 30dfb0651d93ff902e69ca0cb33bea503d2499c8
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 21:30:48 2008 +0400

    pretty: special symbol for muliply  (#957)

    Let's use 'DOT OPERATOR' symbol for multiply in unicode mode:

    Compare old and new look-n-feel:

    In [1]: exp(I*k*x)
    Out[1]:
     ⅈ*k*x
    ℯ

    In [2]: ((x+y+z)**2).expand()
    Out[2]:
                             2    2    2
    2*x*y + 2*x*z + 2*y*z + x  + y  + z

    --------

    In [1]: exp(I*k*x)
    Out[1]:
     ⅈ⋅k⋅x
    ℯ

    In [2]: ((x+y+z)**2).expand()
    Out[2]:
                             2    2    2
    2⋅x⋅y + 2⋅x⋅z + 2⋅y⋅z + x  + y  + z

commit 9d6c2e5197257a327b6cb5c0143c6e76b24c930f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 21:30:46 2008 +0400

    pretty_symbologu: xrel -> xsym -- it will be applicable not to only relations

    we'll need this to support symbology for '*' character

commit a95ce8b5d2887cc45b5ac71a17095845993f4489
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 11:48:24 2008 +0400

    test_roots: robustify tests for roots(x**3 + x**2 - x + 1)

    correctness verified with evalf()

commit 9e320b7cd3f88dd97fd5a033e0aaa350abecb070
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 11:48:23 2008 +0400

    test_roots: use sympify and string representation for looong expressions

    This way it is a bit more understandable...

commit d142c48817f13bafa84658da4dc6f562f366f81a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 01:04:07 2008 +0400

    tests for .as_coeff_factors()

    one test fails (I think it's related to #946), but some tests are better than
    no tests at all.

commit eceeea59e4ced49d845cecf3c19932c79cc76b97
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 01:04:06 2008 +0400

    nseries: robustify test_bug4

    correctness verified with `cancel`:

    In [1]: cancel(1/x/(1 + 2/x + x**(-2)))
    Out[1]:
         x
    ────────────
               2
    1 + 2*x + x

    In [2]: cancel(1/(1+x/2+1/x/2)/2)
    Out[2]:
         x
    ────────────
               2
    1 + 2*x + x

commit 696acc01214dd31e639174d23ae1e9a0530c1400
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 25 01:04:05 2008 +0400

    robustify tests for postorder_traversal and preorder_traversal

commit 159919c686f70a899beb25fd3e0bb4a79ab03723
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 24 18:42:39 2008 +0200

    Fixes the (0*x**0).as_coeff_exponent(x) problem. Test written.

commit 0dab944c04b0eebf1a971b71d54a2af4902bd313
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 24 18:39:49 2008 +0200

    Tests written for the Basic.as_coeff_exponent() function.

    One test is commented out, because as_coeff_exponent is wrong. This will be
    fixed in the next patch.

commit 8497904dfa94ba760d9df69c556e49577621f86f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:59:37 2008 +0200

    Start of the 0.6.2 development cycle

commit 38ef6555243c03a8c2fb6f42ca2b33f128cee02d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:50:30 2008 +0200

    Added tag sympy-0.6.1 for changeset 67014f91fe6d

commit 91e8deb79f7ac47d091fa7bd96a04de1b687c5cb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:50:21 2008 +0200

    v0.6.1

commit 9cc502626c88659173894dd12a1b0d6a54d83638
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:45:22 2008 +0200

    Case added to README and credits.

commit 749708d8d43f8b6aad2d00c8bd80f1aca0e9c483
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:40:11 2008 +0200

    Docs: blogs section updated.

commit 718634b7c11b246543dbe7c613d49e5c2692937b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:32:51 2008 +0200

    docs version updated to 0.6.1

commit 62d5938b60f04be11e29e8103e3ffca920d1b85e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:31:32 2008 +0200

    Credits updated

commit 6abecf971d42e2fb060b19ef6fe1bebd75ffec6d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 21:18:09 2008 +0200

    Fixes the pngview(x**2) problem.

    We need to import pyglet using import_thirdparty("pyglet") now, so this was
    fixed now.

commit 4a47cc775ed162425466aa99d3d0638d423ca79a
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Jul 22 20:07:10 2008 +0200

    Matrix(Matrix) doesn't call __array__ anymore. Fix Issue 947

commit 28dc7ab9de19e1707bb9475275e3f70569bff20c
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Tue Jul 22 19:35:14 2008 +0200

    Fix two bugs that broke pollard_rho, and add two tests to ensure that it works in the future

commit a1e84eb36e0d46a96b8890f194a0d63b17c01a2c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 11:43:57 2008 +0200

    Make ((x+y+z)**50).expand() 3 times faster.

    Before:

    In [1]: %time f = ((x+y+z)**50).expand()
    CPU times: user 3.94 s, sys: 0.00 s, total: 3.94 s
    Wall time: 3.93 s

    After:

    In [1]: %time f = ((x+y+z)**50).expand()
    CPU times: user 1.35 s, sys: 0.00 s, total: 1.35 s
    Wall time: 1.35 s


    This is achieved by using multinomial_coefficients() in Pow.expand().

commit c3a457e2f6326c155ef678fc1643fd47773c4db4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 11:43:57 2008 +0200

    multinomial_coefficients() and binomial_coefficients() added.

    Those were taken directly from sympycore and were implemented by Pearu Peterson
    and Fredrik Johansson respectively.

    I only wrote tests for multinomial_coefficients as there were none in
    sympycore.

commit bcb5d238e234650c36d03c59e5bc5295c0d0ddfd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 01:44:51 2008 +0200

    Thorough tests for Sage <--> SymPy interaction added.

commit eb3131169afe11ef26afabb9d9cabb0d2b7c70a2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 22 01:24:21 2008 +0200

    _sage_() methods implemented in all common classes.

    The thorough tests for these methods is in the next patch.

commit 79caa0cceb9799a99c8c0db2906fd573c9d4b1a7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 19 18:21:33 2008 +0200

    Removes the sys.path hack from sympy/__init__ (#925).

    This is achieved by introducing import_thirdparty() function, that handles
    imports of all thirdparty packages (currently only pyglet).

    This is a step in the right direction, e.g now:

        >>> import sympy
        >>> import pyglet
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        ImportError: No module named pyglet

    As it should be. However, once you use plotting, the pyglet creeps back in:

        >>> import sympy
        >>> import pyglet
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        ImportError: No module named pyglet
        >>> import sympy.plotting.plot
        >>> import pyglet
        >>>

    So this needs to be improved further. One idea is to use imputil + friends to
    craft our own solution which does not populate sys.modules.

commit e01c4bdc717308d706550da8c34bc778dab55426
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Jul 22 00:02:36 2008 +0400

    rsolve_hyper: robustify tests to catch all combinations of C0/C1 & rf(terms)

    Seems to be right, but I'm not sure whether this is ok.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Cc: Mateusz Paprocki <mattpap@gmail.com>

commit 6914a0f3a1b29ffa48529743707910e4b2ec95f0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 21:28:07 2008 +0200

    Enabling a test in test_order.py that now works.

    This now works 100% due to removing caching from Order.

    Man, I am satisfied with today's progress.

commit 456260da7586c677ec54cf5e932d0091f1a959ca
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 21:28:07 2008 +0200

    Unifying univarate and multivarite code in Order.contains().

    This doesn't affect performance and makes the code simpler.

commit c862769b6d927ac65302d0fe9a3c4ffe3111d2bd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 21:28:07 2008 +0200

    Removing the rest of cache from Order + removing a test that tests the cache.

commit 014b12d3b89bb90780c653ae4ef6dbf5b64c74ff
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 21:27:52 2008 +0200

    Order._get_cache_index() removed. This sped up series test by 50%.

    Before: 34.90
    After: 22.45


    Kirr's comment in the review:

    wow :)
    then +1

commit d8fc0444db3e7e44cccfd63b4e3b472bfe8855f4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 21:27:14 2008 +0200

    Don't use cache in Order.

    Timings with "py.test sympy/series/":

    Before: 34.94
    After: 34.83

    Lesson learned: caching is evil.

    Kirr's comment in the review:

    I'd say "think 7 times before introducing a cache..."

commit 0bc103a1a64d6f8642a515b1c9c93373b4803172
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 21:23:54 2008 +0200

    str(O(x*y)) now works again. A test written.

commit d500a8610a72059bba81407ece2b40c75a2763e7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 21:23:54 2008 +0200

    test_order.py: the XFAILing test updated and made run.

commit 899920cb0ead4f47c62cca5704eed4d35b093344
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 18:48:39 2008 +0200

    order.py: obsolete comments removed.

commit 8018e291700770e780cddd498411cee8dde80bf4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 18:44:35 2008 +0200

    Print the traceback of the exception if limits fail.

    Before it just raised "there is an error", now it also prints the original
    traceback. This is very useful for debugging and for the user to figure out
    what's wrong if limits fail.

commit 01097895f48d78c2eff2430a4c167053a661391f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 18:44:35 2008 +0200

    Fixes Order._cache bug (#948).

    It took me 2 intensive hours to figure out what's wrong. Here is a script that
    makes it fail:

        from sympy import Symbol, log, sin, O

        x = Symbol("x", real=True)
        w = Symbol("w", real=True)
        e = w**(1-log(x)/(log(2) + log(x)))
        f = e.series(w, 0, 1)
        e = sin(2*w)/w
        f = e.series(w, 0, 2)
        print "OK:", 2 + O(w**2)
        print "f :", f

    On amd64 it prints (wrong):

        OK: 2 + O(w**2)
        f : O(w**2)

    On i386 it prints (right):

        OK: 2 + O(w**2)
        f : 2 + O(w**2)


    I will not describe the tedious way to figure out where the bug is, but here is
    what goes wrong: the Order class uses cache for storing expression, see the
    Order._get_cache_index()'s docstring. However, due to the poor and hackish
    implementation of this method, when the cache contains the expression:

    w**(1 - 1/(log(2) + log(x))*log(x))

    it starts to add the rest of the terms wrong. E.g. it is something like this
    [O(1/w), O(1), w**(1 - 1/(log(2) + log(x))*log(x)), O(w), O(w**2)], which is
    correct, but then it adds w**3 in an utterly wrong position:

    [O(1/w), O(1), O(w**3), w**(1 - 1/(log(2) + log(x))*log(x)), O(w), O(w**2)]

    And so the rest of the algorithm returns wrong results. What is worse -- once
    this cache is wrong, sympy just starts returning wrong results even in cases
    which were ok before.

    There are two ways to fix it. Improve the _get_cache_index() method, or rewrite
    the Order.contains() not to use cache. I chose the second method. It turns out
    that the fix is really easy and nice once you know what to do.

    Timings using "py.test sympy/series/"

    Before: 22.51
    After: 23.04

    The timings vary +- 0.5s, but the patch seems to slow things down by 0.5s in
    average. That is imho acceptable, considering that the code is now more clean
    and robust.

    Imho there should be no caching in Order, just maybe in limits, but even there
    I think the easy cases should be made fast by not calling gruntz, but wiring in
    the results. We are doing it this way already and I think we should just
    continue this path.

    So I continued and in the next patches I removed caching from Order completely
    and it not only made the code a lot simpler, but series tests are now 1.5x
    faster!!

    The lesson learned: doing caching in hackish way is evil. Don't do that.

commit 7d2221d7b413b3e041ff83ad58f1088e44d3ad43
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 18:44:31 2008 +0200

    Docstring written for Order._get_cache_index().

    This was really needed, as it was not clear what this function was doing.
    Please write docstrings for nontrivial code.

commit db6e74cc784dcea7f3bf94cd2dfbed089ca8532d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 12:56:04 2008 +0200

    Fixes a failing doctest on amd64+python2.5.

commit ffaf4f9764d24f3246d843532b818e75308f19b9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 16:15:50 2008 +0200

    bin/test_isolated: the instructions were improved.

commit 921b2e009792ae99cceac6f06d266e2f66225f7b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 15:50:44 2008 +0200

    bin/test_import: make 50 runs instead of 10.

    This makes the import time much more accurate.
    I think it could even be trusted now. :)

commit 100c3e08c2d90129a75a5f305c429e0056ef5b20
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 11:45:19 2008 +0200

    QA: make doctest pass on amd64, two tests also added as regular py.test tests.

commit 77354b2211e88c8d9135ef74d357bb9bab6c7495
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 11:24:39 2008 +0200

    Make a test in sympy/simplify/tests/test_rewrite.py more general.

    This tests all possible results, not just one. This is due to a different
    representation due to different hash in amd64 vs. i386 python.

commit 9841b315b790f5b20da416664a25a884b956b11d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 11:20:18 2008 +0200

    Make a test in polys/tests/test_polynomial.py more general.

    This is a workaround for a bug somewhere else, nevertheless the test is
    correct. See the issue #946.

commit f00e8f81416f01ee1ae4a95b8c17f365a3f6ad81
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 21 11:11:45 2008 +0200

    Don't doctest sympy/printing/tree.py.

commit 401e816df420bde9d39890778c7978f6e1afa32f
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Mon Jul 21 10:57:09 2008 +0200

    Fix Circle.intersection(Circle), Issue #885.

commit 424dc99fa08d69f22f82e4923fc501880ef31035
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 20 23:03:50 2008 +0200

    Removing a leftover in the previous patch.

commit eb7f2a1c769f64c64649eca56036255627f6a180
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 20 22:55:56 2008 +0200

    print_tree(x**2) implemented.

    This allows a nice pretty printing of any SymPy expression for debugging
    purposes:

    In [1]: print_tree(x**2/3+y+x)
    Add: x + y + (1/3)*x**2
    noncommutative: False
    commutative: True
    +-Symbol: y
    | comparable: False
    | noncommutative: False
    | commutative: True
    +-Mul: (1/3)*x**2
    | noncommutative: False
    | commutative: True
    | +-Rational: 1/3
    | | real: True
    | | noncomplex: False
    | | comparable: True
    | | commutative: True
    | | infinitesimal: False
    | | nonzero: True
    | | unbounded: False
    | | noncommutative: False
    | | noninteger: True
    | | zero: False
    | | complex: True
    | | bounded: True
    | | rational: True
    | | integer: False
    | | imaginary: False
    | | finite: True
    | | irrational: False
    | +-Pow: x**2
    |   +-Symbol: x
    |   | comparable: False
    |   | noncommutative: False
    |   | commutative: True
    |   +-Integer: 2
    |     real: True
    |     noncomplex: False
    |     comparable: True
    |     commutative: True
    |     infinitesimal: False
    |     nonzero: True
    |     unbounded: False
    |     noncommutative: False
    |     noninteger: False
    |     zero: False
    |     complex: True
    |     bounded: True
    |     rational: True
    |     integer: True
    |     imaginary: False
    |     finite: True
    |     irrational: False
    +-Symbol: x
      comparable: False
      noncommutative: False
      commutative: True

commit 93d2a4b27f1735b5efb2685090b1b25ecf13810d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 21 00:31:29 2008 +0400

    Add: fix ._eval_is_irrational   (self[:] v.s. self.args issue)

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 669095e56ff6f8390cded526deb32e1e3cfdb1d9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:48 2008 +0200

    Fixed Cantor-Zassenhaus polynomial factorization algorithm

    There should be no more hangups when factoring smaller

    In [1]: %timeit f = factor(x**4+x+1)
    100 loops, best of 3: 19.3 ms per loop

    and a bit larger polynomials

    In [2]: factor(x**56-1)
    Out[2]:
             ⎛     2⎞ ⎛     4⎞         ⎛         2    3    4    5    6⎞ ⎛     2    4    6    8    10    12⎞ ⎛     4    8
    12
    -(1 + x)*⎝1 + x ⎠*⎝1 + x ⎠*(1 - x)*⎝1 + x + x  + x  + x  + x  + x ⎠*⎝1 - x  + x  - x  + x  - x   + x  ⎠*⎝1 - x  + x  -
    x   +

     16    20    24⎞ ⎛         2    3    4    5    6⎞
    x   - x   + x  ⎠*⎝1 - x + x  - x  + x  - x  + x ⎠

    The bugfix consists of:

     [1] Reimplemented equal_degree_{spilt,factor} (as edf)
     [2] Changed random prime selection in Zassenhaus to
         small primes iteration

    Besides the fix, also small refactoring was done:

     [1] IntPoly.primitive -> IntPoly.as_primitive
     [2] squarefree_part -> IntPoly.as_squarefree

commit 13017845a46f36544ed9fa092ae35c07ccecbb34
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:48 2008 +0200

    Improved printing of SparsePolynomial and IntPoly

commit 962c1aab32b0d865b4a76cefb97d5be45ce69ece
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:48 2008 +0200

    Moved crt, crt1, crt2 from polynomials.fast to ntheory.modular

    'crt' stands for Chinese Remainder Theorem and is
    used in modular polynomial factorization and gcd.

commit 32997e872ab6d1afd800f11c0baba35c9ad27614
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:48 2008 +0200

    Make poly_gcd results equivalent to igcd results, for zero arguments

commit 720f6eeaa3e266c66912db86663c0a714d927235
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:48 2008 +0200

    Moved polynomials.fast.modint.xgcd to core.numbers.igcdex

    This is first step to simplify factorization code. The same
    will happen to all other non-polynomial algorithms.

    Changes:

     [1] Moved xgcd to core.numbers
     [2] Renamed xgcd -> igcdex
     [3] g,x,y = igcdex(a, b)

         changed to

         x,y,g = igcdex(a, b)

         to match poly_gcdex and other systems.

     [4] Removed modint.gcd
     [5] Used numbers.igcd and igcdex in polynomials

commit 3645f3768c840bbbb8f91d7220084efb3ff9a7bc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:47 2008 +0200

    Fixed sympy.core.numbers.igcd, now returns valid results

commit 208dc29348df5f32fee39b879a5853d289cdbc35
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:47 2008 +0200

    Don't allow non-commutative symbols in Poly

    Currently sympy doesn't have support for non-commutative
    polynomials. This patch helps to avoid invalid usage of
    Poly class e.g. simplification of non-commutative
    expressions will raise SymbolsError.

    What remains to do is to catch this exception in
    simplify and retun the input untouched. This will
    partially fix #642.

commit afa0698c90654224b5113ce5ccf8db56b2e898bb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jul 20 22:38:47 2008 +0200

    Allow f.diff(), provided f is a univariate Poly

    This simplifies usage of Poly.diff in univariate
    case: f.diff() is equivalent to f.diff(x) where
    x is the main variable (f.symbols == (x,)).

commit f9ed1a9d10ef44ebeeedb9a806e7d8b84ffe8dcd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 21 00:29:40 2008 +0400

    Polys: robustify some tests which depend on underlying arch  (#938)


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 1d15fe37054b3c5f42bdffdeb4d563ab2ca39af7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 21 00:29:39 2008 +0400

    pretty: robustify dict tests  (#938)

    dict does not guarantee items ordering, so when pprinted, we could obtain
    reordered pictures depending on inderlying arch, hash implementation, etc...

    Let's just include all possible variants (which is just two in our case)


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 6febcfc40986d6fb0d1575bd0f8f8b5438c1833d
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sun Jul 20 16:48:17 2008 +0200

    Adding a numpy matrix and a sympy Matrix gives always a sympy matrix

commit 7ec7cef71cb2b1bb512b7ee734f5018afc248c44
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 20 13:36:40 2008 +0200

    Don't install sympy/specfun anymore.

commit 4d22120b9f2289de0adba080067579b04f0c8279
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sat Jul 19 16:41:09 2008 +0200

    Prevent infinite recursion in str() or repr() of expressions containing Wild

    Ondrej's comment:

    I made tests on this little script:

        from sympy.abc import x

        s = 0
        for i in range(400):
            s += x**i
        e =  str(s)

    And it doesn't seem to slow things down.

commit 26015a00ec22f7e21f386f6e6859b45ed84d4952
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Fri Jul 18 19:43:35 2008 +0200

    fix zeta(3) and add test for zeta evalf

commit 8fe2a0c10ae0a786d90b32ff502e22c9b8125274
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Fri Jul 18 18:59:20 2008 +0200

    make floor(exp(2)) work

commit 7b765cd06bd20838898ae542442f803e6ab02e1f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 18 18:48:39 2008 +0200

    A test committed for the issue #622.

commit 769b0489ca020facb7d942a63076d2b4bafc8253
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Fri Jul 18 18:09:47 2008 +0200

    Real and evalf changed to use per-number precision instead of global
    precision.

    evalf for functions improved to handle complex numbers and use
    lambdify.MPMATH_TRANSLATIONS to find appropriate mpmath functions. Helper
    functions _to_mpmath and _from_mpmath were added to the Basic class to aid
    conversions.

    E.g. this now works:

    >>> gamma(sqrt(2)+3*LambertW(pi-I)).evalf(30)
    11.4056294796153176988044840236 - 9.54336580973457316578620032101*I

commit fd54ab2644491490af2fa5e04bd902195a9bb6c7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 18 15:54:46 2008 +0200

    Removing sympy/specfun, that contained duplicate code for factorials.

    So now SymPy has just one implementation of Factorials, in:

    sympy/functions/combinatorial/factorials.py

commit ee13d698433d76f8bec085c29e35236e031cedad
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 18 17:38:06 2008 +0400

    BasicMeta: don't import typeinfo (e.g. is_Integer) into class default_assumptions

    Because this was slowing down things significantly:


            %timeit x+y     fem_test.py     fem_test.py     py.test sympy/core/
            (cache: off)    (cache: off)    (cache: on)     (cache: on)

    old:    436 µs          16.57 s         4.79 s          9.59 s
    new:    297 µs          13.18 s         4.35 s          8.75 s

    speedup: 47%             26%             10%             10%


    In fact when we introduced is_XXX typeinfo (#748, f83106bc39a5) I've noticed
    ~10% performance regression:

        http://code.google.com/p/sympy/issues/detail?id=748#c15
        http://code.google.com/p/sympy/issues/detail?id=748#c18

    but noone, including is_XXX original author, cared to study what the problem is.


    I think it is bad practice to allow performance regressions without clear
    understanding why such a change is needed and what benefits it brings.

    When there is a regression we should try harder to understand what is going
    wrong and what the problem is, and then the overal quality will improve.

    In this particular case I was just enough lucky to detect this slowdown by an acident.


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 0b69a10d0d96fafa5423bea7c863ae279f167981
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jul 18 17:38:05 2008 +0400

    Basic.__new__ : set ._assumptions to None early

    This way _assumptions will be always present in an instance and we get less
    internal AttributeErrors on startup.

    Timings (SYMPY_USE_CACHE=no)
    ----------------------------

            %timeit x+y    fem_test.py

    old:    462 µs         17.06 s
    new:    439 µs         16.57 s

    speedup: ~ 5%           ~ 3%


    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8ed0bde050b1e50ab72bd751fa0590fbd2239a5b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 18 10:54:14 2008 +0200

    Added missing import to sympy.solvers.polysys

commit 6b4de21325eef1614a188d5a4b01ae852bdf2cf6
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 18 00:57:22 2008 +0200

    Fixed tests in sympy.printing.pretty, #938

    Changed pretty -> upretty.

commit b6fb9842cf1f4ad9a7fcceadaaa3f43f7fef2484
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 18 00:54:53 2008 +0200

    Fixed RootsOf.tostr(), #938

    In Python 2.4 there is no str.partition method.

commit e912de764eb73fe3676cb64049930b190924975d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:29:34 2008 +0200

    Duplicated test in dsolve()

    This is connected with #935.

commit d0b67a6c626c57b99589394d42cec093e80a4000
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:29:34 2008 +0200

    Decorated integrate() with @threaded, fixed #610

commit e6678503dd5fe8260aebb36b4b545673580efc84
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:29:34 2008 +0200

    Decorated cancel() with @threaded

commit 93975eeac90685b371b9c83e349cef0927e4e45f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:29:34 2008 +0200

    Refactored apart(), use Lambda in RootSum

    apart() uses Lambda so if the resulting decomposition
    has unsimplified RootSum, then it can be pretty printed,
    especially if new 'evaluate' flag is set.

    Added new tests. Improved docstring.

    Added @threaded decorator, so works with Matrices etc.

    Example:

    In [1]: M = Matrix(2, 2, lambda i, j: 1/(x-(i+1))/(x-(1-j)))

    In [2]: M
    Out[2]:
    ⎡                               ⎤
    ⎢          1               -1   ⎥
    ⎢       ────────       ─────────⎥
    ⎢              2       x*(1 - x)⎥
    ⎢       (1 - x)                 ⎥
    ⎢                               ⎥
    ⎢       1                  -1   ⎥
    ⎢───────────────       ─────────⎥
    ⎣(1 - x)*(2 - x)       x*(2 - x)⎦

    In [3]: apart(M, x)
    Out[3]:
    ⎡                                   ⎤
    ⎢            1             1     1  ⎥
    ⎢        ─────────       - ─ - ─────⎥
    ⎢                2         x   1 - x⎥
    ⎢        (-1 + x)                   ⎥
    ⎢                                   ⎥
    ⎢      1       1      1        1    ⎥
    ⎢    ───── - ───── - ─── - ─────────⎥
    ⎣    1 - x   2 - x   2*x   2*(2 - x)⎦

commit 4be6c66f40f93917ced691424f06ccb266d8c04d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:29:34 2008 +0200

    Added trivial support for x-1 and x+1 factors to roots(), #894

    This patch helps to solve this:

    In [3]: A = Matrix([[1, x, 0], [x, y, x], [0, x, 1]])

    In [4]: q = A.charpoly(z)

    In [5]: q
    Out[5]: Poly(z**3 + (-2 - y)*z**2 + (1 + 2*y - 2*x**2)*z - y + 2*x**2, z)

    In [6]: roots(q)
    Out[6]:
    ⎧                   ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽                  ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽   ⎫
    ⎪                  ╱            2      2                  ╱            2      2    ⎪
    ⎨            y   ╲╱  1 - 2*y + y  + 8*x             y   ╲╱  1 - 2*y + y  + 8*x     ⎬
    ⎪1: 1, 1/2 + ─ + ────────────────────────: 1, 1/2 + ─ - ────────────────────────: 1⎪
    ⎩            2              2                       2              2               ⎭

    In [7]:

commit 0bc9616aea9f3017677cbda5a34a82ca3413c442
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:29:34 2008 +0200

    Use Symbol.name rather than str(Symbol) in Lambda.canonize

    This prevents Lambda to create new dummy symbols with multiple
    leading underscores, which was redundand as Symbol('x', dummy=
    True) != Symbol('x', dummy=True). This makes Lambda more useful
    in cases where internally algorithm uses dummy symbols together
    with Lambda, making it representation more readable.

commit a94307ff5640beec3f50a6c220d8b3da5824e544
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:29:34 2008 +0200

    Added new decorator @threaded, #610

    This will simplify code in sympy.simplify etc. and
    also it will solve issues like #610. See docstring
    for details.

commit 2aa7dd0661165d0fbdcbf5167a777f92f75f4ec3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 22:24:46 2008 +0200

    Added 'evaluate' flag to RootSum

    By default RootSum computes all possible roots and returns
    a sum of its function evaluations at those point together
    with simplified RootSum. However it might be usefull e.g.
    in apart() to completely avoid such simplifications to
    get a formal decomposition (in this case).

commit 380cd1d135b991713e091183849b95203be49ff1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 21:45:39 2008 +0200

    Fixed poly_gcd and Poly.content

    Now poly_gcd and Poly.content work properly when any of
    their arguments is zero. In this case they return one.

commit 5d4be8f9f5d423cadf2f81265c8d61a02d37dc0d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 21:45:38 2008 +0200

    Don't use radsimp() in simplify(), #458

    This helps to solve this:

    In [1]: var('a b c d e f g h i')
    Out[1]: (a, b, c, d, e, f, g, h, i)

    In [2]: f_1 = x*a + y*b + z*c - 1

    In [3]: f_2 = x*d + y*e + z*f - 1

    In [4]: f_3 = x*g + y*h + z*i - 1

    In [5]: s = solve([f_1,f_2,f_3], x,y,z)

    In [6]: s[x]
    Out[6]:
          b*f + c*h + e*i - b*i - c*e - f*h
    ─────────────────────────────────────────────
    a*e*i + b*f*g + c*d*h - a*f*h - b*d*i - c*e*g

    In [7]: s[y]
    Out[7]:
          a*f + c*g + d*i - a*i - c*d - f*g
    ─────────────────────────────────────────────
    a*f*h + b*d*i + c*e*g - a*e*i - b*f*g - c*d*h

    In [8]: s[z]
    Out[8]:
          a*e + b*g + d*h - a*h - b*d - e*g
    ─────────────────────────────────────────────
    a*e*i + b*f*g + c*d*h - a*f*h - b*d*i - c*e*g

commit 2657b3f7abc7144faa150f251f5a1c898053182f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 21:45:37 2008 +0200

    Implemented tostr() method in RootOf, RootsOf and RootSum

commit 16beee5e470adf783e034875860d5de16edee63d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 21:45:36 2008 +0200

    Do not print term order for univariate Poly's

commit dcc35acf8cbf763804fdd6815f74931f2b4b3159
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 17 21:45:35 2008 +0200

    All 'raise SomeError, x' converted to 'raise SomeError(x)'

    This change was required to make sympy, at least partially,
    compatible with Python 3.0. Other modifications will follow.

commit a5d6f37e8cb2eca25fdadb5e82d3227620b775ba
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Tue Jul 15 15:28:34 2008 +0200

    Implemented evalonarray, which evaluates a function on a numpy or ctypes array.

    Using machine code, that's the point. It's possible to pass an array as a
    pointer, but this is not fully implemented.  A test for pointers needs to be
    written, and it works only for ctypes.c_void_p.

commit 131101537ea7447baddad8b09200aa188cd259c4
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 11:32:31 2008 +0200

    Fixed propagation of term order in Poly chain

    Now Poly(Poly(x*y, x, y), order='lex') will have
    desired lexicographic term order.

    The solution is not perfect and Poly.__init__ must
    be refactored soon, to improve speed and to make
    it more modular.

commit efca453ba9575e41d1981c83d91e64204f242c3a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 11:32:28 2008 +0200

    Implemented solve_poly_system() in sympy.solvers.polysys

    This is improved version of old solve_system() from polynomials
    module. The new solver is much faster and can handle more types
    of polynomials.

commit bd14ab8b1214965b0f9957899270e2d6bd4ef078
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Improve simplification of radicals in Poly.cancel

    This patch is a quick hack which improves simplification of trivial
    radicals in Poly.cancel and it makes possible of computing e.g:

    In [1]: solve_poly_system([x**2+y+z-1, x+y**2+z-1, x+y+z**2-1], x, y, z)
    Out[1]:
    ⎡⎛       ⎽⎽⎽         ⎽⎽⎽         ⎽⎽⎽⎞                        ⎛       ⎽⎽⎽         ⎽⎽⎽         ⎽⎽⎽⎞           ⎤
    ⎣⎝-1 - ╲╱ 2 , -1 - ╲╱ 2 , -1 - ╲╱ 2 ⎠, (0, 0, 1), (0, 1, 0), ⎝-1 + ╲╱ 2 , -1 + ╲╱ 2 , -1 + ╲╱ 2 ⎠, (1, 0, 0)⎦

    However this does not solve a real problem, which will require quite
    some effort to fix. When doing polynomial computations we should do
    out best to keep coefficients as small as possible. Even in case of
    integer polynomials this is not a trivial task and modular approach
    is used in this case. If we have more complicated coefficients, e.g.
    algebraic numbers, rational functions (possibly multivariate), then
    it requires even more effort to keep them small.

    We could just apply all available transformations (simplifications)
    but then we would degenerate speed and even a simple division would
    be a nightmare process.

    So to solve this in general we should leave the idea that coefficients
    can be whatever. Each polynomial must have explicitely and precisely
    declared type of its coefficients, e.g:

     [1] integers
     [2] rationals
     [3] algebraic numbers
     [4] polynomials (UV, MV)
     [5] rational functions (UV, MV)
     [6] general expressions
      .
      .
      .
     [oo] whatever user likes

    Then each polynomial over a different coefficient domain would be a
    different type, with a set of special functions implemented. One of
    them is SomePoly.reductum (curretly Poly.cancel). Example of other
    function of this kind is divide_if_can(), which would check its
    arguments and return a result of exact quotient or None (if fact
    this should be implemented in the core, but for now it is sufficient
    to have it in polynomials.

    If user would like to have its own type of polynomial then he will
    create a new poynomial type and implement new reduction method.

    This way we will have full control on what happens with coefficients
    when being processed (mostly when division occurs, but this may be
    hidden in other arthmetic operations (consider rational functions)),
    and we will have speed, because no time will be lost on useless
    simplifications.

    This will also close issues like #326 once and for all.

commit 727cb0a76cc6ead9fdc2860d245e5f504abb29d0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Added an interesting test for roots()

    The test shows that in many situations it is
    sufficient to use functional decomposition /
    square free factorization chain, rather than
    'full' factorization, to obtain complete
    result (all roots).

commit 93f0e36e8011f280360b92577b9bef7359374442
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Implemented LexPoly, a wrapper for a Poly with lex order of terms

commit 552e7364dada358256b6ac6e8e22fff37ffd9058
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Fixed bug in Poly.evaluate

    Now evaluate() will return non Poly result when the number
    of evaluation symbols is equal to the number of symbols in
    the input polynomial, even if the result is a constant
    polynomial (e.g. Poly(0, x)).

    Also an invalid (0, (x, y, z)) term won't appear in the
    output. This bugfix is a result of work on poly solver.

commit ea14428453507023758ff9de20fa8380c560bdda
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Implemented Poly.to{repr,str} methods

commit f9bb32bd5979b094ae2d6513c89de7e652a9ac83
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Return lists as results (where needed) in polys module

    This patch is a continuation of

     http://hg.sympy.org/sympy/rev/c7d8a51ee364

    As said before, tuples and lists should be used were
    appropriate, and in the old implementation this did
    not hold for tuples, which were abused.

    Now polys module is, in this case, coherent with
    other sympy's modules.

commit 86492893978681d47b72ce10856963d988ec5651
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Made exceptions in polys module more meaningful

    Added new exceptions:

     [1] UnivariatePolyError
     [2] MultivariatePolyError

    Added explanation strings to most of 'raise SomeError'.

commit 4f58f54cafd62be7e45429a1f155d3d61aef2d44
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Simplified polys code, removed is_Atom checks

    is_Atom checks are now done in Poly.cancel so
    additional checks are useless (in fact were
    degenerating speed).

commit e8b0c50926f6f901ca85e275acb1359368ee4454
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Improved docstring in Poly.as_uv_dict()

commit 33579315007dd57d4322e3390d796137f795063c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Implemented number_of_real_roots() function

    This is an improved version of old count_real_roots(). New
    version uses keyword arguments to indicate the interesting
    interval, e.g:

     In [2]: number_of_real_roots(x**2-3, x, inf=-sqrt(2), sup=oo)
     Out[2]: 1

commit 43cd30b501fa8b933cd807de1329617963235d45
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Implemented roots_rational()

commit 8465c6f255bdc4b95c307c4149003318a57c3fd9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Renamed sympy.core.numbers.gcd to igcd

    Now we have two pairs of functions:

     [1] igcd(), ilcm() --- integer arguments
     [2]  gcd(),  lcm() --- polynomial arguments

    Also igcd(), and ilcm() are now imported by default.

    This change makes easier to distinguish between
    the two classes of functions (no name clash).

commit 5c11a47de4c11d929f596faeddfab61a69ee66d7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 15 10:35:21 2008 +0200

    Implemented Poly.as_integer(), added CoefficientError

    The new method will be needed in factortools.py and
    in roots_rational(). The new exception is important
    to distinguish between classes of failures (more
    will be added soon).

commit d4038dc0a78928db23a5e587787d53271e732dc0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 13 23:36:27 2008 +0200

    Added Ali to README

commit 2bc8d1de11d12ea841c5c1410ea47e03f231f829
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 13 23:33:37 2008 +0200

    Deleted one endline whitespace.

    I missed that in the last patch, sorry.

commit 47a070a868faea620f0d033b7886abe352a08678
Author: Ali Raza Syed <arsyed@gmail.com>
Date:   Sun Jul 13 23:28:55 2008 +0200

    Fixes pretty printing/isympy on windows (#933).

    It turns out that the windows curses in my python distribution (ActiveState)
    doesn't implement setupterm or tigetnum.  So, the terminal_string method in
    stringpict.py fails when trying to get the terminal width.  I used a recipe
    from the ASPN cookbook to fix this:

    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/440694

    The following example works now:

    In [1]: (1/cos(x)).series(x, 0, 10)
    Out[1]:
         2      4       6        8
        x    5*x    61*x    277*x
    1 + -- + ---- + ----- + ------ + O(x**10)
        2     24     720     8064

commit 180fcc757ecae65dd246d8a4806608bab06b5056
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 13:03:00 2008 +0200

    Fixed parser, now sympify('core') gives a Symbol, #773

    Now we have the following behavior:

    In [1]: sympify('core')
    Out[1]: core

    In [2]: type(_)
    Out[2]: <class 'sympy.core.symbol.Symbol'>

    In [3]: sympify('sin')
    Out[3]: <class 'sympy.functions.elementary.trigonometric.sin'>

    In [4]: type(_)
    Out[4]: <class 'sympy.core.function.FunctionClass'>

    In [5]: sympify('True|False')
    Out[5]: True

    In [6]: type(_)
    Out[6]: <type 'bool'>

commit 4fd0e341dc17ccab39f172048abb6fee61e46801
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Removed Basic.as_polynomial(), use Basic.as_poly() instead

commit 83c88c894e2d034220eaa36001592d760aad5cd3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Added more tests for sympy.integrals.risch, #594

commit 09846fed4832486c24c849fba800de3017009b90
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Use polys module in sympy.concrete instead of polynomials

commit f543f3c57f87e7d7521aba45a2eee94599f190b3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Use polys module in sympy.solvers.recurr instead of polynomials

commit 406c800d3def68534f6b214ded28c617de871174
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Added 'predicate' flag to roots()

    Now one can filter roots just by providing a boolean function. If
    it returns True, then a root is accepted, otherwise it is removed
    form list.

    Example:

     In [1]: roots((x-1)*(x+1), x, predicate=lambda r: r.is_positive)
     Out[1]: {1: 1}

    If both 'domain' and 'prediate' flags are set, then 'domain' will
    be used first and 'predicate' will work its results.

commit 9f1250aa261f42b8e613bb1514392302c7009917
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Use lists as results rather than tuples in rootfinding.py

    Using tuples as results in functions like roots() (with multiple
    flag set), factors or sturm, was generally a bad idea (this was
    not a good place to use tuples and for consistency with other
    modules, e.g. solvers, this had to be changed). The same will
    be done with functions in algorithms.py

commit f841e4394f9137802a472a02ef623dd920cd53e2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Use polys module in sympy.simplify instead of polynomials

commit bbc9c323d5ff10491a54a0ff9a59bef3644e6f26
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Use polys module in integrals.risch instead of polynomials

commit dea797e420f77c08498238174cf39ae183cfc7d2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    Improved poly_*()s' wrappers (added docs) and moved out from __init__.py

commit b08aa2c9f32bdb5214be290c8b456c8a04401601
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:02 2008 +0200

    New syntax in Poly.cancel, allow (numer, denom) tuples

    In situations where we have already the numerator and denominator
    separated, there is no more need to combine those expressions in
    to a single fraction (improved speed).

    Previously:

     Poly.cancel(numer/denom, x, y)

    Currently:

     Poly.cancel((numer, denom), x, y)

    Note that numer and denom can be Polys. In this case there is no need to
    specify symbols. Otherwise symbols MUST be given explicitely, as atoms()
    is not used.

    Semantics of Poly.cancel(f, x, y) remains the same.

commit f963a37b538964a8bf187f120be61b9eeb1cf172
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jul 11 12:53:01 2008 +0200

    Raise SymbolsError in Poly.__init__ and allow Poly(Poly(x, x))

    To distinguish between types of erros in polys module, new error is
    introduced: SymbolsError. This is needed to clarify the interface.

    To make Poly usage simpler (e.g. this will be used in Poly.cancel)
    one don't have to specify symbols if the main argument is itself
    a Poly. In this case it is a quick return (for speed).

commit f2ca83b0f044ca795e4bb68494a44fb5ff29634c
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Thu Jul 10 18:15:36 2008 +0200

    msolve accepts lists of equations + tests fixed

commit 6ab0c3d055659dcd40d71d3ebcee1d2549214409
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Thu Jul 10 17:40:11 2008 +0200

    fixed msolve for irrational functions and added a test

commit d329909f097e7bdfb5a98f0f3d44c49d429b6b51
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 10 17:01:38 2008 +0200

    Fixes the doctests for the Matrix.tolist() method.

commit 9e70951a8f593d12d0aaef24ad5e7d794dfb7bb8
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Thu Jul 10 14:20:44 2008 +0200

    Matrix <-> NumPy compatibility improved: summation and multiplication now works.

    - added Matrix.tolist() for numpy compatibility
    - modified Matrix.add() to work with numpy
    - modified Matrix.__rmul__, Matrix.__mul__(), Matrix.multiply() and added matrix_multiply to work with numpy
    - added tests

    Performance is the same.

    Now we can sum and multiply numpy matrix and sympy Matrix.

commit f2a53521e19918549df8bad769d635429a842304
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 10 12:00:08 2008 +0200

    Fixed printing of singleton tuples in pretty(), #929

    Now pretty() handles correctly singleton tuples:

    In [1]: (x,)
    Out[1]: (x,)

    In [2]: (1/x,)
    Out[2]:
    ⎛1 ⎞
    ⎜─,⎟
    ⎝x ⎠

commit 4dd1a4ed73da1ca300924e0e491a49c52bfc471d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Jul 10 11:43:22 2008 +0200

    Fixed pretty(str) and pretty(unicode), #929

    Now this works with pretty():

     In [1]: "text"
     Out[1]: 'text'

     In [2]: 'text'
     Out[2]: 'text'

     In [3]: "te'x't"
     Out[3]: "te'x't"

commit 18c387928879ed6d4d78417c608be481cb792d72
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 22:48:16 2008 +0200

    Refactored Basic.atoms(), use new syntax

    atoms() method was refactored to take advantage of
    iter_basic_args(). As a side effect Poly.atoms()
    was removed and test were merged in test_basic.py.

    New atoms() use different syntax:

      [1] atoms(type_0, type_1, ..., type_n)

      [2] atoms(instance)

    The new version [1] is much simpler to use than old type=(t_0, ..., t_n).
    Option [2] previously was also implemented but hidden by caching facility.

    Note that atoms() does not use caching and it does not slow down sympy.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 64e66571fce568fac86ac65e4471bcf10e19176b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 22:48:03 2008 +0200

    Implemented Basic.iter_basic_args()

    This method iterates over arguments of a SymPy's object, which are instances
    of Basic. Tool of this kind is very important, supporting Basic.args, in cases
    where a class stores non-basic elements in self._args, like Poly or Integral
    do. This helps automate process of adding new methods to Basic which iterate
    over Basic.args, but expect each args[i] to be Basic (e.g. Basic.atoms() or
    Basic.has_{any,all}_symbols will benefit of iter_basic_args(), see #779).

    As a side effect:

     [1] added iter_basic_args() to

       [1.1] Poly class

     [2] use iter_basic_args() in

       [2.1] atoms
       [2.2] has_any_symbols
       [2.3] has_all_symbols

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 7a0e159cfff4dcf8507ede6df402fcfe92e6c6e0
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Wed Jul 9 17:20:35 2008 +0200

    Add 'simplified' option to Matrix.rref() and fix eigenvalues() for some matrices

commit 2acec4eb7b235d23e9c129352cad744290e2cebb
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Wed Jul 9 15:40:28 2008 +0200

    Add numpy option to msolve

commit f3c97539127c4f7f8152738fa349ee8c3fc880ad
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 14:32:25 2008 +0200

    Removed as_indep_terms from core

    Use Basic.as_independent() instead.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit afe8edd3a1e65d4f0fe95f3839930eff3a4ac5ff
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 14:32:25 2008 +0200

    Removed as_expr_orders from core

    Reasons for removing Basic.as_expr_orders were:

     [1] No documentation
     [2] No tests
     [3] No use cases
     [4] Invalid implementation:

    In [4]: e = exp(x) + O(x)

    In [5]: e.as_expr_orders()
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)

    /home/matt/hg/sympy/<ipython console> in <module>()

    /home/matt/hg/sympy/sympy/core/basic.pyc in as_expr_orders(self)
      1400         l2 = []
      1401         if self.is_Add:
    -> 1402             for f in self:
      1403                 if isinstance(f, C.Order):
      1404                     l2.append(f)

    TypeError: 'Add' object is not iterable

    NOTE: There is Basic.removeO which can be used
          to remove Order() from an expression.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d821e6dd45733ae01efd32cba7bb1d2cb6c6cb2d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 14:32:25 2008 +0200

    Removed _seq_eval_evalf from core


    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 5ea2c21830831dec2c483da1ac091d689cc0218a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 14:32:25 2008 +0200

    Removed ldegree() from core

    The reason for removing ldegree() was that it was never used
    and duplicated leadterm() functionality. All tests concerning
    ldegree() were moved to test_leadterm() in test_basic.py.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8e7d21da75f2848ee09db8476365b4ab0884961e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 14:32:24 2008 +0200

    Removed _calc_*() and splitter() from core


    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit faa76e8994d359ed853cb92845fbca781b932608
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jul 9 14:32:24 2008 +0200

    Removed _eval_integral() and _eval_defined_integral() from core

    Both _eval_integral() and _eval_defined_integral() were never used
    and duplicated functionality available in sympy.integrals module.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit b39828a4430903088314d6bff57bdf64d321df79
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jul 9 14:31:24 2008 +0200

    Don't execute doctests in compilef.py

commit 0d8f99a2e6da152a9e31f0a9799102ffdb6c2241
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Wed Jul 9 12:45:06 2008 +0200

    implemented compiling of functions to machine code, this includes some C code the generation
    It's experimental and thus not accessible by default.
    The setup of libtcc (on which it depends) is somewhat messy.

    a benchmark:

    big function:
    compile time (including sympy overhead): 0.065525 s
    for x = (0, 1, 2, ..., 999)/1000
    20 times in 3 runs
    compiled:      0.1726 0.1824 0.1716
    Python lambda: 0.4180 0.6545 0.6778
    Psyco lambda:  0.3070 0.2774 0.2931

    simple function:
    compile time (including sympy overhead): 0.029621 s
    for x = (0, 1, 2, ..., 999)/1000
    20 times in 3 runs
    compiled:      0.2223 0.2220 0.2157
    Python lambda: 0.1053 0.1035 0.0984
    Psyco lambda:  0.1286 0.0997 0.0616

    frange with f(x) =
    exp(sin(exp(-x**2)) + sqrt(pi)*cos(x**5/(x**3-x**2+pi*x)))
    for x=1, ..., 100000
    in 3 runs including full compile time
    frange:        0.1167 0.1215 0.1134
    numpy:         0.2751 0.3945 0.5012

    So sympy is now officially faster than numpy ;)

commit af862bf7ddac7eb469ff068bff5c6d3b4d25d124
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Wed Jul 9 12:12:40 2008 +0200

    implemented solving of nonlinear equation systems using Newton's method (access it via msolve)

commit 3f98bc082bb60bcb97a8186dfb57346b0b4777b8
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Wed Jul 9 12:14:09 2008 +0200

    fix the Matrix.is_symbolic() method

commit a716a54c01a186dd777514a00c45a69aa946a20a
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Wed Jul 9 10:51:42 2008 +0200

    doctring updated: rsolve and dsolve are actually implemented

commit a1bed61290f6e41fec40aedf41d793beb9d4022e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jul 8 19:12:43 2008 +0200

    Stepan added to README.

commit aebfb453856de1ec6d9c28057c5478ee84b5ad03
Author: Stepan Roucka <stepan@roucka.eu>
Date:   Tue Jul 8 18:13:27 2008 +0200

    abs(x)**n == x**n for real x and even n

commit 42fa33aa2835b422a2ddbe04c5c106cabb3ee26f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jul 8 12:51:14 2008 +0200

    Added more tests for fix to issue #920


    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 589b21dd9a6832d6417eae6ceaf93f953353bf8d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 22:06:22 2008 +0200

    Start of the 0.6.1 development cycle

commit d394514af45d31ed850a3308f5617a9ebfe0703e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 21:38:41 2008 +0200

    Added tag sympy-0.6.0 for changeset f3c2306fe27f

commit 5fd088851e7e0903c0b1102dc2aae81cb10a0e37
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 21:38:31 2008 +0200

    v0.6.0

commit 696ef36f0756bb255e37139031f4feba2a6e61f3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Jul 7 21:28:43 2008 +0200

    Added support for third degree polys with rational coeffs in roots(). (#920)

    This helps to solve problems like:

     In [1]: solve(Eq(x**3 + 2*x**2 + 4*x + 8, 0), x)
     Out[1]: [-2*ⅈ, 2*ⅈ, -2]

    However the patch is a hack and should be refactored when more
    reliable and powerful factorization routine will be available.

    See the issue #920 for more background.

    Signed-off-by: Mateusz Paprocki <mattpap@gmail.com>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 117798df3c7b5d8cd5fff5ddf41060013d05e025
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 21:02:56 2008 +0200

    Credits updated.

commit 9671b11f25574d70942708a9540e1db3aabdf3c7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 20:47:32 2008 +0200

    Release number updated in docs.

commit 9b8b6ea87abc9c79a1d0edbdada1ddf480ffdc0c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 02:13:30 2008 +0200

    examples/trees.py fixed to work with the latest SymPy.

commit b6a219aad28fdd35b6aee0ae6c4a338659de1342
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 03:56:34 2008 +0200

    Don't import sympy.abc by default, this speeds up "import sympy".

    Before:

    The speed of "import sympy" is: 0.156891 +- 0.003025

    Now:

    The speed of "import sympy" is: 0.148673 +- 0.003950

commit 2a7cdc1b733fdb8adc6323f5ed42a32d4d640776
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 03:55:53 2008 +0200

    Two scripts for measuring the time of imports added.

    Usage:
    ------

    python bin/sympy_time.py
    python bin/sympy_time_cache.py

commit 2014fa7a3f72d0ce82518a04fe59028e2b30dbcf
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 02:32:23 2008 +0200

    test_subs.py simplified && modernized.

    This was one of the oldest files. Since then, we just use "from sympy import
    this, that" all over SymPy, so let's fix this file as well.

commit 1408462a0163058fed75227f3b53987f21303d7f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 02:27:48 2008 +0200

    Fixes the (I*Symbol("a")).subs(1, 2) bug (#910).

    The problem was in an incorrect handling of cases like .subs(1, 2), etc. This
    case was put in, together with tests and comments how it works.

commit 46d254c1e224b5fec630646ce98ae05d44e4ecfa
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 01:34:03 2008 +0200

    Fixes sin(-x-1) on a different python platform.

    On amd64 there is a different ordering of terms, so this patch is needed there.
    What's wrong without the patch -- those two tests fail:

       assert sin(-x-1) == -sin(x+1)
       assert cos(-x-1) == cos(x+1)

    and that is because on i386:

    In [1]: (-x-1).args
    Out[1]: (-1, -x)

    and amd64:

    In [1]: (-x-1).args
    Out[1]: (-x, -1)

    So when we look at the code in sympy/functions/elementary/trigonometric.py:

                       if arg.args[0].is_Mul:
                           if arg.args[0].args[0].is_negative:
                               # e.g. arg = -x - y
                               if (-arg).args[0].is_Mul:
                                   if (-arg).args[0].args[0].is_negative:
                                       # This is to prevent infinite recursion in
                                       # the case cos(-x+y), for which
                                       # -arg = -y + x. See also #838 for the
                                       # root of the problem here.
                                       return
                               # convert cos(-x-y) to cos(x+y)
                               return cls(-arg)
                       if arg.args[0].is_negative:
                           return cls(-arg)

    We can see, that arg.args[0] returns -x on i386, and so the "return cls(-arg)" statement gets executed, while on amd64 it return -1, so nothing gets executed without the patch. Adding the last two lines fixes that.

    A general fix would be to always order the arguments of Add/Mul in the same way
    independently of the platform, but that requires some deep refactoring and also
    I think it's not bad that SymPy is able to work with any ordering.

    Also a test for infinite recursion had to be added.

    Signed-off-by: Ondrej Certik <ondrej@certik.cz>
    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 525bb1272e641f09a35cdf473903dac78a282469
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 02:20:47 2008 +0200

    examples/fem.py adapted to the latest SymPy.

commit 9a3936388b873aaacf64a86daaac21d8ec9cf642
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 02:52:01 2008 +0200

    Documentation to cse() function added.

commit ac50808088c73c08938ec8d36c743639ce530f8f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 02:50:49 2008 +0200

    Make cse() docstring sphinx conforming.

commit 3299e924235242ba5d178a5dc2eeeeba26d54dcc
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jul 7 01:17:07 2008 +0200

    test_lambdarepr: make tests more general

commit 1ea0e35aaca500995e8e9fc231f300d6c858b43a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 23:03:13 2008 +0200

    test_polynomial(s):  make tests more general to accept all correct results.

    Again caused by a different ordering on amd64.

commit 6d59b9fb275d9b7794d20eeb2112a6c733fe7350
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 21:34:28 2008 +0200

    test_python:  make tests more general to accept all correct results.

    Kirr's review:

    While in other patches I think I roughly understand what the cause is,
    in this case I don't understand how different internal ordering should
    affect on do we have braces or not around -1/2 .


    So what I'm trying to say: maybe there is a bug somewhere else?

    Ondrej's answer: yes, there is definitely a bug somewhere else too. But from
    the user's perspective, both ways (-1/2) and -1/2 look good and this particular
    test doesn't test whether we can print -1/2, but rather that we can python print
    it, so the fix just makes the test more robust.

commit be746ae1de0538ea7527263b680d94a4587ae7e5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 21:33:28 2008 +0200

    test_recurr:  make tests more general to accept all correct results.

commit 39732b42ed92092c51d7a219cf739597b09f4cd7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 21:28:23 2008 +0200

    test_iterables:  make tests more general to accept all correct results.

commit 88bf42822f331032f8c01b8b870a69712792cea7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 20:45:46 2008 +0200

    test_factorials: make tests more general to accept all correct results.

commit 26e17b3172f06117f926be373c43f04857ebef13
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 18:26:00 2008 +0200

    test_subs: make tests more general to accept all correct results.

commit 3a9fe862ee06c9c6e30977f0a7c6834eb59508b6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 18:04:30 2008 +0200

    test_rewrite: a test was made more general to catch all correct results.

    This and the following patches are needed, because different architectures have
    different Python hash implementations and thus different internal ordering of
    terms in expressions. In this particular case it fixes things on amd64.

commit f58de26ae9f1cbc91070956067936e8e156140cd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 7 00:26:05 2008 +0400

    doc: spt -- strip whitespace

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 9ead3a96e9b2683af5e8f5ae03aa5c317aceb9c2
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 7 00:26:05 2008 +0400

    doc: spt -- kill duplicate leftover after a4ab1c5072c4 and 1e371247bb0b

    Ondrej, at sympy-patches I asked you whether it makes sense to move `Quick
    Start` section to appendix:

      http://groups.google.com/group/sympy-patches/browse_thread/thread/d5a132b22db0675c/9e5ef081fd2de438#9e5ef081fd2de438

    And it seems you agree with this idea:

      http://groups.google.com/group/sympy-patches/msg/769a69514a904897

    But instead of putting the text into one patch (which do one thing and do it
    well) you decided to do it in two steps:

      a4ab1c5072c4 and 1e371247bb0b

    But the problem is that second commit 'forgets' to move some text left after
    the first one.

    I think this is general -- when we prepare/review patches it is better to first
    get them into shape, and only then merge.

    Only if you are a big-subsystem maintanier, like say linux-scsi it makes sense
    to keep patches intact once merged, so others could base their work on yours,

    But in our case, where we have ~ 10 patches pending this is harmful, because
    we'd better prepare that patches in shape first to keep the quality, and for
    others to use your work, publishing repository with your MQ does work.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit d95717d563644af542fadd66f1ddd1d218618a21
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 7 00:26:05 2008 +0400

    doc: mention NotImplementedError in python-comparisons.txt

    We talk about returning NotImplemented as a way to say that some method, e.g.
    __lt__ is not implemented for some combination of types.

    However, there exists excepttion with similar from the first glance semantics
    -- NotImplementedError, and in some cases it could be tempting for users to
    raise it instead of returning NotImplemented, but the fact is that

            'return NotImplemented'  !=  'raise NotImplementedError'

    Python will just skip NotImplementedError with respect to choosing appropriate
    comparison method, and propagate this exception upwards to the caller.

    So I think we'd better warn users in the first place.

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit aebddb126b7ff455e13a6bb7c1f4e4636a5be338
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jul 7 00:26:05 2008 +0400

    doc: fix typos in python-comparisons.txt

    Signed-off-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>
    Signed-off-by: Ondrej Certik <ondrej@certik.cz>

commit 8f2653b03d80e6afd032af49d515dca880fa59d5
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Sun Jul 6 15:11:12 2008 +0200

    This patch implements a new printer class giving strings usable for lambdifying.

commit e0c88d31530fc850ff107198c00a8ecb341f29d2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 17:56:52 2008 +0200

    setup.py updated to install mpmath's tests.

commit 9f1672dbed5f330096aea464dfff6c3729a60ce2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 16:50:26 2008 +0200

    mpmath's test_ode.py and test_diff.py renamed as a workaround to a py.test bug.

    This is tested using the sympy/utilities/tests/test_tests_names.py test.

commit f0a65284e449bfb139a9703667ca8d759af310c0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 16:04:20 2008 +0200

    Import paths in mpmath tests converted, so that all tests work now.

commit 2b7b4f5aeccd1959ba2c0341247275ec22dbdd80
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 16:03:00 2008 +0200

    A script for automatic import paths modifications added.

commit e698568a8ef99d4df69b6523378867fc9b605495
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 15:57:27 2008 +0200

    Fix "import mpmath" to "import sympy.mpmath".

commit e9fd8b6b282843112d608e4a7d198fde99c9a3c5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 12:03:48 2008 +0200

    Whitespace in sympy/mpmath/tests fixed.

commit bfb44f1a2898c9255e02a2d8f0f0622c7eafad17
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 11:55:52 2008 +0200

    mpmath tests copied to sympy.

    Unfortunately, currently they only work when executed from the sympy/
    directory. The paths now need to be fixed.

commit 5ec3bfe7ef79c204e6ac83f02dd986a04d23ade4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 11:45:31 2008 +0200

    mpmath updated to svn r520.

    New features:

    * python2.4 compatibility
    * faster algorithm for Pi calculation
    * couple more functions

commit b3d2ee1211fd3271ad86856c209e47096f052bf3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 14:11:16 2008 +0200

    cse module renamed to cse_main and cse_main.cse() exported by default.

commit c35d1b7aea01ca5caf4214eed7f73573af5e1fcf
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 14:09:22 2008 +0200

    Make cse accept a single expression as well.

commit d3d69cb25e13abb699b0e74fe1a1d3a52843d4be
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jul 6 05:27:49 2008 -0500

    Test for the multi-expression CSE capability.

commit 8b52e899a5b82660a031f5b637503dc70d32842b
Author: Robert Kern <robert.kern@gmail.com>
Date:   Sun Jul 6 05:05:54 2008 -0500

    NEW: Common subexpression elimination.

commit 3c8ced65b04c954b2fdaa6188c72d714d7a72bb9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 01:04:30 2008 +0200

    Tutorial: don't reference the API, but rather the SymPy Modules Reference.

commit 714003652614aa7dcc18f11505210b5230b7abc0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jul 6 01:03:17 2008 +0200

    Documentation: Blog links updated, programs using SymPy section added.

commit c630e452f41d0abd1f216b97bf8af48937453c8b
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Sun Jul 6 00:01:41 2008 +0200

    Added docstrings to matrices.py (still some are missing).

commit d027b935e07e573e4e08a3d08c99dbb144a0a524
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 22:56:49 2008 +0200

    Failing doctest fixed.

    This was caused by introducing another ">" to make it print nicely in sphinx,
    so I just deleted ">" and added ":", which does the same thing.

commit 953090ecd1341e54ac56bce35571b64eecefa382
Merge: 83319e8 f54a4fb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 22:49:13 2008 +0200

    merge

commit 83319e816a1fb8be84b63f5e12984406c71fff7b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 22:03:23 2008 +0200

    Documentation: printing and pretty printing wiki pages ported.

    Obsolete information was dropped and the docs were updated to reflect the
    latest SymPy.

commit 1f8c141b23f4658fa98f70cfa305b2d473c701bc
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 22:01:57 2008 +0200

    Documentation if sympy/printing improved and fixed so that sphinx can parse it.

commit 471f7e28287b2ad2914c7c4173e9afd01731c449
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 22:00:31 2008 +0200

    Import print_python() and python() methods by default in sympy.

    For some reason they weren't exported by default. This is now fixed.

commit 4a4b8212917fb7e73dc78aab1c7d05e1f9287dae
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 20:56:47 2008 +0200

    Use Sphinx 0.4.1.

commit 79c9b904723c3e343fe2b99e47d38fbe29df0d56
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 20:52:05 2008 +0200

    Plotting module converted.

commit 0ff4c2c1af663d725527d8540b7e542652ce321e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 20:25:38 2008 +0200

    examples: Pi -> pi fixed.

commit f54a4fb5cab89f56c92b65bcc174e1f7bf624535
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 19:42:52 2008 +0200

    Fix test_basic.py and test_sympify.py to work with python2.4

commit 63ac4283065086ec00a0c46839dd5b8ebad1bff7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 19:38:21 2008 +0200

    Make test_matrices.py work with python2.4.

commit 76c74f42a936f81cea6a37c4a8f8c7c5efcb0a4e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 18:12:49 2008 +0200

    Polynomials module ported.

commit a1f35846b9f55984eaf52e77d39358fc08db73fd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 18:12:28 2008 +0200

    Documentation in the Polynomial class fixed to conform to sphinx.

commit ccf0b128ab76dbe47f506ade3c0b484fd146c6f6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 17:50:52 2008 +0200

    Documentation: concrete mathematics and rewriting module ported.

commit a55721f99fd7f119f7ab7177769adab511244fa1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 17:42:05 2008 +0200

    Documentation: statistics module ported.

commit b58d3f2e4d646c82f78394db3e80ea4249e36982
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 17:30:38 2008 +0200

    Geometry module ported

commit 36d479653f782f8774817f5bd58071188a518d0b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 17:29:43 2008 +0200

    matrices.txt: move the module target to the beginning of the module.

commit 4faa694356d3d4a2d487f512cffef56a6d713f36
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 17:10:44 2008 +0200

    doc/README file added with instructions how to generate the docs.

commit 62a91acdd7a85419e514fb4349830b3adbef7d24
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 17:08:38 2008 +0200

    Linear Algebra Module ported

commit 9fec72c9abb6869bf97dd49332600c1238d47f2c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 16:39:46 2008 +0200

    Obsolete numerics module docs removed

commit aa4cb715759fc6cd017210944160aa729e6c6081
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 16:38:37 2008 +0200

    Moved mpmath documentation to SymPy Modules Reference.

commit ab567bcd16ae5efa469be58744ed11ca3dc419bf
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 16:37:45 2008 +0200

    modules.txt: unnecessary heading removed.

commit 886987562fd638f8635afa0bb3b937f158d6bb96
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 16:25:09 2008 +0200

    Documentation for core and matrices committed, little refactorings.

    SymPy Reference renamed to SymPy Reference Guide, the new modules were put in
    it and the Tutorial just references the SymPy User's and Reference Guides.

commit b1a7fb19cd84d8e1f0a8649e2047828f48336a85
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 16:20:45 2008 +0200

    Docstrings in Basic fixed, so that they look in sphinx.

commit 4a98c70c1be0ac6721e06d985e6e7da8d77fb323
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 16:19:52 2008 +0200

    Documentation: put the sympy module to a search path. Don't cleanup modules/*.

    This is so that sphinx can find it in autodocs.

commit e4230b97669a2647521e24704acaca8c0fba03b5
Merge: 6c58992 9aea2e4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 14:33:53 2008 +0200

    merge

commit 9aea2e417399f2c34d95cce3095ece9189b4f862
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sat Jul 5 13:35:36 2008 +0200

    Add Matrix.transpose() and Matrix.conjugate(). Issue #713.

commit 6c58992e35e3c63e61de33ffafa0798310ac3887
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 02:00:37 2008 +0200

    Documentation: What SymPy is plus a link was added to the front page.

commit a926683c4d7be8948f50b963145bac065c2f346f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 01:09:08 2008 +0200

    Docs: about page updated

commit 313dff4ff8120677a2b0300fc83a6ca934e7af5a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 00:53:23 2008 +0200

    mpmath documentation added

commit 7cb815eb0c8c3f511d403a8a1587019b0ac5de6b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 00:51:40 2008 +0200

    Use Sphinx 0.4.

commit 57cc87f4648569c2ed3b6ac0a51d2f0eb46afbd3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 00:20:14 2008 +0200

    Removed the call to the test on module import.

    The test was called on module import, which caused it to be executed twice (and
    also when it failed, py.test reported "failed to load module", instead of a
    regular failure). This is fixed now.

commit b920d7dca74bea2bc7480f778381f0e8a1b763f1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 00:18:45 2008 +0200

    Whitespace in mpmath fixed.

commit 79671815584f8062a4cd95acfa9ced15c91cfd2a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 00:12:26 2008 +0200

    mpmath imports fixed.

    All tests pass now, except the code quality ones (mpmath needs to be fixed and
    this will be done in the next patch).

commit 331bf738a99a35bfe2898d1ad6afaaeb6b6c159f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jul 5 00:05:27 2008 +0200

    mpmath moved from sympy/thirdparty to sympy/

commit f72a75fb0cc329197ec65d8ed1f8608ba1485360
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 4 23:56:12 2008 +0200

    Documentation: the Quick Start moved to Appendix and linked from the beginning.

    This was done after the discussion in sympy-patches:

    http://groups.google.com/group/sympy-patches/msg/9e5ef081fd2de438

commit 5f24d96bbacb9f3642d22b673d38d3d10e661275
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jul 4 23:43:07 2008 +0200

    sympy-patches-tutorial:   :file:`something` rewritten to ``something``.

    So that it doesn't break rst2html's output.

commit 05a18029020e56122fe9f920f6fc522ef51202d7
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Wed Jul 2 11:51:04 2008 +0200

    fix for cos(exp(10)-1)

commit c3c62f88f33a7b105353cd61cbc9d90b29d07c83
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Wed Jul 2 01:49:38 2008 +0200

    Fix for the issue #903.

commit 6cb5ce903f8c2953c27fccac103abb6cbab8f7b7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jun 27 12:52:15 2008 +0200

    Documentation for Python comparisons methods resolution added.

commit 020f69db80425c6971108c2bf2f05c94538973aa
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Mon Jun 30 13:05:31 2008 +0200

    Update mpmath to mpmath-svn, r504. Includes gmpy support and fix for #876.

commit 91a1ca24c304c87cea6e5d83a8f4ca1ac0cdc5c0
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sun Jun 29 18:30:28 2008 +0200

    Added a control in Matrix constructor + test

    Reviewed-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 99a0ecacde275ab33bd6c2f5466a850365654e74
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sun Jun 29 13:17:05 2008 +0200

    Matrix speedups: zeronm() and submatrix()

    - Zero matrix creation: the bottleneck was in sympify().
    Old:
    %timeit zeronm(100,100)
    10 loops, best of 3: 71.6 ms per loop
    New:
    %timeit zeronm(100,100)
    100 loops, best of 3: 19.3 ms per loop

    - Matrix access with slices with a 100x100 matrix.
    M = Matrix(100,100,range(10000))
    Old:
    %timeit M[:,:]
    10 loops, best of 3: 276 ms per loop
    New:
    %timeit M[:,:]
    10 loops, best of 3: 23 ms per loop

    Reviewed-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 85ba354d206baa7ddf841208c0f56396711369e3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jun 25 13:51:08 2008 +0200

    Tests for classes with _sympy_ methods returning Real or Integer added.

    Reviewed-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 0faa093b5cadee80b536ba36ec8d7807edd07b85
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jun 25 13:49:07 2008 +0200

    A test for a class implementing both __int__ and __float__ added.

    Reviewed-by: Kirill Smelkov <kirr@landau.phys.spbu.ru>

commit 6211e9b02c691cb26163ec63a8ab76aadda9121a
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Thu Jun 26 11:21:19 2008 +0200

    Fix for issue #870.

    The problem was in Matrix.rref()

commit 0fe76b7a298dac703f3648cb8e0e54f4ab511c59
Author: David Roberts <dvdr18@gmail.com>
Date:   Wed Jun 25 14:50:06 2008 +0200

    Make log(x,exp(1)) equal to log(x).

commit dc32061a905e97a8a13e70cae1ab14b889b92a49
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jun 25 14:36:51 2008 +0200

    Matrix.evalf() fixed + a test written.

commit a4f7740fdb52180b96b05a0ba792224286188abf
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sat Jun 21 19:14:23 2008 +0200

    Matrix improvements.

    - added evalf() method (fix #873)
    - deleted the duplicated expand() method
    - speedup of applyfunc
    - big speedup of multiply
    - big speedup of transposition
    - others speedups achieved by using map
    - added two new tests for expand and transpose

commit 5ce6a2d83d151587c99543e4a93dda7bca2e2ab3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 17 15:04:53 2008 +0200

    Quick Start section added to the sympy-patches-tutorial.
    * * *
    Info about MQ added to Quick Start inthe sympy-patches-tutorial.

commit f1e5255e518cf2444d53f1e5bead630840da29d7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 17 14:17:12 2008 +0200

    Use Sphinx 0.3

commit 64b036d1a2a9bcfcec12fa76597000476fc4f608
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Thu Jun 19 18:42:52 2008 +0200

    Fix bug in integer_nthroot. 2**Rational(1,10**10) now doesn't hang.

commit 71f5f3013fb45ff6f50e718baafe2eeec9e90289
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Wed Jun 18 17:47:53 2008 +0200

    Matrix-number multiplication speedup 700%
    Fixed broken Matrix.simplify() and speedup

    This was achieved by accesing the self.mat directly.

commit 5061bc2511d780ad9473a28e4f7a50384b1a44f3
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Wed Jun 18 15:17:15 2008 +0200

    implement evaluate=False option for Add, Mul, Pow and functions

commit f2c0c30de1a4597bc88d8db1fdf3108bc9d7e7c4
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Tue Jun 17 18:26:55 2008 +0200

    Add Matrix.col_insert() and Matrix.row_insert() methods with doc

commit 05b149593eb9683ebc41176b2d26af1ec8bfd244
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 16 19:52:56 2008 +0200

    README updated and credits polished.

commit 0b1bf5da0a2b29458838ac214fb99868bcb17e17
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jul 3 09:43:25 2008 +0200

    Removed old tags

commit 4d9f13e1919bd18e2f6db0235d9adc9304188f50
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jun 15 19:36:32 2008 +0200

    Riccardo added to README

commit f7a5284cb8087d9f878f8f495d9890baba7b3b6e
Author: Riccardo Gori <goriccardo@gmail.com>
Date:   Sun Jun 15 19:27:46 2008 +0200

    Generalize Matrix.subs() with a working test.

    It calls Basic.subs(), which understands dictionaries and lists.

commit 266fc780216943436752bb8e09aab055d74ea061
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jun 14 21:09:27 2008 +0200

    Makes Matrix()[..] work with anything that has __int__() or __index__() (#882).

    Thorough tests were written. The Matrix was fixed, so that both m[1] and
    m[2, 3] work for both setting and getting the element value, where 1, 2, 3 can
    be any class that implements __int__() or __index__().

    The same fix for the SMatrix will be committed in the next patch.

commit 8edc44c286ebf2d89480e20dc5b12807c6c429e1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jun 11 15:08:50 2008 +0200

    Fixes sympify() and _sympify() to handle classes with __float__().

    I.e. so that one can now do:

    class A():
        def __float__(self):
            return 1.1

    and pass A() around SymPy.

    Thorough tests written for both sympify() and _sympify(). See also the
    docstring of DummyNumber in sympy/core/tests/test_basic.py.

commit 0c43c7c62c8a1e32d120d9151983551c44d51df7
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Wed Jun 11 00:21:03 2008 +0200

    Fixes pretty print of curly bracket expressions with 5 or more lines.

    Also, a test was added.

commit d1bcdf409d254d77242d54546dcc6ec63c9fa5a4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jun 10 00:43:16 2008 +0200

    Fixes the Matrix([1, 2, 3]) != 1 problem (#851).

commit dc61560ea3813ac03fb9bc2c77387e89e16795b4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue May 20 23:56:37 2008 +0200

    Fixes the "Matrix([1, 2, 3]) in [1]" problem (#851).

commit b5e51fac41662307e15cc8faa317b6c966a10ed5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed May 21 00:22:51 2008 +0200

    sin(x).rewrite(sin, exp).rewrite(exp, sin) now returns sin(x) (#837)

    Also these tests now pass:

    assert sin(x).rewrite(sin, exp).rewrite(exp, sin) == sin(x)
    assert cos(x).rewrite(cos, exp).rewrite(exp, cos) == cos(x)
    assert (sin(5*y) - sin(2*x)).rewrite(sin, exp).rewrite(exp, sin) == \
            sin(5*y) - sin(2*x)
    assert sin(x+y).rewrite(sin, exp).rewrite(exp, sin) == sin(x+y)
    assert cos(x+y).rewrite(cos, exp).rewrite(exp, cos) == cos(x+y)

    Thanks to Fredrik and chrismurf.

commit 3847eecacd1d18e13a03d75d416a9c2d3633b711
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue May 6 03:42:10 2008 +0200

    sin(pi/x-x) and similar things now simplify (#837).

    These tests now pass:

    assert sin(pi/2-x) == cos(x)
    assert sin(pi-x) == sin(x)
    assert cos(pi/2-x) == sin(x)
    assert cos(pi-x) == -cos(x)
    assert sin(-x-y) == -sin(x+y)
    assert sin(-x-1) == -sin(x+1)
    assert cos(-x-y) == cos(x+y)
    assert cos(-x-1) == cos(x+1)

commit 681a6d38337f35e9a94bdccbdfa08301971a290b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 9 21:13:14 2008 +0200

    with_order keyword parameter added to Basic.series().

    This is so that one can use .series to expand some difficult functions, where
    the Order class fails to determine the inclusion relations.

commit 62c5ceed931348f3fcae1c555c272efd0219ded1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 9 21:08:18 2008 +0200

    Basic.has() fixed to accept Derivative as well. Tests written.

    The part of .has() that is checking for classes is unfortunately not written
    robustly, see the issue #878 for fixing that.

commit 285c5e2f564bfd71d2c5812aa98ae2870eedee18
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 9 21:07:37 2008 +0200

    test_pickling.py moved from sympy/core to sympy/utilities.

    That is so that the testing of the core is faster and also because this test is
    really testing the whole sympy, not just the core, so it doesn't belong to the
    core.

commit effaf6d8eff0faf6f5a430916e18c6bee64a6155
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 9 21:07:16 2008 +0200

    Make f(2*x).diff(x) work (#877).

    The fix is really simple, but a lot of tests were written, so that the whole
    differentiation of unknown functions is more tested now.

    The problem was to make expressions like '2*x' as legitimate arguments for
    Derivative._symbolgen.

commit 8e1b93509386af911a69c3c913de47900bbdb384
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jun 9 21:02:05 2008 +0200

    Unnecessary code removed from ratsimp().

commit baf5de17b00c6c09dea5abada1b4ab449a32cf5d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jun 7 23:31:46 2008 +0200

    Tests adapted to use the new .det() interface.

commit 32b71ae95229454e62569b70b361b6fb4af05a34
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jun 7 23:18:17 2008 +0200

    Unify the interface for determinants.

commit b726c597f8edf99ce09b2cb712af48f57cb5dda0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jun 7 23:07:58 2008 +0200

    Matrix.inv(method="ADJ") added, docstrings improved.

commit fa439cf9cbe0eff20f0cb2aeb84ab05b9f78f408
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jun 6 11:38:13 2008 +0200

    Import factor() by default in sympy/__init__.py

commit 844b3cc55946f739db73f8e531d5d706b9304509
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Jun 6 11:36:25 2008 +0200

    Allow solve(eqs, (x, y, z)) syntax

    In most cases we use f(args, *symbols) syntax. However, as pointed
    by Ondrej, the old syntax with explicit list, tuple or set might
    be also useful, so adding support for it once more in solve().

    This patch also:

     [1] Improves error checking
     [2] Adds text to exceptions

    Test were added for new (old) syntax.

commit 7e46d4a0eef5312714f383d3e6e1bbc2577bf752
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Jun 4 17:12:50 2008 +0200

    Refactored solve(), use Poly

    solve() now uses 'polys' module and is ready to support
    polynomial systems. Also new syntax is used to specify
    symbols (coherent with the rest of sympy).

commit cae355c9ea5e261f05a5c606460d42dc15e0dd92
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 22:34:58 2008 +0200

    Refactored hypersimp() and hypersimilar(), use Poly

commit adab6dc56ea1f629cb60742074e76bd8873c1edf
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 21:54:22 2008 +0200

    Renamed Poly._cancel to Poly.cancel and added symbols

    Now (low level) Poly.cancel has much more userfriendly
    name and supports and additional symbols list to
    speed up computations (as rewrite.cancel).

    In near future old cancel() will be just a wrapper
    over Poly.cancel which will support threading over
    Matrices, Relational operators etc.

commit bb70ff3c664833c1891d78deba0a8f8cfcb57df3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 13:09:03 2008 +0200

    Use 'polys' module in sympy.matrices

commit ab4b3a8b4cee930b691c5c6bd5f702fd88056f76
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:50:06 2008 +0200

    Fixed resultant() imports

commit ad1a792885b8e5dd0308b89c9401a452a90b6afe
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:49:45 2008 +0200

    Improved Basic.as_poly()

    Now if no symbols were given then Basic.atoms()
    will be used (unless 'self' is already a Poly).

commit c744874f9a49c3d9401cf3ef3b1d9c01ade8d44d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:13 2008 +0200

    Implemented Poly.is_linear

commit 8c116112ea49ea18b4c451c4b4d64ea246181a3a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:13 2008 +0200

    Added 'multiple' flag to roots()

    Setting this flag to True (default is False) will result
    in a tuple containing all roots * their multiplicities
    (note that the default is a dict with keys as roots
    and their multiplicities as values).

commit 10a04ae98769fdc2fc25a70e0cf7616824e104f5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:13 2008 +0200

    Use polys module instead of polynomials module

    'polys' module is now the default for handling polynomials in sympy, so
    after from sympy import * you will arrive with two sets of functions:

     [1] poly_somealgorithm -> which takes Polys or expressions as input and
    	 returns a Poly or a tuple of Polys as output (this is fast).

     [2] somealgorithm -> the same input as in [1] but returns an expression
             or a tuple of expression (this is just a wrapper ie. it's slow[er]).

    Although the default module is 'polys', 'polynomials' module is still existent
    and is used by most of other sympy's modules (this will change in the following
    patches). From now on new code concerning polynomial manipulation should use
    only functions and classes available via 'polys' as the old module is
    scheduled for removal.

commit f7e860ae3d5fbe391a276c8a9fcad61546b76330
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:13 2008 +0200

    Use Poly in integrals.integrate()

commit 8d20d65494931a7d768f1f59f24a66c397a66ff4
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:13 2008 +0200

    Handle properly Atoms in Basic.has_{any,all}_symbols()

commit 83e1d4d8c5d5fda9a490c4bb5e295502b24487f3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:13 2008 +0200

    Removed Polynomial from sympify.py, updated test to use Poly.

commit e61c87101ff3106c7b3212caae065162fb3d4208
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:13 2008 +0200

    sympify and verify Symbols in Poly.__new__

    This introduces minor slowdown but helps to avoid
    many nasty errors in Poly initialization.

commit ad9629ec31b4bf5b4946a21d106168b704aa5c57
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jun 3 11:32:12 2008 +0200

    Updated test_pickling.py: removed Polynomial, added RootSum

commit 19cbe73ec1d4f2427ce43f723c6cab2dc284de16
Author: Vinzent Steinberg <vinzent.steinberg@googlemail.com>
Date:   Sat May 31 02:42:30 2008 +0400

    source: print path to source code

commit d0c7dfb308296f3df35979c769b7e228ff0c467b
Author: Vinzent Steinberg <vinzent.steinberg@googlemail.com>
Date:   Thu May 29 00:37:33 2008 +0400

    fixed example in canonize's docstring

commit 9aae9a24451ead6a067242f0453836ec76977cc2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue May 27 16:35:02 2008 +0200

    Removing the "from __future__ import division".

    As this is not yet default in Python.

commit 19b57a93c4fe8c4a0c1ae9ad0cde793290bdda4e
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Tue May 27 15:29:57 2008 +0200

    Add __truediv__() to Matrix class for real division  #867

commit 3821d58e2ce0e32b617c4c293c116feecd0f9561
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sun May 25 16:40:27 2008 +0200

    Use mpmath instead of the decimal module.

    Nearly all uses the decimal module have been replaced by mpmath. In
    particular, the Real class uses an mpf to hold its value, and functions
    are now evaluated using mpmath.

    There is only one change in behavior: Real(2.0) now becomes Real(2.0)
    instead of Integer(2). This only broke a single test, and this test
    was designed specifically to look for that case. Another test was broken
    in spherical harmonics, but a more robust fix in that case was to sympify
    the input (now fixed).

    The exception is Real(0.0), which still becomes Integer(0), since the
    code that checks for symbolic cancellation seemingly assumes a single
    0 instance. There are some more subtle issues involved here, and the
    behavior of Real() will have to be revised in the future, but the
    present behavior was the easiest solution for now and it doesn't
    break anything.

    Default precision is now 15 digits (same as mpmath) instead of 28
    (as with decimal). This would be trivial to change back. The epsilon
    in a polynomial root test was changed to account for the reduced
    precision.

    decimal_math.py has been deleted since it is redundant.

commit eb414788a6d0cb370a2edd664e405adc8001cc85
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Sat May 24 13:50:07 2008 +0200

    implemented source command (prints source code of an object)

commit f008b85b74e2ff95dd956fe3817c0b93101dfb57
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sun May 25 13:23:46 2008 +0200

    Improves the performance of npartitions.

    By removing overhead in the inner sum and not grossly overestimating the
    required precision. Avoids use of mpmath's precision context in npartitions.
    Tests added for P(10^4) and P(10^5).

    Before:

    n / P(n) mod 10^10 / time

    10^1 / 0000000042 / 0.0061 seconds
    10^2 / 0190569292 / 0.0064 seconds
    10^3 / 2149727991 / 0.029 seconds
    10^4 / 6916435144 / 0.48 seconds
    10^5 / 9421098519 / 15 seconds
    10^6 / 7104673818 / 16.7 minutes
    10^7 / ---------- / 40 hours (estimated)
    10^8 / ---------- / 450 days (estimated)

    After:

    n / P(n) mod 10^10 / time

    10^1 / 0000000042 / 0.0019 seconds
    10^2 / 0190569292 / 0.0019 seconds
    10^3 / 2149727991 / 0.005 seconds
    10^4 / 6916435144 / 0.031 seconds
    10^5 / 9421098519 / 0.34 seconds
    10^6 / 7104673818 / 7 seconds
    10^7 / 7677288980 / 3.1 minutes
    10^8 / 9836637702 / 55 minutes

    P(10^8) has 11132 digits.

    Still much slower than Sage or Mathematica, but a step in the right
    direction. The speed could improve a lot with some work, perhaps by a
    factor 10 or more over the tested range. E.g. when computing P(10^8),
    perhaps 3/4 of the terms are small enough to calculate with regular
    floats, and with tighter bounds perhaps 1/3 of the terms could be
    discarded entirely.

commit b6008419988a89484210463a40cf0671e0c13894
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 25 01:49:32 2008 +0200

    Removed numerics module

    Use mpmath instead. mpmath is available via thirdpary module.

commit b437ec955d1519a163b46381270717e07ad01feb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 25 01:41:28 2008 +0200

    Use mpmath where numerics module was used

    This patch is a direct translation from numerics to mpmath.
    Someone should later improve it (especially dps manipulation).

commit 138c2fc8eb02d1528a36944fea2c2c19414622bb
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 25 01:10:10 2008 +0200

    Implemented roots(), RootOf, RootsOf, RootSum

    This is a reimplementation of root finding functions.
    In the new main algorithm polynomial factorization is
    avoided by using square-free and functional
    decomposition.

    Changes:

     [1] New roots() function
     [2] Separated RootOf into two classes

      [2a] RootOf  -> represents k-th root
      [2b] RootsOf -> re[resemts all roots

     [3] Improved Sturm sequence generator
     [4] Implemented RootSum

commit ea7b613ea54a3b6b1aeda2ec3b3dc84f275c94af
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 25 01:10:10 2008 +0200

    Implemented Poly.tail_{coeff,monom,term}

commit 4359f4d6a81b4957379c1d01b24f98157dd282b9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 25 01:10:10 2008 +0200

    Implemented Poly.iter_all_{coeffs,monoms,terms}

commit 28f04d00df9f496ba34dc0d1127084ab921caf10
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 19:00:47 2008 +0200

    Start of the 0.5.16 development cycle

commit f0aa1272154e30465d2d2c4e123e3ee392b2201f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 18:59:45 2008 +0200

    Added tag sympy-0.5.15 for changeset 867737af0260

commit a13bbf9b6342d653ea4af6167f90d49dd5f98d93
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 18:59:32 2008 +0200

    0.5.15

commit d2a82c1fc8510972382f4c3d6036e55d60049ed5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 13:59:40 2008 +0200

    docs: version update

commit 6658477ba6aa77d0541894b5d6d5ec318de04972
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 13:59:13 2008 +0200

    docs: credits updated

commit d3e0665476ac31343a4cb905def404a45a96dbf0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 13:51:43 2008 +0200

    Basti added to README

commit 496b3b4624099b8f74bb5dda4e18754bc3f4f0ce
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 18:47:08 2008 +0200

    test_pure: stop on the first error

commit 74dc206439a6b96b3d6bf751abe61490231395df
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 13:24:30 2008 +0200

    tests that depend on ctypes commented out

commit 75c9db55986f24eeed5fc5c68bf9c46e18c4742f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 13:14:13 2008 +0200

    install the __init__.py in thirdparty

commit 266708b9e1da6ec2536a23b09c77bf2d23abc6c9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat May 24 12:50:16 2008 +0200

    "from physics import units" commented out for being too slow

commit d456d1c75c314bf9c23395d814cb10c6c98cef9e
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri May 23 15:48:30 2008 +0200

    Rename variable "modulename" to "module".

commit c889b9df926b514fb51affdf5e8bac0ea45a57ea
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Sat May 10 00:03:07 2008 +0200

    Improves lambdify:
     - more tests
     - numpy tests moved to test_external
     - lambdify_math, lambdify_numpy, .. removed since the same functionality
       can be reached with lambdify in aproximately same length.
     - lambdify and _lambdify merged
     - updated docstrings
     - updated translation dictionaries

commit 35b5f2dda2dc634c6bfbdf239ddf6846d2a60fbb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed May 21 22:47:41 2008 +0200

    Fixes the sin(x).integral(x) problem (#853).

commit 0d44dd7e9210d45dc140c0c72a2e8ffc993778c4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun May 11 23:57:53 2008 +0200

    docstring typo fixed

commit 376c8833b35f588b30f12570e8a75a6d3378e039
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 11 22:04:44 2008 +0200

    Improved simplify(), fixed #493, #522, #599, #625, #633, #686, #728

    This is a partial fix to simplify(). Now Poly._cancel() is
    used to handle rational functions. This fixes many problems
    which were caused by this procedure.

commit 9e52fc0e038294e6d9f96c7758b6b30b8da3b9f0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 11 22:04:39 2008 +0200

    Removed simplify.normal(), fixed #571

commit 0f213b877fb8bac042d1c15ffc5d1da6433f9625
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun May 11 22:04:31 2008 +0200

    No more "Not a principal Ideal" in poly_lcm()

commit a911a8a9949644135b398728ee8ecc4a28756b85
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Sat May 10 15:42:55 2008 -0500

    Basic kronecker delta and Levi-Civita implementation with some tests

commit 0b3eaea2b5f9fe23ae46648a54b707c1b2ecbc40
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Fri May 9 22:31:11 2008 -0500

    fixed atanh(I) and acoth(I) (807)
    also added some tests for atanh and acoth

commit 2e7b2eeeb6e0605ae2814a3bf5e87e6cb1e9a135
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 8 18:31:30 2008 +0200

    Vinzent added to README.

commit 3ab728ab5f3615823521e125042a63ff8f146705
Author: Vinzent Steinberg <vinzent.steinberg@gmail.com>
Date:   Thu May 8 16:30:35 2008 +0200

    docstring for conjugate

commit 3d3a4aa8ea48c677bf59bf49f61e6214d598979e
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Sun May 4 18:15:26 2008 +0200

    Change the order of the arguments of lambdify.
    Now: lambdify(args, expr)

commit 65024d8733a15c3d326e49d1f95c0d89dc739064
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed May 7 16:40:27 2008 +0200

    Missing docstrings and tests added for lambdify.

    Also uses python math by default, instead of numpy, as it was causing problems.

commit 644c4c7318807372e8aedf72b799ea638a99dbf5
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon May 5 18:18:42 2008 +0200

    Complete rewrite of lambdify.

    Now python-math, mpmath, numpy or any self-defined functions can used to
    replace the slower sympy-functions.

commit 8337eb0bf64d64379e84e6f951a8530ddc92280f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri May 2 14:17:44 2008 +0200

    Speeds up exp.nseries().

    $ py.test sympy/series/tests/test_nseries.py

    Before: 12.12
    now:     9.01

commit 18c49e6da37ea55941a052ab52b3b008e7486654
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri May 2 13:05:40 2008 +0200

    Added a note how to convert MQ patches to regular commits.

commit 337f01fc9d15c76e4c518bcf78c2d111ccde4909
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 16:28:09 2008 +0200

    Fixes the log(k**(log(5)/log(3))).expand() bug.

commit ddc35aaf19ede991afbe87bc00e99602e17e3fb1
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Wed May 7 14:48:19 2008 +0200

    Update the setup.py regarding the mpmath update

commit c211c629e4c4a8880e4c132a0e48c389ffdf8019
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Tue May 6 18:11:22 2008 +0200

    Update mpmath to revision 489.

commit 67db978216b46a011b5d334a0dba57755ba3407a
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Tue May 6 11:48:39 2008 +0200

    Make sign(0) == 0 and add tests for sign

commit c0ab9a34a955d86256b29f8f5d0733efc6c18907
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon May 5 23:08:20 2008 +0200

    test_code_quality now checks examples and also looks for \r\n file endings.

commit 510274a2969e60f3f9c6d571ffb3e40262b62dc5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon May 5 23:57:26 2008 +0200

    Fixes whitespace problems in examples/* to pass a test in the next patch.

commit 0898db5235ad58d5f620e3b86a01982793e08c0b
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Mon May 5 14:21:20 2008 +0200

    Another update for pickling.


    - Tests for nearly every class added (some are XFAIL)

    - Added slots to physics.units.Unit and physics.paulialgebra.Pauli so that
      these classes can be completely pickled.

commit f7bad436665efc1abe54fc0fb52e911ea1dfab4a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri May 2 17:08:32 2008 +0200

    Checks for not using tabs in indentation and also improves the line end check.

    Now we are checking that no line ends either by spaces or tabs and also that
    tabs are not used for indentation (they could be used in the middle of the line
    -- not sure if there is such a use case though).

commit d0ff9deec732b2b29950c92243c93d2ce4b5b8a2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri May 2 17:08:32 2008 +0200

    White space fixed in ast_parser.py.

    Note: this has escaped our attention, because we were only checking for " \n"
    at the end of the line. The next patch fixes our test too to discover cases
    where it ends with a tab -- and also that no indentation is done using tabs.

commit b15a91e6f0ac26b6fed7db2e1cd28bbec472913f
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri May 2 12:49:37 2008 +0200

    Some minor improvements for sympy.physics

    - physics is now imported into sympy.__init__
    - some functions and the units module are imported into sympy.physics.__init__
    - in sympy.physics.unit "from sympy import *" is removed

commit 9e5950252d3be6d051127837c76541a96bb503d5
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Fri May 2 09:51:39 2008 +0200

    Big update for pickling sympy classes and objects.

    - Moved the __getstate__ and __setstate__ methods to AssumeMeths since it is
      the top class of most other classes.
    - __getstate__ now gets all the values that are stored in slots of all classes
      up the inheritence-tree. It has to made sure that values that should be
      pickled are either saved in slots or an own __getstate__ method is written.
    - Tests for all classes in the core written (some still fail!)

commit 6353a86ae4d088dc0af20c7997a9c47504c9cd04
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu May 1 16:55:07 2008 +0200

    Makes nearly all sympy-objects pickle-able. (exception: f=Function("f"))

commit 372e1bb992e11b24bdb3062acc5008977ed7a640
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 15:46:19 2008 +0200

    More tests for nseries() enabled.

    Unmeaningful test removed.

commit 30b4e666f8ed263e3b3c618f122c83f80e2a71e3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 15:23:30 2008 +0200

    Another XPASSing test enabled.

commit 253e29679aabd4473d302a2b3f4943dc2a9dd316
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 14:23:54 2008 +0200

    Another test enabled in series

commit 900f426aed78981a0e4960c2a8f2eeb8a26e7c52
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 14:19:17 2008 +0200

    Obsolete comment removed.

commit 654282a9b5e766e8b30df17c01f63549e1b5a125
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu May 1 12:19:37 2008 +0200

    Vectorize improved + tests written.

    Details:

    - Vectorize can now handle optional arguments
    - diff(f(x), x, [1,2,3]) now possible
    - tests for vectorize written

commit 0f6b24bddb059eb44d4fb93fa3ff1a7c73289bca
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 14:05:26 2008 +0200

    Two XPASSing tests enabled.

commit fe5f7400775117d1d303416bd3bcaf8047a914d5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 00:33:27 2008 +0200

    Fixes (#815) by removing the old broken limits.

    Also removes the Basic.inflimit() that is no longer used. Use
    limit(e, x, oo) instead, like this:

    In [1]: limit(1/exp(x), x, oo)
    Out[1]: 0

commit c57495241eca4fb4dde68238fa37b415f541368b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu May 1 00:33:16 2008 +0200

    Use limit() in Basic.limit(), instead of limit_series().

    Note: the Basic.inflimit() will be removed in the next patch -- that's because
    the test_limits_series.py test still uses it (still 5 tests fail in
    test_limits_series.py, but I left it failing, as the file will be removed in
    the next patch anyway).

    Also the "wsym" temporary variable in the gruntz algorithm was set as Real,
    otherwise a few series tests failed. With this, no test fail (except 5 in
    test_limits_series.py).

    Speed
    -----

    Before: 31s
    Now: 42s

    But that's imho due to using limits in .oseries() too much (oseries is still
    called from nseries for some special cases). Consider:

    $ py.test sympy/series/tests/test_nseries.py
    before: 7.43s
    now:   11.57s

    And in partucular:

    $ py.test sympy/series/tests/test_nseries.py -k expbug4
    before: 0.50
    now:    1.34

    So .nseries() of exp ang log functions need to be improved.

commit eada23fdf8fa4cbb886f465edb44747942819b54
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Apr 29 02:36:04 2008 +0200

    Call limit() instead of limit_series() in order.py.

    A simple heuristics for the frequent limits that the Order needs was added.

    One test in test_series.py had to be disabled, because it started to fail.
    However, the same test in test_nseries.py works.

    Speed
    -----

    before: 30s
    now: 31s

commit 7a68a762943fbd9f201335ee2a252538a7a2763d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Apr 29 02:12:34 2008 +0200

    Changes limits to use .nseries() instead of .oseries().

    The .nseries() are more robust and simpler. As a benefit,
    there is also a very slight speedup:

    $ py.test sympy/series/tests/

    Before: 32s
    Now: 30s

commit 895da6cdcc9d91a73b88f55d0f9057c0e6bc7a7d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Apr 29 02:12:32 2008 +0200

    Fixes a few remainging bugs in .nseries() and a lot of new tests added.

commit 0a07916571e7d700cb654fedcbe87db7f6431615
Author: Sebastian Krämer <basti.kr@gmail.com>
Date:   Thu May 1 05:11:50 2008 +0200

    This patch implements vectorization of scalar functions (like in numpy).

commit 5163f260b4eac222b266a352605450a98c9f0ee8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Apr 28 22:28:23 2008 +0200

    Use explicit imports in test_assumptions.py

commit 3399a57efc32240c902623b87a56f061c0a3be6b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Apr 28 22:27:29 2008 +0200

    Few more bugs fixed in .nseries().

commit 88af3e0511ae01fb4f4d5675adf1a4378e1b4403
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Apr 28 22:27:28 2008 +0200

    All XFAILed tests that started to work uncommented.

commit adaf6a3f1fc12a3de3dfe91dd38f959ede937ebc
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Apr 28 22:27:27 2008 +0200

    Two more series now work with .nseries()

commit c5e379dc201aadff3b580bf16f0bc3dfc66c0229
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Apr 27 04:43:12 2008 +0200

    Fixes a caching bug (#726).

    The problem was that "a.is_comparable" modified the "a" in-situ and thus
    causing it's hash to change... Now we don't modify anything in-situ and all is
    fine.

commit 10395dc87144a6591e4f22550c11788e1d652424
Author: Nimish Telang <ntelang@gmail.com>
Date:   Tue Apr 22 21:25:36 2008 -0400

    A fix to polygon.py's is_convex and angles functions to remove some code emulating the xor operator.

commit e48d5699ccfc1f708fb91d2857df74782f63470e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Apr 27 13:52:55 2008 +0200

    Use explicit imports in matrices.py

commit 38e6db1f16b101492ad5e384c8d6d5a8a2bcce58
Author: David Roberts <dvdr18@gmail.com>
Date:   Sun Apr 27 13:48:55 2008 +0200

    Missing tests for the latex printer added.

commit d4813e1485146c668c6a969d19271e5360828df8
Author: Felix Kaiser <whatfxkr@gmail.com>
Date:   Sat Apr 26 22:34:07 2008 +0200

    Adding "verbose" and "dry" options to bin/strip_whitespace

    verbose: report all changes
    dry: do not modify files, only report

commit ceea77547a2e2d070c01ff2445f43b6e6c8f61df
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 23:02:08 2008 +0200

    Start of the 0.5.15 development cycle

commit 44d683c2a844fa86730a43c2ebbc3c8c215d98ec
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 22:49:20 2008 +0200

    Added tag sympy-0.5.14 for changeset 2c385f793eb5

commit 6f7c1f20683fd92a2627b6902ce72e6e6b03bac5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 22:49:18 2008 +0200

    v0.5.14

commit 36a1870ccd0064984c67c887918ee9ac49aec38e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 22:40:46 2008 +0200

    Fixes the bug in factorials so that all test pass now.

commit 4e20f9fc82f301eec0d7c345c02999b239a5bc3c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 22:15:13 2008 +0200

    Renames all duplicate tests that were before ignored (!) by py.test.

    And of course some of them won't pass, because of a bug in py.test.

commit 131d2de6070e6023cdd21d737d9c1e0010d919c8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 22:27:44 2008 +0200

    A test for duplicate tests added.

    This is absolutely crucial, because of a bug in py.test that makes py.test
    ignoring all test files that have duplicate names.

    5 test files with duplicate names were discovered by this test and those will
    be renamed in the next patch.

commit 0de18b5da989111c801d99d02a2d8850a25900c3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 22:08:22 2008 +0200

    The bin/test_pure* scripts were fixed to use python2.4 and pbuilder.

    This is because Debian now uses python2.5 by default. And pbuilder is a little
    faster for installing a lot of packages than cowbuilder.

commit 3ff3a5f93608d487fe2dcf58369e9a350ec6b0cb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 21:46:51 2008 +0200

    solvers.py: use explicit imports, calculate patterns on the fly.

    This speeds up "import sympy" from 0.16 to 0.11.

commit 25e6e2667ecd1a5bf72c74c189afd3de2ef26a42
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 21:42:05 2008 +0200

    Script for measuring the speed of "import sympy" added to bin/.

commit fb44a068ce01d3f7f5ba6128a0084bed64bb0c14
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 21:34:02 2008 +0200

    README: Changing David's address to the same form as the other addresses.

commit 30113b1a39846c17283f77ab3c84faf35d10404b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Apr 26 22:39:11 2008 +0400

    David Roberts added to README

commit 7309a5aece12b5c2bbce154833736692a36a7c45
Author: David Roberts (dvdr18 [at] gmail [dot] com) <devnull@localhost>
Date:   Sat Apr 26 22:39:11 2008 +0400

    LaTeX printing of exp(1)  (#813)
    Currently latex() renders exp(1) as a capital 'E', but other exponents as a
    lowercase 'e', eg:
    >>> print latex(exp(1)+exp(2))
    ${e}^{2} + E$
    which imho looks a little odd.

    I've attached a patch which renders exp(1) as a lowercase 'e' instead:
    >>> print latex(exp(1)+exp(2))
    ${e}^{2} + e$

commit e319720b31098fe430e4a6a58bdbfbd0b255769e
Author: David Roberts (dvdr18 [at] gmail [dot] com) <devnull@localhost>
Date:   Sat Apr 26 22:39:11 2008 +0400

    'TypeError: object is unindexable' issues with LaTeX printing  (#812)
    An exception occurs when trying to print various functions with latex(),
    such as:
    >>> print latex(gamma(x))
    <type 'exceptions.TypeError'>: 'gamma' object is unindexable

    The attached patch fixes this problem

commit 85a48745543d6eff4de94934a6adc1d850cf121a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 20:37:50 2008 +0200

    A missing test added to setup.py

commit 6a3841f5c19ac7907e693e0da901b2003f041fc4
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Fri Apr 25 16:51:55 2008 +0200

    Sequences as Lambda argument. Test, docstring example.  (#810)

commit 256c4bfebf39f04806487418890bcbba0249d37e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 20:13:40 2008 +0200

    Fixes the rest of .nseries() tests.

    Now .nseries() passes the same tests as .oseries().

commit 7e7b2ca46a6f5979b6a8d8b78ac7178459cbe274
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 19:53:37 2008 +0200

    A script for striping whitespace added to bin/.

    Usage:

    $ bin/strip_whitespace
    Usage: strip_whitespace [options] filename

    Options:
      -h, --help  show this help message and exit

commit 65325cd992e2ec194dd78ffac43d6f8f2a855295
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 26 02:39:45 2008 +0200

    Implemented Poly.as_reduced() and monomial_min()

    This will be needed in roots().

commit 955af031a74c7e29dd6d4838315435c9c418e67f
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 26 02:39:45 2008 +0200

    Implemented Poly.atoms(), fixed #779

commit 1cc6b9921d0544770647f065eaa45a07b460adca
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 26 01:56:58 2008 +0200

    Examples of functions usage and apart+together added to the tutorial.

commit 349fda7de55d82fdc0ce7cfe183662ae5a329e21
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Apr 25 23:55:01 2008 +0200

    Comments improved in test_code_quality.py.

commit 35b534e2b3624b824ef6162b9bd883ea7b53723e
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Fri Apr 25 04:33:19 2008 -0300

    Note in SymPy Patches Tutorial about qrecord and Mercurial 1.0

commit 6fbd752b1343c2e5085c3d060dbc7cc11a839728
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Apr 24 12:15:54 2008 +0200

    Test whitespace in pretty printing tests.

commit aad1558d5222ce9f4e7e1ffebb412bcebac3af7d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Apr 24 21:15:52 2008 +0200

    Fixed trivial cases in poly_sqf()

    Now poly_sqf() will work with args like 1 or x.
    Improved also the docstring (fixed typos).

commit 768dca020817b435aef995584488cc34380d57b5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Apr 24 21:11:07 2008 +0200

    Implemented functional decomposition of univariate polynomials

commit cb9eba5441a31523eeb8735c67677e115493f22b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Apr 24 21:08:24 2008 +0200

    Simplified initialization of univariate polynomials

    Now you can use { e1: c1, ..., eN: cN } construct
    rather than { (e1,): c1, ..., (eN,): cN } to
    initialize an univariate polynomial.

commit 58e3fe70f168613e69d20858ae52525e43d70145
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Wed Apr 23 20:30:38 2008 -0300

    Test for conjugate

    Adds test for conjugate in test_complexes.py.

commit a829f8d170e4880c6fa0f0d319bacbbc134dbc89
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Thu Apr 24 01:49:16 2008 +0200

    Fix conjugate(conjugate(x)).

    Small fix for correcting conjugate(conjugate(x)) bug and a test case.

commit 1fad4b73944f1f61fddcde4c836a72534534e726
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Wed Apr 23 19:01:21 2008 -0300

    Missed command in function test_upretty_diff()

    Adds missed command in function test_upretty_diff() of
    test_pretty_unicode.py.

commit fc3e21c645e737b5b6d6576a05e42cfbe30091f6
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Wed Apr 23 18:56:49 2008 -0300

    Modifications in test_pretty.py and test_pretty_unicode.py

    I think it's a better practice if we explicitly indicate end-of-line in
    some of the pretty print tests.

    Example (notice the '\n\' in the first):

    >>> u"""\
    >>>    ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽\n\
    >>>   ╱   ⎽⎽⎽⎽⎽⎽⎽     \n\
    >>> ╲╱  ╲╱ x + 1  + 1 \
    >>> """

    instead of

    >>> u"""\
    >>>    ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽
    >>>   ╱   ⎽⎽⎽⎽⎽⎽⎽
    >>> ╲╱  ╲╱ x + 1  + 1 \
    >>> """

    If we do that we got no trailing whitespaces on the file, which I think
    it's a good thing.

commit ab185d3fdfb9416d75b05882f51f2f17acc6e04d
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Wed Apr 23 18:52:55 2008 -0300

    fix pprint of factorial

    Changed pretty print of factorial(factorial(n)) from n!! to (n!)!, since
    n!! is used to Double factorial.

    Test updated.

commit 9578341c09327f04f482079954e9c2fbf4556dbc
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Wed Apr 23 18:43:23 2008 -0300

    pprint test for conjugate

    Added tests for pretty print of conjugate in test_pretty.py
    and test_pretty_unicode.py.

commit 6578890039d04e32e42cd0abe5ee588f04fd1f50
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Sat Apr 19 00:15:10 2008 +0200

    CleanUp: order resorting of the subs methods

commit e3659847001d24f603d3be9f5e6334f8abf56c0e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 23 13:22:27 2008 +0200

    Fixes the issue #762.

    The following cases now work:

    assert (a**2 - b - c).subs(a**2 - b, d) == d - c
    assert (a**2 - c).subs(a**2 - c, d) == d
    assert (a**2 - b - c).subs(a**2 - c, d) in [d - b, a**2 - b - c]
    assert (a**2 - x - c).subs(a**2 - c, d) == d - x

    i.e. it either works or returns the original expression. Use pattern matching
    (slower) if you want to succeed 100% of time.

    Before this patch, some of the cases above generated an exception.

commit a24971d5cb3454f679ae5de56dff384097e2b2b5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 23 11:50:02 2008 +0200

    Felix's email fixed in README.

commit da179be3c06d9f8bdfb2e5902b0dd48119b90802
Author: Felix Kaiser <whatfxkr@gmail.com>
Date:   Wed Apr 23 08:53:24 2008 +0200

    Adding test for trailing whitespace (issue #799).

commit fdefed7399e63c50563bf06743eaea2900710702
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Apr 23 13:18:07 2008 +0400

    Roberto added to README

commit 5b9a8ce8c34c24a1dd9302df1268f931e885adc6
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Tue Apr 22 21:56:59 2008 -0300

    Pretty printing: ascii-art for floor and ceiling functions

    Implements ascii-art for floor and ceiling functions. Also, changes were
    made to pprint of abs function.

    See <http://code.google.com/p/sympy/issues/detail?id=608#c4>

    Tests added in test_pretty_unicode.py for those 3 functions.

commit 85aa16366f31a81ae8557dd559ef8a7fcc8c02ef
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Tue Apr 22 21:56:59 2008 -0300

    Pretty printing of Gamma function

    Implements unicode GREEK CAPITAL LETTER GAMMA for pretty printing of
    Gamma function.

    See <http://code.google.com/p/sympy/issues/detail?id=608#c4>

    Small test added.

commit 909192fefc65b1381e64a2a87746f9bc5eba6819
Author: Roberto Nobrega <rwnobrega@gmail.com>
Date:   Tue Apr 22 21:56:59 2008 -0300

    Fix pretty printing of factorial and conjugate (#608)

    Tests were added in test_pretty.py.

commit ccf742f3389ecf35b6d5f0cce4a38293226f262a
Author: Abderrahim Kitouni <a.kitouni@gmail.com>
Date:   Wed Apr 23 08:04:30 2008 +0100

    use abs and arg in log._eval_expand_complex

    * work around a bug where (x**2)**1/2 equals x and x is negative
    * less code duplication (although abs is not affected by that bug)

commit 3cc901e31c27903ab70fa7fe461fd266a448a02f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 23 00:19:58 2008 +0200

    Fixes a doctest failure (#788)

commit 90abdec8bcbddaa4f67aae6112ad4e09c253f13d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 23 00:10:30 2008 +0200

    Derivative docstring improved.

commit f677539ac830755ac1e45a1cb2ec88f70a7abde8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Apr 22 23:58:40 2008 +0200

    Fixes the issue #798, adds docstring to _symbolgen.

commit ceb06181ea30733e4514287587f7eb392fa4e76f
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Tue Apr 22 10:03:39 2008 +0200

    Wrappers around the Relational class: Rel, Eq, Ne, Lt, Le, Gt, Ge  (#745)

commit b6ddfe6353e6192b11690c1a81584672f90e5dac
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Apr 22 00:18:01 2008 +0400

    Add Felix to README

commit 0e1910e22cd9ba8f24c4328c582b1f791860dd27
Author: Felix Kaiser <kaiser.fx@gmail.com>
Date:   Mon Apr 21 08:03:11 2008 +0200

    Issue 661: documenting acos, acot, asin, atan, cos, cot, sin, tan.

commit 54183704523f5f8b0276d4bd0f04bf57468d274d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Apr 20 11:52:38 2008 +0400

    Strip trailing whitespaces all over SymPy

    except:

    - thirdparty packages
    - pprint tests, where they are needed

commit adc0d8426fb142687b52f7b9fd9a5f515ef262ac
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Sat Apr 19 00:05:35 2008 +0200

    Do the _subs_list task in _subs_dict

commit 9111aed0696da3fa0b693780abb5fd07c1d6b42f
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Fri Apr 18 23:37:19 2008 +0200

    Added _subs_list() for order sensitive substition

commit 7d6e1a06dfcf3047a5423b0e734ac3436f094dc0
Author: Nimish Telang <ntelang@gmail.com>
Date:   Sat Apr 19 20:14:26 2008 +0400

    tests for asinh + fix fo asinh(<imaginary>)  (#652)

commit 1ff58d750fea3c27381ff7e7a71d64d381863ef1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 19 15:35:08 2008 +0200

    A test for the #641 written.

commit f9fd4a17e5d52ac515cec3f684114c9d585d6da3
Author: Pan Peng <pengpanster@gmail.com>
Date:   Sat Apr 19 22:10:53 2008 +0800

    test for deriv_degree function

    deriv_degree is a function to get the order of a given ordinary differential equation. The test code is added for it.

commit d96393c5b21a62b533c46c7e8b97ec958e1894a8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 19 15:19:38 2008 +0200

    A test for x.diff(x, 10**8) committed.

commit d968ea6de46848345b659eb89d03a5b4e7db7793
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Apr 19 14:43:08 2008 +0200

    Fixed a few typos in Poly's docstring.

commit e80fb4c4aab42d3d1b139119389302dbb6c63168
Author: Nimish Telang <ntelang@gmail.com>
Date:   Sat Apr 12 13:02:01 2008 -0400

    A fix to make Derivation faster by using  generators for the arguments. Breaks early on Zero. I.e., x.diff(x,1000000) is instantaneous.

commit 5a5ec3e68fecb54dd4f94050716db32cb065bcfb
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Apr 19 13:58:02 2008 +0400

    Fix Poly to be compatible with Python2.4

    Mateusz, please be careful :)

commit 7674df8c0a388259064fe94d9ea0bd8973f6000c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Implemented poly_sqf(), Poly.{is,as}_squarefree

commit df782996e846bbfcf999f1cd1e1c1985f8056806
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Implemented Poly._cancel(), no more recursive imports.

    Poly._cancel() is a fast version of cancel(), used for
    internal purpose in 'polys' module. This way no imports
    from sympy.simplify are needed. It also improves speed
    of time critical algorithms.

    Also zero() isn't imported from sympy.matrices explicitly.

commit d9297698b019b37661c4b67fa757312c9b72e6cc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Use Poly.total_degree in Poly.is_dense

commit aabaec71f8b47ac55bd1eae1fe82a3118f270238
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Implemented poly_gcd() and poly_lcm()

commit 86a63e2c4f1bff63bc0e528566ba4dc91ba2b504
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Implemented subresultant PRS

commit ddbf40973cffdfd5a0623c888dafce57c9b23d3b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Implemented Poly.content, refactored Poly.as_primitive

    The algorithm is useful only for Integer coeffs,
    which enough for now. Later more general procedure
    will be implemented.

commit 919464e86a4ab3e58e3d4e9c87f4610a344edefc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Simplified code in Poly.__mul__() and poly_div()

commit 02ce7ce0485cdeebce166efbc1cb6e26a0fd1386
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Implemented Poly.{mul,div}_term()

commit 70403d12c644791f504262b617f160b3da405635
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Apr 19 10:49:18 2008 +0200

    Implemented ilcm() (integer LCM)

commit cba1d5dab071b76634bf11f3f826c71e90e76b64
Author: Jurjen N.E. Bos <devnull@localhost>
Date:   Wed Mar 26 15:37:02 2008 +0100

    Added support for non-square roots

commit 64b5118c14d2c179d001895e8ff009a26f94c522
Author: Pan Peng <pengpanster@gmail.com>
Date:   Fri Apr 18 07:40:27 2008 +0800

    This patch improves the second order ode solver.

    "dsolve" now can handle constant coefficients case of the second order odes.

    Besides, the structure of the dsolve has been changed in the following way:

    I defined a recursive "deriv_degree" function to get the order of any odes.
    Using this function, we can divide the odes into several catogeries by the
    order. (Currently, the "dsolve" can only support the 1st and 2nd order odes).

    In each catogery, namely 1st order case and 2nd order case, different methods
    are used depending on the form of the given equation. For 1st order, the linear
    case has been implemented. And constant coefficients case for 2nd order. Many
    other kinds of methods will be implemented later.

commit 813e36822fd475e6857684571bd0faf5a74f803c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Apr 17 23:36:56 2008 +0400

    fix acosh(<something real>)  (#730)

commit 9f9b3cf78b5fc2b5f5d8a440091a2c23614dc175
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Apr 17 20:33:31 2008 +0400

    test_bug2 started to pass

commit 3f1c8586587fb0d7e366456bf09e120de71c38cd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Apr 17 20:22:14 2008 +0400

    test_Limits_simple_4b started to pass

commit 2f14a900cbf57fe9a8f127065e1635465743af41
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Apr 17 20:01:01 2008 +0400

    test_apart1 started to pass

commit 00b5e994000de6cee02a1ad55d097e2fc17d8979
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Apr 17 17:39:50 2008 +0400

    pprint: fix printing of greek letters in derivatives  (#778)

commit 6f1a473eff5adf7279ccd1fd80af485cc135a251
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Apr 17 17:20:39 2008 +0400

    pprint: move pretty related tests to their home

    i.e. to sympy/printing/pretty/tests/

commit 699025860333aa43d7d707f58ad453fad4e06ed8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Apr 17 00:53:53 2008 +0200

    .nseries() methods implemented.

    This patch adds a new robust and fast series expansion to SymPy. From
    Basic.nseries() docstring:

            Calculates a generalized series expansion.

            The difference between oseries and nseries is that nseries calculates
            "n" terms in the innermost expressions and then builds up the final
            series just by "cross-mutliplying" everything out.

            Advantage -- it's fast, because we don't have to determine how many
            terms we need to calculate in advance.

            Disadvantage -- you may endup with less terms than you may have
            expected, but the O(x**n) term appended will always be correct, so the
            result is correct, but maybe shorter.


    Currently only the basic things are implemented as seen by the tests in the filesympy/series/tests/test_nseries.py

commit 5c6ff9fa42a291d28e5258429283cd74bddd9533
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Apr 16 20:51:05 2008 +0400

    pprint: implement Limit printing

commit 22f1644a174cda717e1b9e9ccc48886889c386c5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 16 18:21:17 2008 +0200

    Use explicit imports.

commit 38763311aee172642ca6551adc61d209637e9c92
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 16 18:21:14 2008 +0200

    Limit class implemented for representing unevaluated limit.

    The plan now is to kill the file limit_series.py completely and use our robust
    algorithm for everything. But before we do it, we'll implement more robust
    series expansion, because the limit algorithm needs a solid foundation in
    series expansion.

commit 49e8c535ef1abe4d81cfa233b59c690e3fb0a393
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 16 16:26:28 2008 +0200

    limit() heuristics added and the issue #786 fixed.

commit ae7359cfc1df4192911f510af945b6d4eb118d18
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Apr 16 16:24:22 2008 +0200

    Renames limit() to gruntz() and introduces a new function limit() that calls it.

    So now the limit() function looks like this (not showing a docstring):

    def limit(e, z, z0, dir="+"):
        return gruntz(e, z, z0, dir)

    The tests were also refactored to only test for "gruntz". The next step now is
    to put some heuristics into the limit function.

commit 48575824b52460519775de6404bb969ba85204dc
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Apr 16 09:10:18 2008 +0400

    Rizgar added to README

commit 0b77b9a3472b299e62d76a8f255d4565c2ea3de7
Author: RizgarMella rizgar.mella@gmail.com <RizgarMella rizgar.mella@gmail.com>
Date:   Tue Apr 15 17:54:23 2008 +0100

    Implimentation of Bailey-Borwein-Plouffe algorithm, Finds the nth hexidecimal digit of pi without calculating the previous digits.

commit ef5d9f8ffb985f56abab93a073f4619d82c44c3f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Apr 14 23:16:48 2008 +0200

    Elrond added to README

commit 69e4599c89bcbbc93bd52ce58fd92f6952989426
Author: Elrond der Elbenfuerst <elrond+sympy.org@samba-tng.org>
Date:   Mon Apr 14 23:13:19 2008 +0200

    Use larger parens around function args in non-unicode pretty printing.

    Before:

    In [2]: pprint_use_unicode(False)
    Out[2]: True

    In [3]: pprint(sin(x/y))
        x
    sin(-)
        y

    In [4]:

    After:

    In [1]: pprint_use_unicode(False)
    Out[1]: True

    In [2]: pprint(sin(x/y))
       /x\
    sin|-|
       \y/

commit 2aac5d12b9817c245fdbb861afa10a8985f8e4c8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Apr 14 10:01:47 2008 +0200

    Implemented more efficient Buchberger algorithm

    The new algorithm returns the same type of basis as the old algorithm
    ie. reduced, unique and with monic generators; however the internal
    design is completely different.

    First of all new algorithm uses sets, rather than lists. Secondly,
    before the main loop and after each reduction to zero of an s-poly,
    the basis is reduced and the critical pairs set is regenerated.

    The algorithm could be improved by using sugar flavor pair
    selection strategy rather than minimum LCM strategy.

    Here is an initeresting example taken from "One sugar cube please":

    (caching: on)

    In [1]: u,t = symbols('ut')

    In [2]: f = 35*y**4 - 30*x*y**2 - 210*y**2*z + 3*x**2 + 30*x*z - 105*z**2 + 140*y*t - 21*u

    In [3]: g = 5*x*y**3 - 140*y**3*z + 45*x*y*z - 420*y*z**2 + 210*y**2*t - 25*x*t + 70*z*t + 126*y*u

    (first pass)

    In [4]: time G = poly_groebner((f, g), x,y,z,t,u, order='grevlex')
    CPU times: user 8.36 s, sys: 0.08 s, total: 8.45 s
    Wall time: 8.57 s

    In [6]: time GG = groebner([f, g], [x,y,z,t,u], order='grevlex')
    CPU times: user 36.63 s, sys: 0.34 s, total: 36.96 s
    Wall time: 37.54 s

    (second pass)

    In [8]: time G = poly_groebner((f, g), x,y,z,t,u, order='grevlex')
    CPU times: user 0.92 s, sys: 0.01 s, total: 0.93 s
    Wall time: 0.94 s

    In [10]: time GG = groebner([f, g], [x,y,z,t,u], order='grevlex')
    CPU times: user 6.29 s, sys: 0.04 s, total: 6.33 s
    Wall time: 6.41 s

    (caching: off)

    In [1]: u,t = symbols('ut')

    In [2]: f = 35*y**4 - 30*x*y**2 - 210*y**2*z + 3*x**2 + 30*x*z - 105*z**2 + 140*y*t - 21*u

    In [3]: g = 5*x*y**3 - 140*y**3*z + 45*x*y*z - 420*y*z**2 + 210*y**2*t - 25*x*t + 70*z*t + 126*y*u

    In [4]: time G = poly_groebner((f, g), x,y,z,t,u, order='grevlex')
    CPU times: user 9.88 s, sys: 0.12 s, total: 10.01 s
    Wall time: 10.19 s

commit 32c6557537bc096492a28d1ccd889a84646b1592
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Apr 14 10:00:50 2008 +0200

    Friedrich added to README.

commit 8f4a6fedaa640c27b9b665c5e8076608068c95e8
Author: Friedrich Hagedorn <friedrich_h@gmx.de>
Date:   Mon Apr 14 09:59:25 2008 +0200

    Install the sympy.interactive module with the setup.py script.

commit 77983c200dc98800efd87767bf38727ea124fc6c
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sat Apr 5 23:59:36 2008 +0200

    Solver for transcendental equations added.

    Implements the Lambert W function to support mixed equations.

commit 8f153c01e6391aa4bed0f6e696bcb9700c082b99
Author: Fredrik Johansson <fredrik.johansson@gmail.com>
Date:   Sun Apr 13 17:23:26 2008 +0200

    Lambert W function implemented, together with a docstring and tests.

commit bc85e9e08ce632c7c0f840d514a6c9e15e15eef8
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Apr 13 18:52:04 2008 +0400

    Pan added to README

commit 35d8b7cdbfc43731f29fda7106a47c3b15a34577
Author: Pan Peng <pengpanster@gmail.com>
Date:   Sun Apr 13 18:39:51 2008 +0400

    A small improvement on ode solver

    Originally desolve can only solve a special class of first order odes in the form of "af'(x)+c=0". Now it can handle first order linear odes: a(x)f'(x)+b(x)f(x)+c(x)=0

commit d6f9fc30b97daa52c48438cd44ad68df35474823
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Apr 11 21:29:39 2008 +0400

    remove unneccesary commented XFAIL

    this is a leftover after 344c4b98c9ec
    btw, #617 was fixed ~ month ago.

commit cf5e17eee12b639a697e3856e72d11f126593651
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Apr 11 21:26:34 2008 +0400

    Add Abderrahim to README

commit 6fe55f72c1fe8cf9092fe91c0bb74660e6256667
Author: Abderrahim Kitouni <a.kitouni@gmail.com>
Date:   Fri Apr 11 15:52:50 2008 +0100

    Remove prettyAtom as prettyForm has ATOM binding by default

commit c1c978a7ebeeb7e9d3aaa30d22eb343d4ff3b32d
Author: Abderrahim Kitouni <a.kitouni@gmail.com>
Date:   Fri Apr 11 15:52:50 2008 +0100

    pprint: fix pow with negative integer base (#739)

    (-2)**n now returns :

        n
    (-2)

    instead of

      n
    -2

    which should be -2**n

commit 807496e61b63a353919cb635bcfe4dd349c349c4
Author: Abderrahim Kitouni <a.kitouni@gmail.com>
Date:   Wed Apr 9 08:58:22 2008 +0100

    fixed complex expansion (#754)

    * In log._eval_expand_complex : abs(x+I*y)=sqrt(x**2+y**2) and not
    sqrt(x) + sqrt(y).
    * evalf works now for expressions with complex logarithms.
    * re and im will be able to expand complicated expressions.

commit 24c3a03c69cebe7b26e2755806cc763b8b29eeae
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 4 21:09:50 2008 +0200

    Improved isympy, fixed #338

    [1] docstring added

    [2] can run without readline

    [3] can pass options to ipython, eg.

      ./bin/isympy -q -- -colors NoColor

commit 483ca2330fb8d7cd299833ae6cfc7e7a96c2ea32
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 4 18:09:21 2008 +0200

    Fixed 1/2 == 0.5 in init_ipython() and ipythonrc-sympy

commit b292b30882fc8561e8743c94e809f50e33d106da
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Apr 4 00:09:12 2008 +0200

    Refactored isympy, fixed #553

    Finally functions with reference to outer scope
    can be used in an embedded ipython session, eg:

    Python 2.4.4 console for SymPy 0.5.13-hg

    In [1]: x
    Out[1]: x

    In [2]: map(lambda c: c*x, [1,2,3])
    Out[2]: [x, 2*x, 3*x]

    Note that previously we were getting:

    NameError: global name 'x' is not defined

    Besides #553, cleaned up and simplified isympy's
    code, added --quiet flag to skip welcome message.

commit 0437ada5ef535cd2f1a50b7cb29c8252a0b7e0a3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Apr 3 15:23:24 2008 +0400

    Nimish added to README

commit b485e1af5dd1f2a07a79124c62caed5d696b30e7
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 1 23:38:45 2008 +0200

    Added ipythonrc-sympy

    Now you can run SymPy, via:

     ipython -p sympy

    supposed ipythonrc-sympy
    was added to ~/.ipython

commit 47c3b755c28b528d06da6f87ce00165d45e18e8b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Apr 1 23:38:45 2008 +0200

    Implemented interactive.init_ipython()

    Added code to setup IPython session outside
    isympy, eg. for ipython -p sympy

    init_ipython() functionality:

    [1] Startup (Welcome) banner

      [1a] Python version
      [1b] SymPy version
      [1c] Caching (optional)

    [2] Display hook (pretty-printer)

    [3] Exit message

commit 5c36641a0beba0958a40471933b9078c668b980c
Author: Nimish Telang <ntelang@gmail.com>
Date:   Mon Mar 31 01:16:47 2008 +0200

    Multivariate Lambdas implemented (#619).

commit 2f74895967cd14e5eea29025cba32b1ffbb16865
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Apr 1 15:37:12 2008 +0200

    The rest of old user's guide removed

commit 2a5958452c79ed3e5cb7f9710d452a48467a95e8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Apr 1 15:01:52 2008 +0200

    index.html in docs improved.

commit f81b0b67f72de76b4e88af2f54ea113296176908
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Apr 1 14:58:00 2008 +0200

    Old user's guide removed (the new one is in the src dir).

commit 965148b79b51beebce661a4c6331222e26aabdc9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 31 17:18:00 2008 +0200

    Improved Basic.is_number

commit bbd3a945a4bd5ee9c8c81547bb844b7e717be3ab
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Mar 31 17:51:32 2008 +0200

    Use absolute path for pyglet (#770) and removes sys.path hack from plotting.

commit 1273b450b43cdcdfc558d237f82768a9f04e53d7
Author: Jurjen N.E. Bos <jnebos@gmail.com>
Date:   Mon Mar 31 01:00:16 2008 +0200

    #767: -sqrt(sqrt(5)-1). Bug fixed in Mul.flatten in optimization of powers.

commit 77b896f239a7975e24433548d11e9fcfb101f18a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 29 14:53:52 2008 +0100

    Implemented Berkowitz algorithm.

commit f9fa55fdf49e4a5cb9d78529bc0183bf3f9a56f2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 29 14:52:08 2008 +0100

    Matrix.det() uses cancel()

    Previously results of division, when
    computing the determinant, weren't
    simplified, which made eg. charpoly()
    fail or return unreadable output.

commit a770e8f4c8af1d521be3af245513e60be4f1d113
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 29 13:02:52 2008 +0100

    Improved Poly init for univariate polynomials

    Now there is simplified syntax to initialize
    safely new univariate polynomial using a list:

     Poly([(c_n, exp_n), ..., (c_0, exp_0)], ...)

    Alternatively you can use old approach:

     Poly([(c_n, (exp_n,)), ..., (c_0, (exp_0,))], ...)

commit 5daa4ec44967c55a94f56ab6b9a8583cee632e4a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 29 12:58:38 2008 +0100

    Better usage of all(), any() in Poly class

commit 3424f723d2c5a91eedeb8513e4989a36de6a6207
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 29 12:57:30 2008 +0100

    Poly.coeff() returns const term if no args given

commit bdc0a7966a0dd279731b40b165fa31bac2065c9b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Mar 29 06:57:46 2008 +0100

    Refactored Poly.as_monic()

    Now returns only a monic polynomial,
    as receiving the leading coefficient
    is usually unimportant.

    Improved also usage of cancel() and,
    finally, added tests.

commit 366dec00afd565a5ab9c1623e1c5e81634cb6ab3
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 28 13:22:11 2008 +0100

    Added poly_pdiv and poly_resultant

    [1] poly_pdiv --> UV pseudo-division

    [2] poly_resultant --> new O(n**2) method

    [3] Improved poly_div:

     [3a] Added handling of trivial cases
     [3b] Better usage of cancel()

commit 5a9db8ced27eeff79090ad350633d676c0497d1e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 28 13:14:58 2008 +0100

    Improved Poly.{add,sub}_term

    [1] Works now with Poly((), x,y,z)

    [2] Added docstring to:

     [2a] kill_last_term
     [2b] kill_lead_term

    [3] Finally tests added.

commit 1d38261594322c34efd58c97658ba7abbcdfcfa1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 28 13:11:36 2008 +0100

    Added early-exit to monomial_div()

commit 5f9c9ac12167fb86e0c64bfa403474e765c1acfc
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 28 13:08:57 2008 +0100

    Improved Poly arithmetics

    [1] Added __abs__ method.

    [2] Poly __sub__ a monomial works.

    [3] Simplified __div__ and friends.

    [4] __mul__ cancel's coefficients.

    [5] Using is_Something, where can.

commit e59485b4d7f58db5d44f0aa1ebb8651fef863cc9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Mar 28 12:59:01 2008 +0100

    Improved Poly.subs, added Poly.evaluate

commit d10271969309a7402af52fec2bf89ad01a0d3be1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 26 22:34:34 2008 +0100

    Broken link to winpdb fixed.

commit a25ec4eed272ce4eeda5a8da960f8a5f53d89236
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Mar 27 00:23:30 2008 +0300

    doc: install spt-patches/ as well

    This directory contains neccesary attached patches for SPT. The patches are
    referenced in the tutorial.

commit 79cddeb2a547e3cbd62d966c0eca486dda9a4a93
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 26 21:18:10 2008 +0300

    doc: spt: SAGE does pathch reviews

commit 04a75d373484c20c8bc36203c38aebb7315e49ba
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 26 20:48:10 2008 +0300

    doc: spt: workaround sidebar related bug in sphinx

commit 312e430b4345fefb11c39f6eb9e2060ff068ca64
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 26 20:44:39 2008 +0300

    doc: SymPy Patches Tutorial: add printable version

commit 94e0cade2644bc95c874da207380636d9e644fec
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 26 20:44:14 2008 +0300

    .hgignore += doc/ build stuff

commit 9ab941614a22cf1f1d938f99812f9b8504710bf9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 26 18:17:07 2008 +0100

    Preliminary automatic API generation added.

    Usage
    =====

    $ cd doc
    $ make htmlapi
    $ epiphany _build/api/index.html

    But it doesn't look so nice, because SymPy docstrings don't use rst much. Also
    the generation script needs improving.

commit 0c742fe2ab9da1cd688b2b5decd9f9e59b26c516
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 26 18:15:53 2008 +0100

    Nice Sphinx based documentation added.

    Usage
    =====

    $ cd doc
    $ make html
    $ epiphany _build/html/index.html

commit 623cd0d9be89e1d899658b646aa76819f7015619
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 26 18:13:44 2008 +0100

    Use SymPy Development Team as the text in the license.

commit 4c6a08ab81a34a5c87fd1bd240b51463407ec34e
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 26 15:18:09 2008 +0300

    printer.py: fix typos

commit c7acdcd8cff6517ba677aa782b520c36913987a9
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 26 15:18:09 2008 +0300

    pretty: fix xobj for even height

    Previously pprint({x**2: 1}) was failing with cryptic exception

        ValueError: xobj: expect length = 2*k+1

    And this is a wrong approach.

    Things need to just work, so I've modified xobj to tweak evenly heighted
    objects somewhat. After all it looks good, so why not?

    In [1]: [x**2]
    Out[1]:
    ⎡ 2⎤
    ⎣x ⎦

    In [2]: (x**2,)
    Out[2]:
    ⎛ 2⎞
    ⎝x ⎠

    In [3]: {x**2: 1}
    Out[3]:
    ⎧ 2   ⎫
    ⎨x : 1⎬
    ⎩     ⎭

commit 7e9b6a38ee6374b1cbffa65958fad84d30ea14e0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 26 15:18:09 2008 +0300

    pprint: fix handling of old-style classes  (#755)

    We used to dispatch based on expr.__class__.__mro__, but when expr is an
    old-style class we failed, because old-style classes do not have __class__
    attribute.

    Let's just use type(expr).__mro__ which works in all cases.

commit 17dec571a308d8ff1f100c8d58e2c0dadc419b83
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Mar 24 01:19:27 2008 +0300

    slightly speedup Basic.__getattr__

    Timings
    -------

    s = 'is_integer'
    t = 'hello world'

    s[:3] == 'is_'          1.17 µs
    s.startswith('is_')     1.96 µs

    t[:3] == 'is_'          1.13 µs
    t.startswith('is_')     1.99 µs

commit 1d1fb49d99d3cdf2949398e2fccb159b575585c8
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Mar 24 00:17:14 2008 +0300

    add comments to Mul.flatten

commit b7f24773a722ae0e1ba91974dd287aeb819d7e02
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Mar 24 00:17:13 2008 +0300

    [2/2] let's use __slots__

    Now we've added __slots__ everywhere there is no need to have protective
    __setattr__ in Basic.

    In fact, previsously this Basic.__setattr__ was slowing down attribute
    assignment considerable, so let's remove it.

            %timeit
            x._mhash = None

    old:    13 µs
    new:     1 µs

commit 53271ea7105837601a9fde03c45619550ec6684d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Mar 24 00:17:12 2008 +0300

    [1/2] let's use __slots__

    I quote http://docs.python.org/ref/slots.html:

        By default, instances of both old and new-style classes have a dictionary
        for attribute storage. This wastes space for objects having very few
        instance variables. The space consumption can become acute when creating
        large numbers of instances.

    And we create a lot of objects...

    Also, as shown in [1], variables declared with slots are accessed ~ 2 times
    faster in presence of a lot of subclasses. For the reference here are timings:

    ===================================
     *** INSTANCE VAR ACCESS TIMES ***
    ===================================

         cls   cls(BB)      note

    E:   53.26 /  69.18     class var (just for reference -- can *not* be used)
    I:   65.34 /  77.14     __slots__
    F:   69.42 /  173.68    inst var
    G:   67.95 /  173.70    inst var (+ another inst vars)
    H:   68.27 /  173.89    inst var & empty __getattr__
    J:   50.11 /  175.43    inst var (old class)
    K:   50.25 /  181.62    __slots__ (old class)
    C:   200.44 /  209.32   @property
    D:   99.96 /  319.67    __getattr__ (cached)
    d:   648.30 /  883.24   __getattr__

    So let's use __slots__

    [1] http://landau.phys.spbu.ru/~kirr/cgi-bin/hg.cgi/py-fast-property/

commit be47610848f878ca95bb89295fc9ae3ef25c3889
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 16:06:47 2008 +0100

    The print ordering of Add has been improved.

    Now it looks like this:

    In [1]: sin(x).series(x, 0, 15)
    Out[1]:
         3     5     7       9        11          13
        x     x     x       x        x           x
    x - ── + ─── - ──── + ────── - ──────── + ────────── + O(x**15)
        6    120   5040   362880   39916800   6227020800

    In [2]: str(sin(x).series(x, 0, 15))
    Out[2]:
    x - 1/6*x**3 + (1/120)*x**5 - 1/5040*x**7 + (1/362880)*x**9 - 1/39916800*x**11

     + (1/6227020800)*x**13 + O(x**15)

    Before, it used to look like this:

    In [1]: sin(x).series(x, 0, 15)
    Out[1]:
        13         5                 9       7       11       3
       x          x                 x       x       x        x
    ────────── + ─── + O(x**15) + ────── - ──── - ──────── - ── + x
    6227020800   120              362880   5040   39916800   6

    In [2]: str(sin(x).series(x, 0, 15))
    Out[2]:
    x - 1/6*x**3 - 1/5040*x**7 - 1/39916800*x**11 + (1/120)*x**5 + (1/362880)*x**9

     + (1/6227020800)*x**13 + O(x**15)

commit d13d3e99e1bc445375f5259da8b8ffa5210acb94
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 13:35:55 2008 +0100

    Failing doctests were fixed. This was triggered by a different ordering.

commit 9b8824ea6ce44179ca32ba2bcf04e9cc1539dd52
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 13:30:54 2008 +0100

    Use faster sorting algorithm in Add.flatten.

commit c615e990db09aa44b3b201473ccc3fd77f3db4cd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 13:27:31 2008 +0100

    These tests has to be XFAILed, because there are some subtle bugs in them.

    Triggered by using a different canonical ordering.

commit be6481c01dd808dfae684655c1374d42d5ed3439
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 13:27:30 2008 +0100

    Make sure Add.str() always returns the canonical ordering.

commit 6c048cad6a1569ea15a6be1a6734a18ec0b9d63f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 13:27:29 2008 +0100

    Some tests were made more general to work with different canonical ordering.

commit a3b1bedb2aecac1c6a8d6563044a73d46b6a2009
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 13:02:47 2008 +0100

    subs_old_new and subs_dict renamed to _subs_old_new and _subs_dict.

    This is so that it's clear the interface to all of this is just .subs().

commit 1c890e56dc812b9a3a26203e08a71fc47f5ea090
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 22 12:49:24 2008 +0100

    Unifies subs and subs_dict (#485).

    Renames subs -> subs_old_new and creates a new method subs that dispatches the
    call to either subs_old_new or subs_dict, depending on the type of the
    argument.

    Also deletes old commented code, that is imho not relevant. It will always be
    in the history if needed.

commit 8e11463a06ddc957d87d072bf4f63b7ac140d0d2
Author: Fredrik <fredrik.johansson@gmail.com>
Date:   Fri Mar 21 12:31:12 2008 +0100

    Fix doctests that failed by the previous patch.

commit 39f4887c2cba0829be7be9af2590c962275aaa8e
Author: Fredrik <fredrik.johansson@gmail.com>
Date:   Fri Mar 21 12:30:51 2008 +0100

    Replace many uses of isinstance() with property checks.

commit 5a2010a6da4af01aa1770c1431f1cdf960a9e154
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 21 12:30:36 2008 +0100

    Removing string from tests for sqrt_denest, as this is not a valid input.

commit cd6dfb2ad9ba1da453d6ec36d3b1e0efa189fc43
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Mar 21 12:30:05 2008 +0100

    min_ and max_ functions fixed and tests for them written.

commit a12b90e27774cc4bec48a42698b02a099144a058
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 20 09:51:14 2008 +0100

    isympy.1 updated from xml

commit 5daf163b6f174584483632b7feb3b1ac809ab9aa
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 20 08:34:23 2008 +0100

    Implemented MV Horner scheme

commit cde36dd8035bac5d744697db722d8724f2fe8f3c
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Mar 20 08:27:55 2008 +0100

    Improved Poly initialization

    [1] p = Poly(x*y + 1, x, y)
        q = Poly(p, x, y, t)

        is now much faster.

    [2] Added unify() method.

    [3] __add__, __sub__ and __mul__ can work
        with polynomials that have distinct
        symbol sets.

commit b21258565cd4f5bf6219bbcbdc8bd5b05aff046b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Mar 18 08:04:55 2008 +0100

    Removed monomials() from heurisch, fixed recursive imports in polys module (integrate() and cancel())

commit 2d92aa917ecf8c70b35eceb7c10498796c08c9c9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Mar 17 18:55:11 2008 +0100

    Improved docstrings in poly module

commit b004d1e8182aa920e1622f318007af5208caaf01
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 16 10:09:01 2008 +0100

    Another approach to polynomials

commit 45e6208ec036103504a89851ae864ce78b596688
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 16 10:09:01 2008 +0100

    __nonzero__ returns True/False directly (#583) (#675) (#741)

    Tests if 'self' is an instance of Zero class.

    This should be understand as an idiom:

        [1] bool(x) <=> bool(x is not S.Zero)

        [2] bool(not x) <=> bool(x is S.Zero)

    Allowing definition of __nonzero__ method is important in
    algorithms where uniform handling of int, long values and
    and sympy expressions is required.

commit d091c38ee0ae477d8cf959ea100bede1c0dae12d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Mar 16 10:09:01 2008 +0100

    Fix typos in basic.py & symbol.py

commit b2b416c3f18668e577ab519205508e9f32bd6c51
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 12 12:15:16 2008 +0100

    Fixes pretty_symbology.py to work if sys.stdout.encoding doesn't exist (#737).

commit 77f2f780136d9d319d65579eee609405a0bbe999
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Wed Mar 12 08:29:38 2008 +0100

    Make cacheit propagate docstrings

    [1] Propagate __doc__
    [2] Propagate __name__

    NOTE: The same has to be done
          for properties.

commit 095e01ac6cbc7a46f64549ea23c3c4283ac02cd5
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 12 09:36:31 2008 +0300

    [5/5] __eq__/__ne__ returns True/False directly  (#135)

    Fix wrong test. Consider (even old behaviour):

    In [1]: Real('4') == Integer(4)
    Out[1]: True

    In [2]: x == x
    Out[2]: x = x

    In [3]: bool x == x
    Out[3]: True


    so if a==b and c==d then we expect a*c == b*d, right?

    <old behaviour>
    In [4]: Real('4') * x == Integer(4) * x
    Out[4]: 4*x = 4*x

    In [5]: bool _
    Out[5]: False

    This is at least surprising.

    <new behaviour>
    In [1]: Real('4') * x == Integer(4) * x
    Out[1]: True


    So we fix related test.

commit 24300dd6bde0b53900e3e246b3f281386e2f64dd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 12 09:36:31 2008 +0300

    [4/5] __eq__/__ne__ returns True/False directly  (#135)

    Use Eq where we need an equation

commit 44d3648678e783c0a3a1e2953674d7240d99ccd7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 12 09:36:30 2008 +0300

    [3/5] __eq__/__ne__ returns True/False directly  (#135)

    Eq: handy wrapper around Relational

commit 40ba37e5cdba43cd26516cc9ef2e34c5d12dfda9
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 12 09:36:30 2008 +0300

    [2/5] __eq__/__ne__ returns True/False directly  (#135)

    Numbers: there is no need to fallback on super.__eq__/__ne__
    because we already know the answer.

commit 7ded0a6f86ff06a875d3e4ff2932bcb20383347f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 12 09:36:30 2008 +0300

    [1/5] __eq__/__ne__ returns True/False directly  (#135)

    Previously we used to create Relational instances in this methods, but this
    comes with performance penalty. And since dict uses __eq__ and __ne__ for hash
    collision resolution this is very important.

    So let's return True/False directly. We'll adapt the rest of SymPy in the
    following patches. For you to stay tuned, here are timings we'll achieve in the
    end.

    Timings
    -------
            bool(x==y) integrate(x*sin(x), x) fem_test  py.test      py.test
                                              fem_test  sympy/core/  sympy/
    old:    ~200us         1.90s                5.33s     12.4s       370s
    new:     ~18us         1.33s                4.65s     11.6s       295s

    speedup: >1000%        42%                  14%       6%          25%

commit 60cbd9b4ff49cc5af170ea9f694470fa19d6eda6
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Mar 12 09:35:06 2008 +0300

    Relational: fix for '!=' and .subs

commit c4334ce5bb5e5dbc1ebccb9bab4798d7df7c252b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 12 00:00:11 2008 +0100

    Robert added to credits

commit 11c895f8891cd39896f9a845ef303b2085791054
Author: James Aspnes <aspnes@cs.yale.edu>
Date:   Tue Mar 11 23:53:55 2008 +0100

    add bulk tests for rsolve_poly and fix del C[c] error

commit c7e3854db75ff1fa5e65a005340118486a7d1594
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Mar 11 23:53:58 2008 +0300

    James added to credits

commit f92615d7fe9cf92c92a5d6fcf0dd430aec8f2eb4
Author: James Aspnes <aspnes@cs.yale.edu>
Date:   Tue Mar 11 11:51:42 2008 -0400

    add tests for inhomogeneous input to rsolve_hyper and fix missing .args

commit c715f5a2e04dd5fd0e1f1a52d425c5d04b0e9f0a
Merge: 33a5815 fe5ebee
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Mar 11 17:23:48 2008 +0300

    I'm guilty again :(

commit 33a58158c89002ec383d66055a1480c431218a84
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Mar 11 17:20:35 2008 +0300

    Test for x*unknown -> unknown.__rmul__ is called  (#677)

    This was fixed sometime ago, but's let write a test for it so we'll be sure it
    works.

commit 9993d866b4d954bc02e2313a7f4bfc1f371a4773
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Mar 11 17:20:35 2008 +0300

    Remove unneeded lines that try to propagate __doc__ (#501)

    - it does not work as written.
    - if needed one should do it this way:

      class C(B):

          def matches(...):
              ...

          matches.__doc__ = B.matches.__doc__

      or *better*

    - in metaclass that will propagate B.matches.__doc__ into C.matches.__doc__ if
      no documentation is provided.

commit fe5ebee8a79ce4496f0aec8d33c13e8c2b7c5f3f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 6 21:51:11 2008 +0100

    Start of the 0.5.14 devel cycle

commit aeee3e50b0e2e334340563e85931e65380607af1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 6 21:46:03 2008 +0100

    Added tag sympy-0.5.13 for changeset 8c19f52ad1cd

commit 59c43aae81347becdfe35fcb4712f9eaa42290e8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 6 21:45:47 2008 +0100

    v0.5.13

commit a8487e4744ea9114e0c5f0949615e5bffe5be019
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 6 21:31:29 2008 +0100

    Doctest fixed not to use repr(dict)  (#732).

commit 38c21a51b63731242ba27104e6acbcb097f55787
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 6 21:15:46 2008 +0100

    Output of floating point numbers in series/acceleration.py fixed (#732).

commit ed89342480ff5428d8ed23fe4a2866ffc3b24fef
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Mar 6 20:45:46 2008 +0100

    Nice html output implemented (#717).

    Usage:

    $ cd doc/users_guide
    $ ./generate.py

commit 60f60e9338ec376f7039f2b9f083c030befdf975
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Wed Mar 5 00:13:34 2008 -0600

    fix asin, acos, atan canonize code (725)

    tests added for these as well

commit 24a794c7c151f4ccab208a9c48c97657dda646e0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Mar 5 07:04:53 2008 +0100

    A little polishing of the Pow._eval_evalf().

commit fc4be01c81c1163c6115b0f3b059191ced707ec0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Mar 4 19:10:26 2008 +0100

    One more test added for the _sympy_ method and sympify.

commit 173bdb3418adeceae1fd6aa8c40d79fd1fe2f6f9
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Fri Feb 1 15:47:31 2008 +0100

    Added test for issue #604

commit 053113b0e37527a26d564f2ffd5a84b5866a0336
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Thu Jan 31 23:34:02 2008 +0100

    Improved .evalf() to deal better with complex numbers

commit fa2649e46a6bfec58cd2a323396977cfbc5107f8
Author: Robert Kern <robert.kern@gmail.com>
Date:   Tue Mar 4 18:07:12 2008 +0100

    Fixes the random seed bug (#729).

commit ecb8dba46384de6ec65da819ba2b3d34d97a8b6d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 1 14:37:27 2008 +0100

    Fixed the _sage_() methods to use .args[]

commit 7b4f1c27a42d7a64c4b8091755d44a6a509937bd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Mar 1 01:31:16 2008 +0300

    assumptions: cache 'unknown' assumptions as well

    Unknown assumptions usually take the highest time to evaluate, and we already
    cache known assumptions, so there is no reason why not to cache unknowns.

    This speed up things a bit:

    x = Symbol('x')

            timeit          py.test
            x.is_positive   sympy/core/

    old:    115 µs          13.8s
    new:     21 µs          12.8s

commit 0e417b93694fb395f7b847b674378212ab73fc5e
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Mar 1 01:31:15 2008 +0300

    sympify: add support for objects that implement __int__  (#722)

    Also we need to be careful not to call __int__ or _sympy_ on classes, e.g.

    class C:

        def _sympy_(self):
            return <smth>


    Previously sympify(C) would try to call C._int_() which is not what we want.

    based on patch by Ondrej Certik

commit 7a246ac2378ee35cff0087ecdd2a2a58ac4ea305
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 1 00:31:35 2008 +0300

    examples: add "./all" script to run all the examples  (#698)

    More work is needed to turn examples into one more testusuite, but let's start
    from something.

commit fcda769c267493bb9e088e10f83b61f71ca19a16
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 1 00:31:35 2008 +0300

    Example on Plot(<geometry objects>)  (#682)

commit d3b131dc31cd0a98a60649b06bc007cae36e4b29
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Mar 1 00:31:35 2008 +0300

    implement expand()  (#676)

commit 1bd512f74bae2dee0ebc91a41a53702acabcad60
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    Pow.expand(complex=True) -- use atan2 to obtain base argument   (#616)

    Previously we used atan(im/re) and this is wrong e.g. for (-1-I)

commit 7f154a31c7e60dd66ff645c9c87b4958a682f582
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    Add tests for oo*<smth> == oo  (#639)

    This now works because we fixed (pi-1).is_positive

commit d7f1959b2fd177c2bac85a1a430fab2fdb638bd2
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    .is_positive, .is_negative -- fall back to cmp(.evalf(),0) when nothing else helps & object is comparable (#721)

commit 094455ec26a8a4e7cfdb5c293fa315dc31c4c238
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    Fix .is_comparable for functions

commit 40f6a6b56440119b31abcfd4391ed7b2ce35c5fd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    Fix thinko in Pow._eval_is_real

commit 95763dde7af47f233eab2fc872f04b7c22e7119b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    Fix is_nni & is_pi assumption aliases

commit 2f1e3fa82e1d0137cfcfb0354a24f085628766d0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    [2/2] Add, Mul, Pow: tests for is_comparable

    Unfortunately, previous patch (just new tests) somehow triggers caching bug, so
    I'm XFAIL'ing what is affected.

    I'm still investigating what the problem is, but let's merge this for now.

commit 6a9b045d1123cb95ee13119f6b9863f4c86feada
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    [1/2] Add, Mul, Pow: tests for is_comparable

    This patch adds mentioned tests

commit 0c3fa3f62d60a907d78267c524e7952a5e8655fd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 28 01:45:02 2008 +0300

    Fix code typo in Pow._eval_is_comparable

commit 96b0cb63e57690375dc659762cbb713eea64cde4
Author: Fredrik <fredrik.johansson@gmail.com>
Date:   Sat Feb 23 14:32:41 2008 +0100

    make integer_nthroot more efficient in exceptional cases

commit b0f2dda75c136661cb2dbc2ae4acc056e0529a56
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Feb 24 12:38:53 2008 +0300

    oops, reorder terms in doctests to match actual output.

    This is probably triggered by my recent Symbol changes.

commit cb4b8771d1398551014c850ba6d08fd2d019c085
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 21:38:55 2008 +0300

    oops, shame on me!

commit 12b052368418e37a364dc26ff9a0cfff457e1bbf
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 20:46:39 2008 +0300

    risch: systematically reuse dummies

    This is because uncached match/subs are slow -- see recent Ylm commit
    (5056059c2d74) for further explanations.

    from sympy.integrals.risch import heurisch

            %time  (1st run)                %time  (starting from 2nd run)
            heurisch(x*sin(x), x)           heurisch(x*sin(x), x)

    old:     1.97 s                          1.85 s
    new:     1.88 s                          0.83 s


    Besides this change speedups testing:

            py.test sympy/integrals

    old:     94 s
    new:     74 s

commit 3243d475d80d037ff4b901257ad8f284b04f3d57
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 20:46:38 2008 +0300

    [2/2] @cacheit Wild

    Add names to Wild's all over the place

commit 445dd8b90a8b252612649109827662e27da9e059
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 20:46:37 2008 +0300

    [1/2] @cacheit Wild

    We use Wilds a lot internally, and each new Wild creates another new object.

    Wilds are usually then put into match or subs, and since match and subs are
    cached, we have performance penalty:

    caching only slows things down in this case  -- we just have overheads (one
    more call, always store the result in the cache) but never use the cache, so
    the cache just blows, caching slows things down and we get nothing back.


    So let's just cache Wilds (and btw disallow Wild())

    If we are running under SYMPY_USE_CACHE=no we are not loosing anything, but if
    we are running with cache turned on, we gain significant speedup:

            %time integrate(x*sin(x), x)    py.test
              1st run / other runs          sympy/

    old:      2.26s     2.18s               454s
    new:      2.01s     1.89s               404s

commit 5e5289704325d885324308b7b0e45510307fdb8f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 20:46:36 2008 +0300

    @cacheit Symbol

    This have positive effect on performance

        time ./examples/fem_test.py

    old:    5.82s
    new:    5.57s

    But what is more important, is that in the following patches we are going to
    cache Wilds, and this will affect performance significantly.

commit c4fa9b47b06e7587bba7e78e225ead4d2b3fc61a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 20:46:35 2008 +0300

    [2/2] is_dummy is not an assumption anymore

    Previous patch trigerred known bug in subs_dict, so let's
    XFAIL trim tests failing due to #666

commit 8d74c89dc025d134b1dfa138c0cd5f307001d3ce
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 20:46:33 2008 +0300

    [1/2] is_dummy is not an assumption anymore

    There is no in-tree users of is_dummy, and before this patch series, is_dummy
    was only used in Symbol._hashable_content (and was slowing it down btw).

    So let's just kill is_dummy.

commit a1e53df85477cc8ecabb47171b002ab38ab965f7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 20:46:01 2008 +0300

    Symbol: split into Symbol & Dummy for efficiency

    Let's consider a situation when we create a lot of dummies.

    When hash(x) is called, we always see x.is_dummy is true or false.

    accessing .is_dummy is expensive (it goes through assumptions code), and always
    storing .is_dummy as instance attribute adds it's own overhead.

    Why not to split Symbol into Symbol & Dummy and implement _hashable_content
    differently, and have .is_dummy as class attribute?

    This positively affects performance:

        time ./examples/fem_test.py

    old:    6.03s
    new:    5.83s

commit 2f5c53aa754a47ff0432ea8fe144054e23dc3592
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 15:37:28 2008 +0300

    limits: make direct @debug faster (minor)

    previously we addad additional overhead even in non-debug case.

    from sympy.series.limits import mrv

            %timeit mrv(x,x)

    old:    229 µs
    new:    226 µs

commit 07464d035192fc54356c958d1f0fe8de918cb6a9
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 15:37:28 2008 +0300

    ArithMeths.__neg__: explicitly call Mul for efficiency

            %timeit a=-x

    old:    64.3 µs
    new:    24.5 µs

commit 40234424e5a60fa29e0f597b944e2b073d60b025
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 15:37:28 2008 +0300

    Integer: implement __neg__ & __abs__ for efficiency

    from __builtin__ import abs as abs_

    i = Integer(3)

            %timeit a=-i    %timeit abs_(i)

    old:    22.5 µs         23.9 µs
    new:     9.4 µs          6.3 µs

commit c71c61f2702fab7c5f464b2f2360df4aaea589a3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 15:37:28 2008 +0300

    integer_nthroot: don't import math.log at runtime

    from sympy.core.power import integer_nthroot

        %timeit integer_nthroot(100, 2)

    old:    49.5us
    new:    29.5us

commit f51ddfd2ccc7953b23d822f0e0802d164cd19f0a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 23 15:37:28 2008 +0300

    core: unroll rest cyclic imports

    this affects e.g.

        %timeit x*y

    old:  27.3 µs
    new:  26.8 µs

commit edfe72f611f62b3a84c9e8c89d3978aa5330c684
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Feb 21 22:55:52 2008 +0300

    Beginnigs of SymPy User's Guide.

    This is based on Ondrej work. I just translated the document into
    ReStructuredText.

commit 4a267a8b3a9b15e1e5337b60e64f32a5d834e251
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 17 11:07:38 2008 +0100

    docstring added for Ellipse.tangent_line()

commit f45832788d4f42c5d3e68f959e76e108892dd97d
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Sun Feb 17 11:02:09 2008 +0100

    Fixed the bug in tangent_line of ellipse (issue #517).

commit 9a8b7bcc9ba3b9c1770b3fd35923ed1dbed52c6a
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Sun Feb 17 10:35:28 2008 +0100

    patches in atan2 and arg

    atan2 reimplemented using sympified values
    arg(z) returns atan2 only if z is a number
    added tests for arg

commit a039cbfdbce6a68aa17c933639f649bdb4cb6af3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Feb 17 11:06:14 2008 +0300

    limits: speedup subexp (reuse dummy)

            %timeit
            limit(1/x, x, oo)

    old:    27.1 ms
    new:    25.8 ms

commit a767ec575bf9c17439386b412a8c81bdf7b94fe4
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Feb 17 11:04:09 2008 +0300

    trigintegrate: speedup (reuse pattern & dummy)

    from sympy.integrals.trigonometry import trigintegrate

            %timeit                         %timeit
            trigintegrate(sin(x)**3, x)     integrate(x**2, x)  (-> None)

    old:    53.3 ms                         21.7 ms
    new:    7.64 ms                          546 µs

    speedup  ~ 7x                            ~ 40x

commit 2c158333cf1e36763df6c2c19ade34212c8b9fcc
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Feb 17 11:01:08 2008 +0300

    Ylm: 10x speedup

    our subs is cached (when not cached it is slooow), so when we create
    (different) dummies at runtime we effectivly block caching.


    th = Symbol('theta')
    ph = Symbol('phi')

             %timeit
          Ylm(1,1,th,ph)

    old:     13.2ms
    new:     786 µs

commit 5e744c85094ae19085c31d02ef1296a80a59e6a1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Feb 17 00:47:13 2008 +0300

    test_doc: always set pprint into ascii mode  (#706)

    so our examples always work independently on whether unicode environment is
    available or not.

commit 57dbd6eb5f61e0daaebe5dbf1fd93da5283171cf
Author: Fredrik <fredrik.johansson@gmail.com>
Date:   Sat Feb 16 09:50:53 2008 +0100

    Generalized recognition of geometric sums (#709).

commit 37d1fdb046b9b8a102a402149abe26544858e1cb
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 16 00:33:47 2008 +0300

    pprint: fix how unicode awareness of sys.stdout is detected  (#708)

    Previously we unconditionally tried to encode text with unicode characters to
    sys.stdout.encoding, but sys.stdout.encoding can be e.g. None if the program is
    redirected through a pipe.


    This is straightforward fix for the problem.

commit 15376aa916317d3328d86db34161573a914b7414
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Fri Feb 15 12:36:21 2008 +0100

    Refactored _eval_expand_basic()

    This patch mainly improves expand speed
    when there is nothing to do for it, eg:

    p = 3*x**2*y*z**7+7*x*y*z**2+4*x+x*y**4

    (old): %timeit p.expand()
    100 loops, best of 3: 5.64 ms per loop

    (new): %timeit p.expand()
    1000 loops, best of 3: 296 µs per loop

    (caching was 'off' during measurement)

    This behavior will be very useful in new
    Polynomial class. Previously expanding
    was a bottleneck.

commit 9bceafa15214310038bcc6225030c7a54589a0ee
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Feb 14 21:41:34 2008 +0100

    Implemented Basic.has_{any,all}_symbols

    We use Basic.has mostly to search for symbols.
    However has() is very slow, so I implemented
    its optimized version, to search particulary
    for symbols. This gives 5x-30x speedup
    (depending on input).

commit b8e7e737df96cd6ff15619c086f23be9418bd9f4
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Feb 13 23:02:08 2008 +0100

    More documentation added to Add.flatten()

commit f491d6f13a8774afeefc3da737420a8e748b5213
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Feb 13 22:14:36 2008 +0100

    Fix tests to be ordering (in the Add class) neutral.

    This patch makes all tests not depending on the way Add stores it's terms
    internally and also how str() then outputs the result. It probably doesn't
    cover 100% of cases, but it's a notable improvement over the past.

    This patch also divides some longer test functions into more smaller ones,
    because some of them break easily when we change the terms ordering in Add,
    so that it's easy to XFAIL them later if we have to. Also it's good for
    debugging purposes. Clearly those tests are special in some way, so they should
    imho be in their own test functions.

commit fe66569fcf13e5b2384c2d9ee1fef43aa6f1c77d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Feb 13 22:14:34 2008 +0100

    A few modifications to make tests more robust.

    A test function in test_arit.py was renamed, because py.test cannot pick up
    a function (using the -k switch) which has the same name as the test file name.

    Tests in test_match.py were refactored, because some of them were ambiguous -
    they allowed two different correct results. Now all tests result should be
    correct and unique.

commit a7dbcbee56bf98fccfd154aa95d33fc0e530c035
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Feb 13 22:14:32 2008 +0100

    Fixes a docstring in Add, plus small refactoring.

commit 1443fab996fbb50b1d0cca11fdb75c10c3215550
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Feb 12 18:54:45 2008 +0300

    pretty: add support for {}, prettify ascii output for [] & ()

    btw: I think we need to merge test_pretty.py & test_pretty_unicode.py

commit e440f4724abdbdb80b35fd48c8b1438bfbc170b5
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Feb 12 08:22:15 2008 +0300

    fix for pretty([])  (#699)

commit 2ebb6cc7698b78124665f89552c65dd982463c3c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Feb 11 11:54:44 2008 +0300

    [5/5] cache cleanup, hadle only immutable objects

    comment out cache_it_nondummy in symbol.py

    it is already not used, and we'll decide what to do with it later, when we'll
    consider what to do with caching of symbols.

commit 78b91affd7f32544db3f54590f190e2fdc0cb6ca
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Feb 11 11:54:43 2008 +0300

    [4/5] cache cleanup, hadle only immutable objects

    cache_it_immutable -> cacheit all over the place

commit 9b5e123a37c70bcc4047a05e3d7335c9000f98f7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Feb 11 11:54:42 2008 +0300

    [3/5] cache cleanup, hadle only immutable objects

    Now we've killed cacheit_fast, we have the only one usable cache_it_immutable,
    and let's rename it to just `cacheit`

    This patch touches only cache.py internals. I'll convert the rest of sympy in
    the following commit.

commit 4df15dfc80d4c90ca6d91541007479eee07cedf6
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Feb 11 11:54:41 2008 +0300

    [2/5] cache cleanup, hadle only immutable objects

    Now we've eliminated all usage of cache_it, let's kill to what it pointed --
    cache_it_fast.

    Plus kill mycopy (deep-coping)

    Correctnes of the whole thing was verified with

        SYMPY_USE_CACHE=debug py.test sympy/core/

    and

        SYMPY_USE_CACHE=debug py.test sympy/


    but in the second check cache_it_debug was modified to only check that the
    result is immutable. Otherwise we run out of 1G of memory.

commit fa948e8debab24dd3cb2055c3ff6a79f9255c078
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Feb 11 11:54:40 2008 +0300

    [1/5] cache cleanup, hadle only immutable objects

    don't use cache_it, always use cache_it_immutable

    cache_it was created to cache mutable results, but there is no reason for it.

    first, to ensure cache itself is kept unmodified from outside, each time return
    value is deep-copied and this adds overhead.

    second, we have no reason to cache mutable instances -- what we almost always
    have is immutable, so why have additional unneccesary overhead (deep copy)?

    Very infrequent cache_it users (which were returning mutable things, e.g
    .as_coeff_factors) were rewrittend to return immutable objects. The performance
    may be affected only positively from this since we avoid deep-copy, and
    previously lists were used only to do l.insert(0, smth), and the same effect
    can be achieved with tuple+tuple.

commit 326333f4a58b497c5004acf4fbb828e61403a104
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Feb 10 22:15:01 2008 +0100

    Partial fix to #588 in trim()

commit 1d082db6835674db98c273201f264bd69005f7d8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 10 19:53:24 2008 +0100

    Example in README updated to the latest sympy.

commit bd62974134c590e27e6e7704972fdf70168df4f3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Feb 10 18:34:04 2008 +0300

    pprint: use unicode by default if available (#696)

    And with `pprint_use_unicode` users can always directly force pprint to use
    ascii:

    In [1]: Integral(f(x),x)
    Out[1]:
    ⌠
    ⎮ f(x) dx
    ⌡

    In [2]: pprint_use_unicode(False)
    Out[2]: True

    In [3]: Integral(f(x),x)
    Out[3]:
      /
     |
     | f(x) dx
     |
    /

commit 1aaed33d4a7afa64bf61a4321d0bde54237d4f54
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Feb 10 14:41:22 2008 +0100

    Implemented trim(), improved cancel().

    trim() maps all non-atomic expressions, ie. functions,
    derivatives and more complex objects, to symbols and
    removes common factors from numerator and denominator
    using cancel().

    cancel() now expands both numerator and denominator.

    This fixes issues #625, #686, #522.

    When gcd() will be fixed, trim() will be merged
    with simplify().

commit 9ff21449e49705baad1106514ed2831d5470f0ae
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 10 13:39:30 2008 +0100

    Use pprint() for printing in isympy, not repr(). (#659)

    Now this works:

    In [1]: solve(x**2 == y, x)
    Out[1]:
    ⎡   ⎽⎽⎽    ⎽⎽⎽⎤
    ⎣-╲╱ y , ╲╱ y ⎦

    In [2]: e = [x**2, 1/x, x, y, sin(x)**2/cos(y)**2]

    In [3]: e
    Out[3]:
    ⎡                2   ⎤
    ⎢ 2  1        sin (x)⎥
    ⎢x , ─, x, y, ───────⎥
    ⎢    x           2   ⎥
    ⎣             cos (y)⎦

commit de9403287ba97429160b6e2ebf00bb52e542928b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 10 11:53:32 2008 +0100

    Docstring of Polynomial.coeff() polished.

commit 7d9a2986dfbb8f970f6414b25045a01641ec599c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 10 11:45:59 2008 +0100

    A test was added for a .coeff() of a multivariate polynomial.

commit 9eb26d5dda7d3c07eb5d036cb8a747c60a43292b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Feb 10 00:08:23 2008 +0100

    Implements Polynomial.coeff() for returning coefficients of the poly (#691).

commit 29b5aa37cd14055c65d78908ed0d3ac9f597ee96
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Fri Feb 8 22:36:06 2008 -0600

    implemented atan2 in trigonometric.py and added some tests for it
    atan2 used for the argument of a complex number

commit cae417a31c9074ee335968af0c6e5ef6170af530
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Sun Feb 10 11:20:44 2008 +0100

    Plot geometric objects (#682).

    Added support for plot to recognize geometric objects and plot them using the
    arbitrary_point and plot_interval methods. Polygon support is not included in
    this patch.

    Example:

    In [1]: c1 = Circle(Point(0,0), 1)

    In [2]: Plot(c1)
    Out[2]: [0]: cos(t), sin(t), 'mode=parametric'

    In [3]: p = Plot()

    In [4]: p[0] = c1

    In [5]: radius = Segment(c1.center, c1.random_point())

    In [6]: p[1] = radius

    In [7]: p
    Out[7]:
    [0]: cos(t), sin(t), 'mode=parametric'
    [1]: t*cos(1.546086215036205357975518382), t*sin(1.546086215036205357975518382), 'mode=parametric'

commit 4e3f8aa91f6b6dd698021ce431844fd32a6fb002
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Feb 10 01:06:23 2008 +0100

    Fix for the issue #666.

commit 24ec0e2a749c7fe6f72e605de0676ce870f7fea2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 9 21:51:42 2008 +0100

    Added hints to heurisch()

commit dbc003683ac99db9ec099bb05b815162b51847c1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Feb 9 20:12:17 2008 +0100

    Fixed #685

commit 6b98c1b09b245df367cdaf1a35b9084eee0d79a2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 9 11:38:06 2008 +0100

    Removes a dirty hack from ArithMeths.__mul__().

    This was needed before, but now sympify can handle this problem, all tests
    pass, so let's remove the garbage.

    Btw it speeds up x*y:

          %timeit
           x * y

    old:    80 µs
    new:    40 µs

commit e48447a2d10939db0535db36c1191f2f97439959
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:27 2008 +0300

    ArithMeths: directly implement __div__ & __rdiv__

    The timings justify it:

            %timeit  %timeit
             x / y    2 / y

    old:    93.1 µs  129   µs
    new:    47.8 µs   53.5 µs

commit 184684e6d7fd17d9c94c19e011416c5b347e208e
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:27 2008 +0300

    numbers: implement direct __abs__ & __neg__ for singletons where appropriate

    from operator import abs as abs_


            %timeit     %timeit     %timeit     ...
            abs_(pi)    -S.One        -oo

    old:    36.1 µs     23.2 µs     22.2 µs
    new:     2.7 µs      2.6 µs      2.4 µs

commit 7b5ca820229b833b7bf4d7c4f48a25261d3a90bf
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:27 2008 +0300

    Integer: use own arithmetic & relational methods

    It seems in order to be fast we need fast integers and rationals. I just
    directly coded all arithmetic and relational (except __cmp__) methods in
    Integer.

    This gains a bit of speedup:

    Timing
    ------

    i = Integer(3)
    j = Integer(4)
    q = Rational(3,4)

         %timeit  %timeit  %timeit %timeit  %timeit  %timeit %timeit  %timeit
          i + 1    i + j    i + q   i * 4    i * j    i * q   i == 3   i == q

    old: 122 µs  113 µs    114 µs  48.1 µs  44.3 µs  44.6 µs 77.2 µs  65.4 µs
    new:  12.8µs  18.3µs   124 µs  12.9 µs  18.4 µs  55.1 µs  7.5 µs  76.0 µs


    x = Symbol('x')
    y = Symbol('y')

         %timeit  %timeit  %timeit
         x == i   x + i    x + y (for reference only)

    old: 133 µs   28.6 µs   27 µs
    new: 132 µs   28.4 µs   -//-


    P.S. from the timings it can be seen that out Rational is *slow* -- we need to
    do something about it.

commit be7f58bfab412743ffdff170ea7b099504e5dd6f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:27 2008 +0300

    Integer: use own cache

    As was shown with gcd Memoizer is slow, and there were a lot of slow-path in
    the old Integer.__new__

    Timings:


            %timeit     %timeit
            Integer(1)  Integer(2)

    old:    12 µs       12 µs
    new:    3.3 µs      3.3 µs

commit dcdb435cfa3c8642fb38fdb7c3e282422faa9707
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:27 2008 +0300

    numbers: speedup gcd

    I think there is no reason to use @Memoizer for (almost) internal numbers.gcd .
    In my view Memoizer is slow because at least it checks its args.

    I propose we use direct approach in performance critical things -- direct cache
    without typechecks. We can always wrap such caching with a decorator if we
    find a way not to degrade performance.

    Timing
    ------

    from sympy.core.numbers import gcd as gcd_

          %timeit    %timeit      %timeit
          gcd_(1,1)  gcd_(23,17)  gcd_(60,3600)

    old:  10.7 µs    10.7 µs      10.7 µs
    new:  3.07 µs    3.07 µs      3.24 µs

commit 6e7ccdd231f5e69ed7d06149b3fbc1a71193f5e3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:27 2008 +0300

    [7/7] _sympifyit -- fast decorator to _sympify(arg)

    Add, Mul, Pow, etc -- convert the rest of the core at least X.__new__ to use
    _sympify. This is needed so

      x + '1'
      x * '1'
      etc...

    all raises (#677).

commit 515c74cdee646556fdf2c63326865789a0709cfa
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:27 2008 +0300

    [6/7] _sympifyit -- fast decorator to _sympify(arg)

    Now we've switched Real to `_sympify`, so Real does not accept strings in
    __eq__ and __add__.

    This was discussed in #247, so I revert relevant test.

commit 6f91cb85f83efa0e89146c1427760c501f4d795f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    [5/7] _sympifyit -- fast decorator to _sympify(arg)

    Switch numbers.py to `_sympifyit` & `_sympify`.

    I have to say that numbers need a lot of work and a lot can be potentially
    optimezed there. This change only uses `_sympify` instead of `sympify` and
    wraps Rational __add__ and __mul__ with `_sympifyit`

    Timings
    -------

    r = Rational(3,4)
    q = Rational(5,4)

            %timeit  %timeit
             r + 1    r + q

    old:     138 µs   112 µs
    new:     131 µs   112 µs

    As we can see Rationals are *slow* -- this should be the task for future
    improvements.

commit 85ea3081fecb64c73e47486ba99ed6ba0a482b8c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    [4/7] _sympifyit -- fast decorator to _sympify(arg)

    Switch RelMeths to `_sympifyit`

    RelMeths are still slow, and will be one of the next areas for speedup.
    Nevertheless this change is needed for consistency.

    Timings
    -------

            %timeit        %timeit
             x == y     bool(x == y)

    old:     132 µs        255 µs
    new:     131 µs        254 µs

commit dd1b0bcce19b4acdfdfaf97aa12d375fbe30ac6f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    [3/7] _sympifyit -- fast decorator to _sympify(arg)

    Now we've switched to `_sympifyit` in ArithMeths, __add__ does not accept
    strings. As discussed in #247 we should use _sympy_ method instead to integrate
    with SymPy say for SAGE.

    This patch rewrites test_SAGE to just do that.

commit de1fb823d6905f743fdb1a062a8970bd74402c63
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    [2/7] _sympifyit -- fast decorator to _sympify(arg)

    Switch ArithMeths to `_sympifyit`

    Timings
    -------

            %timeit   %timeit   %timeit   %timeit
             x + y     x + 1     1 + x     x + 0.5

    old:     30.4 µs   53.6 µs   83 µs     57.6 µs
    new:     27.1 µs   44.1 µs   44.1 µs   23.2 µs

commit 6b68328dde8cd5217b67d92c0edddc75fd8f0e90
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    [1/7] _sympifyit -- fast decorator to _sympify(arg)

    This is `_sympify` -- shorter version of `sympify` as discussed in (#677).
    `_sympify` accepts only Basic, int/long/float/Decimal/complex and instances with
    ._sympy_ . Everithing else is reported as an error, so

      x + '1'

    raises.

    Also, included is smart decorator `_sympifyit`. It's task is to get all the
    tedious work to inject _sympifyit into the process and not degrate performance.

    We'll switch ArithMeths and RelMeths to it in the next commits.

    Also, in the end of this patch series, there is a big surprise that (again)
    speeds up `_sympifyit`. Stay tuned.

commit db33f2d1e14c48cd2c73ae3e3c835fac54f39224
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    sympify: lower bool priority, raise int priority

    Why was it necceessary to have exceptional case with high priority and slowdown
    sympify(1)?

            %timeit sympify(1)

    old:    23.9 µs
    new:    21.5 µs

commit 89f174f2261b512b51297e69beaa435dcdbf90f7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    sympify: actually raise SympifyError on error (we used to raise ValueError)

commit 9133fc3d78fbec9d6f5dbf38446b55bdcd9b5132
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    sympify: move to standalone module (sympy/core/sympify.py)

    We are going to tweak sympify heavily, and it seems it would be better to keep
    things structured.

    This was discussed in #667

commit 767b575f0fbcc285f35b3a18d01925c13e1da5ff
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 9 10:59:26 2008 +0300

    trivial: remove unneeded imports of NoRelMeths

commit 4823441189972b8dbc20af5cb037bddbb2de9c09
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 2 22:38:44 2008 +0100

    Line endings converted to LF (#612)

commit 4a9def50d7764062a905f99c6a51fda5e06fc26c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 2 21:59:35 2008 +0100

    Fixed a missing log in imports in the series test.

    This patch should have been in 119363c7b37e.

commit d76112a6c1cb157e902e74e4d32e29915448c071
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 2 23:38:58 2008 +0300

    Rational: add docstring about low-level accessors .p & .q

commit d664a6097393bb2c9ced9e74d9bfe5bedc3bf944
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 2 23:38:57 2008 +0300

    sympy/core/ -- don't use indirect imports (C.<smth>) inside core  (#669)

    Insted use plain imports with the following technique:

    === add.py ===

    # from mul import Mul /cyclic/

    class Add:
       CODE CODE CODE
       use Mul  (not C.Mul)

    # /cyclic/
    import mul as _
    _.Add  = Add
    del _

    ==============


    === mul.py ===

    # from add import Add /cyclic/

    class Mul:
       CODE CODE CODE
       use Add  (not C.Add)

    # /cyclic/
    import add as _
    _.Mul  = Mul
    del _

    ===============


    This way Add sees Mul, and Mul sees Add.

    ----

    So we can write just Add, Mul, etc.

    As a bonus, accessing classes by their names instead of C.<cmth> is a very
    little bit faster:

      e = [x,y]
      %timeit C.Add(*e)    19.5us
      %timeit Add(*e)      18.8us

commit 76db11cf0ca6742ae69e34b30179cbb7be7d18b8
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 2 23:38:55 2008 +0300

    Use sympify instead of Basic.sympify  (#667)

    because:

    In [3]: %timeit Basic.sympify(x)
    100000 loops, best of 3: 3.78 µs per loop

    In [4]: %timeit sympify(x)
    100000 loops, best of 3: 2.9 µs per loop

commit 7898a52b36cbad27fde091ecea9f273d2db14389
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 2 21:27:39 2008 +0300

    doc: fix Basic description to mention .args instead of [:]

    also make the documentation to be a doctest

commit 73586af0577f374536d976c73f33da5ff05930fa
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 2 21:27:39 2008 +0300

    Enable a couple of XPASS'ing tests.

commit 0ee9fa21f3d92c44ebc15e22aff435413d1ce235
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Feb 2 21:27:39 2008 +0300

    There should be no __len__ for Symbol, Rational, etc -- remove it

    We added __len__ in a hurry to support numpy, but it turned out the proper way
    is to systematically return NotImplemented (see 82e8ff0a8a3e)

    So, I'm killing __len__, ok?

commit 9cf6f64b3d19d898fc3edf0fa895443e91e70f89
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 2 19:08:30 2008 +0100

    All "from sympy import *" rewritten to explicit imports (#670).

    Except the numerics module, that is going to be removed anyway, since all
    the functionality is (or should be) implemented in mpmath.
    * * *

commit 0839bcaa5a17fd6ed971dbcae2c97673a788dedf
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 2 19:04:13 2008 +0100

    Line ends of tests converted to the unix style (#612).

commit 7f5cd9bd39c19ef26f45034a3b3a10e9f2f270fb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 2 17:16:59 2008 +0100

    An efficient algorithm for powering complex numbers implemented (#663).

    The speed up is about 43x for the

    e=((2+3*I/4)**1000).expand(complex=True)

    case and about 15x for the

    e=((2+3*I)**1000).expand(complex=True)

    case, but the timings must be done in a separate script, if done in
    isympy, the difference is not so impressive, probably due to caching:

    Before:

    In [1]: %timeit e=((2+3*I)**1000).expand(complex=True)
    10 loops, best of 3: 40.1 ms per loop

    In [2]: %timeit e=((2+3*I/4)**1000).expand(complex=True)
    10 loops, best of 3: 39.7 ms per loop

    Now:

    In [1]: %timeit e=((2+3*I)**1000).expand(complex=True)
    100 loops, best of 3: 3.75 ms per loop

    In [2]: %timeit e=((2+3*I/4)**1000).expand(complex=True)
    100 loops, best of 3: 4.24 ms per loop


    I measured the time including the import of sympy in the first case, so it's
    not very accurate, but anyway, it's not that important, simply put, the speedup
    is huge.

    Kirill's note:

    You could try it with "SYMPY_USE_CACHE=no ./bin/isympy"

    On my side the difference is ~ 92x for the first example (I could only
    %time it though -- very long time to wait for %timeit with old variant)

commit 007f158568633993088e6201685c1c9bed13b8ac
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Feb 2 10:35:03 2008 +0100

    Docstring of Basic fixed.

commit fd9ac902628584164cab7931f28e025b0611e542
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:32 2008 +0300

    [8/8] merge BasicMeths into Basic

    As we've removed BasicMeths lets rename MetaBasicMeths to BasicMeta. I think it
    would be a better name than MetaBasic, since BasicMeta sounds in uniform with
    BasicType.

commit 2206b4d09ffe7b55fb65fb6136480085571b2a30
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:32 2008 +0300

    [7/8] merge BasicMeths into Basic

    Move everything else from basic_methods.py -- BasicType, MetaBasicMeths and
    ordering_of_classes.

    Now there is no sympy/core/basic_methods.py -- only sympy/core/basic.py

commit 5ddf5c1280ddb25a61a2b77b89c1db7f1832ebe3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:32 2008 +0300

    [6/8] merge BasicMeths into Basic

    kill BasicMeths and make Basic inherit directly from AssumeMeths.

    Besides structuring this this gains a bit of speedup since isinstance has less
    bases to traverse:

            py.test
            sympy/core/

    old:      15.95s
    new:      15.68s

    speedup:   1.7%

commit bd10571987f5dc0078c4122ff06797fda5537ae1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:32 2008 +0300

    [5/8] merge BasicMeths into Basic

    move __nonzero__ / compare after __{get,set}attr__ & __hash__

commit 2117c619d28cf52e934c89c65b3adab4136abfd3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:32 2008 +0300

    [4/8] merge BasicMeths into Basic

    move str/repr related bits after sympify

commit 124ab0d2c0ba0ebf8cf1f2724e2191d4ac99890d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:32 2008 +0300

    [3/8] merge BasicMeths into Basic

    move __setattr__, __getattr__, __hash__ & friends near top of Basic

commit 6561a48eb1226ae3b951b8b672f1946037dd667e
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:31 2008 +0300

    [2/8] merge BasicMeths into Basic

    move __contains__ near `has`

commit 6846fe36c00ff11f63b933069bce75ae8506d7ba
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:31 2008 +0300

    [1/8] merge BasicMeths into Basic

    move set_precision near evalf

commit 2c733845b9ba7324032a9f14504e707a21a9960c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 19:05:31 2008 +0300

    kill sympy/core/splitline.py

    This should be in ad3704adbd53

commit 9c54e5ae753de466bbebbe39f1190aa5e1a10bb5
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Feb 1 18:06:44 2008 +0300

    sympify should be as fast as possible for Basic objects

    so we should check for isinstance(a, Basic) first:

    x = Symbol('x')
    y = Symbol('y')
    e = x+y
    c = sin(x+y)

           %timeit     %timeit     %timeit
          sympify(x)  sympify(e)  sympify(c)

    old:    7.8us        7.8us      8.5us
    new:    3.0us        3.0us      3.1us

    ratio:  all ~ 2.6x

commit 8e7f4d06e58b46b3327208715e5e46163813f1b3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:52:04 2008 +0300

    [4/4] Namespace for SymPy classes

    Basic.<smth>  ->  C.<smth>  all aver the place besides tests.

    btw: it would be better if we use plain import wherever we can and fall back to
    C. only where we have to.

    Together with all my patches in this series this gives the following speedup:

            fem_test.py     py.test         py.test
                            sympy/core/     sympy/

    old:      10.6s          20.4s           731s
    new:       7.7s          16.0s           554s

    ratio:    1.37x          1.27x          1.32x

commit fe54dcd8ad6bc9ed9bd1c4b8a32d02e010af06ad
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:52:03 2008 +0300

    [3/4] Namespace for SymPy classes

    tests: we don't need to specify Basic.<smth> or C.<cmth> there because import
    just works.

commit 6292c6e09e61cb0ae8bc4e16abbe46abd2d937d5
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:52:03 2008 +0300

    [2/4] Namespace for SymPy classes

    Adjust `S`, `Memoizer` and `Real`, to reference to `C` instead of `Basic` for
    classes access.

    Also propagate Basic to basic_methods, so BasicMeths.compare is happy.

commit dc4fc6708ea80b2ed24e06deec20b044102cedef
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:52:03 2008 +0300

    [1/4] Namespace for SymPy classes

    As was shown before calling Basic.<smth> to get that "something" class is
    expensive. It would be better to explicitly import everything we need, but the
    so-called cyclic-import problem arises, so we have to do some gymnastics to avoid it.

    The first idea is to cache results in Basic.__dict__, so that __getattr__ is
    called only once and next accesses are faster, but  it wouldn't be good if say
    x.Rational will be meaningful, and we explicitly stated in our testcases this
    is not allowed.


    So, I think the time has come to move global class namespace from Basic to a
    place specially prepared for it -- if we have `S` for singletons, lets have `C`
    for classes?

    Accessing classes is like before:

      C.<class_name>

    e.g.

      C.Rational
      C.Add


    Only C can cache the results, so the time for attribte access is approximately
    the same as for dict item access:

      %timeit Basic.Rational    11.2 µs
      %timeit C.Rational         624 ns

       ratio:                   ~ 20x


    This patch is just for ClassesRegistry -- C's engine. Patches that adjust SymPy
    all over the place will follow.

commit 567fca41aa6c0cbdc0e514ecc08a0ba31427a75e
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:39:45 2008 +0300

    Let's use singletons for well-known numbers.

    In the spirit of the previous patch lets convert all occurences like
    Rational(0), Integer(1), etc into explicit singletons.

    rationale:
    ----------

    - Basic.<smth> is expensive, and we usually call Rational through Basic.Rational
    - Rational(0) even with caching is also expensive:

      %timeit Rational(0)     16.6 µs
      %timeit S.Zero           594 ns


    So let's convert all occurences of well-known numbers inside SymPy into
    singletons. Testcases are intentionally untouched.

    Together with previous patch it gives ~ XX% overal speedup to SymPy:

      TODO

commit b8f83282ae5987d21e922ff4f00dd27f159bd426
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:39:45 2008 +0300

    Use S.<expr> and "is" to check identity for well-known numbers

    Accessing something through Basic.<smth> is very expensive [1].  `isinstance`
    is also expensive, especially when the result is negative and checked instance
    have deep class hierarcy[2]. For singletons we know a) there is only one
    instance per class, and b) noone is going to subclass say One, Zero, etc...

    So I propose instead of using idioms like:

      if [not] isinstance(a, Basic.Zero):
          blah-blah-blah

    we use:

      if a is [not] S.Zero:
          blah-blah-blah


    According to timings, the check in the second variant is ~ 20x faster [3]. For
    me it also more readable, so let's switch to this way.

    ----------------------------------------

    [1] Basic.<smth> is expensive:

      %timeit Basic.Zero  ->  11 µs
      %timeit S.Zero      -> 592 ns

       ratio                 ~ 10x



    [2] isinstance is expensive:

      Basic.Zero()  ->  S.Zero
      isinstance(x, Basic.Zero)   ->  x is S.Zero

      Z = Basic.Zero
      z = S.Zero
      o = S.One
      a = x+y

                                  z     o     a
      %timeit
        isinstance(<expr>, Z)  1.3µs   6µs  4.4µs

      %timeit
        <expr> is z            614ns  609ns 611ns


       ratio (in majority of case)  ~10x


    [3] "a is S.Zero"  is better than "isinstance (a, Basic.Zero)"

      x = x+y

      %timeit isinstance(a, Basic.Zero)     17.4 µs
      %timeit a is S.Zero                    822 ns

commit d2c1f4d2b13c6ef11ce8f54f4c229e8c2bb2b394
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:39:44 2008 +0300

    S: always store found objects so the next lookups are fast

    For well known numbers we are going to reject "Basic.<cls> + isinstance" way of
    doing things, and to switch to "S.<cls> and is" way.

    For this S.<smth> should be fast, but it was not for most of singletons:

    Here are timings:

        %timeit S.Exp1

    old     17.3µs
    new      597ns

    So the difference is ~ 10x

commit 18fb0fe5c203db47cc6a72dda8a3782335e045dc
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:26:33 2008 +0300

    Basic.__getattr__ : speedup for non-assumption access

    We do *lots* of attribute access tries in form of '_eval_<smth>', and a lot of
    such attributes doesn't exist. So it is important to answer qickly: "no, there
    is no such attribute"

    This seems to be only a short-terms solution. The right thing would be to
    remove Basic.__getattr__ at all, but at present assumptions depend on it.

    ----------------------------------------

    x = Symbol('x')
    p = Symbol('p', positive=True)


                getattr     x             p             py.test         py.test
                (x, 'none', .is_positive  .is_positive  sympy/core/     sympy/
                 None)

    old:        79.5µs      211us         24.6us        19.5s           714s
    new:        25.7µs      113us         28.2us        18.4s           686s

    speedup:     ?          ?               ?           ?               ?

commit a3e6294d468477af4f83ece4192cb0f5cd357bb1
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Jan 30 12:23:21 2008 +0300

    examples/fem_test.py: use pprint for matrix output

commit a685208098f08282914c58a1b59cf03bd5ba4ba3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 29 15:54:09 2008 +0100

    Pauli added to credits

commit b200144816b0d820b15f40246768df2545e1191e
Author: Pauli Virtanen <pav@iki.fi>
Date:   Mon Jan 28 22:12:32 2008 +0200

    Fix .expand() for noncommutative symbols (#658)

commit 31f786fc88052da799c60b707ddcb6620cf6619f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 27 23:32:15 2008 +0100

    Start of the 0.5.13 development cycle

commit 1c7f11935ad2c612630429e3e72e8c9c745ead8f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 27 23:30:43 2008 +0100

    Added tag sympy-0.5.12 for changeset cce944aebc40

commit 48a6528052d2006adc587049f006a88b404b361f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 27 23:30:35 2008 +0100

    v0.5.12

commit 32902d4e29b7a26822de92707c4a49eceebb4c28
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 27 23:28:37 2008 +0100

    bin/test_pure_plotting adapted to the latest Debian.

    It now installs all necessary libraries in the base Debian install, so that
    pyglet can run and only fails when trying to initialize the window. This used
    to work, but now (without this patch), pyglet fails to even import, due to
    missing GL, GLU and freetype libraries.

commit a59bf5f243d693f723672633cb60ab856383e5da
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 27 22:53:30 2008 +0100

    A script written for automatic generation of a tests list in setup.py.

    The tests are hardcoded in setup.py. Before a release, one needs to
    execute:

    $ python bin/generate_test_list.py

    tests = [
        'sympy.concrete.tests',
        'sympy.core.tests',
        'sympy.functions.combinatorial.tests',
        'sympy.functions.elementary.tests',
        'sympy.functions.special.tests',
        'sympy.geometry.tests',
        'sympy.integrals.tests',
        'sympy.matrices.tests',
        'sympy.ntheory.tests',
        'sympy.numerics.tests',
        'sympy.parsing.tests',
        'sympy.physics.tests',
        'sympy.plotting.tests',
        'sympy.polynomials.tests',
        'sympy.printing.tests',
        'sympy.series.tests',
        'sympy.simplify.tests',
        'sympy.solvers.tests',
        'sympy.specfun.tests',
        'sympy.statistics.tests',
        'sympy.test_external',
        'sympy.utilities.tests',
        ]

    And then one will just copy this into the setup.py and using "hg di" compares
    the differences and decides what to do.

commit 9d1196ebf7875ead6e3ab14abe1288e1660144f8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 27 21:18:50 2008 +0100

    A script "bin/test_isolated" for isolated testing added (#635).

commit 397bea14f6ff26e4d64f2bbd8d2ecae83b40d244
Author: Saroj Adhikari <adh.saroj@gmail.com>
Date:   Tue Jan 22 16:44:51 2008 -0600

    pan and zoom but do not rotate the 2D plots

commit daeeef91b5029f8d4cc0455d1ba0674e8e2f51ce
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 27 20:11:51 2008 +0100

    Saroj's name corrected in README

commit 26e9e8debb52b50389359dd14d72522223eb1802
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:53:18 2008 +0300

    trigintegrate: trigonometry integrator  (#521)

    It can hadle cases like

           n           m
        sin (a*x) * cos (a*x)


    efficiently

commit 75f4e77d12f7f749a70e8458ce28157fe6165034
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:06 2008 +0300

    Order: don't make additional assumptions about symbols  (#369)

    We used to assume inside Order symbols are infinitesimal and positive.

    I'm maybe partly agree with infinitesimal, but why positive?  If we are in real
    domain, they could be both negative and positive, not even speaking about
    complex plane.

    Also, I don't see a reason to make this additional assumptions. Without them
    all tests pass and testing takes approximately the same amount of time.

    And because assuming in situ breaks a lot caching badly I propose we just don't
    additionally assume anything.


    P.S. if we really need this assumptions, we'd need to subs symbols for dummy
    variables and make assumptions about those dummies. then, before returning the
    result convert back.

    P.P.S. yes, assumptions should be disentangled at least partly from objects,
    but that's another story.

commit 01a6014c613db9f520b97cec82074cd2c577cd0b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:06 2008 +0300

    oseries: kill internal _cache

    It is used only to detect infinite recursion and python can do it already.

commit ec0bdf4e650420f78484c7ee6edd50189860a206
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:06 2008 +0300

    cache: rewrite cache_it_debug so it always checks cache value with actual result of function call

    try running "SYMPY_USE_CACHE=debug py.test sympy/core/" -- there are some failures

commit 5dd3e31a2cc7b396846e106116f1ccabe8e73315
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:06 2008 +0300

    cache: global on/off/debug switch via SYMPY_USE_CACHE env variable  (#596)

    Try "SYMPY_USE_CACHE=no py.test sympy/core/" -- there are two failures!

commit cbd577a421ee03588e9961f771957f47175fdf88
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:06 2008 +0300

    functions: there is no need for taylor_term to be classmethod -- it's staticmethod!

    Yes, say why cos.taylor_term needs its class or instance? It just simply
    computes cos taylor terms with direct formula.

    And also, since taylor_term is cached, less cache space is used (actually I
    spot this when working on caching)

commit 31f0a21e2928ec1e84db9a339e9e824ff064fd6a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:05 2008 +0300

    cache: utilities to print and clear it  (#656)

commit 5557774f0c4de57778dc597f20231e5cd6717e2c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:05 2008 +0300

    cache: introduce global cache registry

    This will be handy to have when we need e.g.

    - to print cache
    - to clean cache
    - to maybe evict some items dynamically (later)

commit eebed8a54a1873f7aa7abf1bb737b764e69543eb
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:05 2008 +0300

    [4/4] move cache primitives into sympy/core/cache.py

    Fix cache_it_debug

    It was already broken -- calls repr_level(0) which should be
    Basic.set_repr_level(0)

commit 9900f27c67f0cb7a4ad6d55677e22bddc1861612
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:05 2008 +0300

    [3/4] move cache primitives into sympy/core/cache.py

    propagate Basic into cache at runtime.
    We need this for Memoizer('str', ...) to work.

commit ec9108036679521a72e0ccbbd0ff13a910d22f84
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:05 2008 +0300

    [2/4] move cache primitives into sympy/core/cache.py

    Adjust cache-related imports all over the place.
    Also, I just removed such imports where cache is currently unused.

commit 71cdfc8e77fde54d0db9cd5bd79e95b15b851d77
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Jan 27 17:32:05 2008 +0300

    [1/4] move cache primitives into sympy/core/cache.py

    This patch just does that. Everything was moved as it is -- i.e. no changes
    were made along the road.

commit 6c3f02a50b942a9a658324c233626816c9234bfa
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jan 26 21:29:50 2008 +0300

    pretty: add support for list and tuples  (#659)

commit 6b8a980411b6337046dcc89fa91304c71830812e
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jan 25 23:21:56 2008 +0300

    test for #643

commit 9e7da44015675cf3acdd23ce1b3b14e5c7c0cd46
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 24 01:58:52 2008 +0300

    exp: kill S.Log  (#643)

    I don't have tests for it because:

    - inverse is never used (?)
    - I can't trigger exp(3*log(x)) to be exp and then _eval_expand (too sleepy)

commit 6b7756125f9c99e3831b85529248314a12a98600
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 24 01:53:23 2008 +0300

    fix asinh(1) & asinh(-1)    (#643)

commit 96a3ab90cfab6f2e3b7a5b495da11b4d707fd34a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 24 00:58:47 2008 +0300

    polygamma: fix expand(func=True)  (#643)

    I don;t know polygamma, so I hadn't wrote tests, but I've created an issue for
    this: #653

commit 0851793b8e65950f01c4e4af737e9bb937a8929d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 24 00:43:21 2008 +0300

    log: fix expand(complex=True)  (#643)

commit c93c3f935b8267e0a6945afb94e4bef3d63fa6d7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 23 18:43:50 2008 +0100

    Comment added to the patch in #432.

commit 42c46eef73c6931bc4db66338a87b9e7e72d325a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 22 17:13:07 2008 +0100

    A test written for the problem reported on the mailinglist, see the issue #432.

    It was fixed by the numpy cooperation patch, so this works now, but to
    be sure, I wrote a special test for this as well.

commit 467abd0ff08a2d0f659f99226dc0527e9e634e28
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 22 17:07:51 2008 +0100

    Fixes the problems with user defined __rdiv__ (issue #432).

commit babb7400a6aa731428c77ff06502a6eff8d83060
Author: Fredrik <fredrik.johansson@gmail.com>
Date:   Tue Jan 22 12:46:46 2008 +0100

    Division of complex numbers implemented using .expand(complex=True). (#637)

commit 9a9353122248cd20c03fcd74326f5f248676adf9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 22 11:27:00 2008 +0100

    Fixes the test_factorials.py test by using explicit imports.

commit 3a53b8a824116494062da73a87db7e49423d0602
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jan 21 20:28:16 2008 +0300

    Saroj added to credits

commit 0bcb48ee058662a842734a0e01d9d63ecb287b04
Author: Saroj <adh.saroj@gmail.com>
Date:   Mon Jan 21 03:01:49 2008 -0600

    added eval_is_real methods and corresponding tests to trigonometric functions

commit 64ac530f2065fe9a208779039678b2557295428a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jan 19 02:38:47 2008 +0300

    Or Dvory added to credits

commit 5c26f27630bce4b52c9efea7b8d8b4f180aae7fd
Author: Or Dvory <gidesa@gmail.com>
Date:   Sat Jan 19 02:37:15 2008 +0300

    Docstrings improvement  (ghop-python task #304)

commit ab6896160a41e5fba7a102157c7d9fc1958c17f6
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jan 18 02:27:17 2008 +0300

    A gentle call to please cite SymPy  (#513)

commit bcd8f694e2a5e39ed09202653b60065ed0abd778
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jan 18 02:09:46 2008 +0300

    Fix re/im usage all over the place

    We had bugs in Pow._eval_expand_complex and Function._eval_expand_complex

commit 3360c5d33ad39a50d69a5fc4dfd43db1dabd897d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jan 18 02:01:43 2008 +0300

    re/im/arg -- cleanup is_real

    There is no need to define _eval_is_real if 'is_real' is class atribute.

commit 9c0929d9184848c88d8308c77486f3a38162c20d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jan 18 01:59:26 2008 +0300

    integrate(poly) -> poly  (#483)

    The result of integrate(Polynomial) should be polynomial as well. This way
    we'll avoid a lot of conversion vice versa when a lot of polynomial handling is
    done.

commit 681aa5479cd298ba2c3448a894cb9f161c06a365
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jan 18 01:15:41 2008 +0300

    abs: make it always is_real & is_nonnegative

    also is_positive is detected when abs arg is nonzero

commit 05e3b2566e6a55720ef71fb08f9dc924b8c5f20d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Jan 18 01:15:39 2008 +0300

    assumptions: positive -> nonzero, zero -> nonpositive (#614)

    The same for negative v.s. zero

commit a306840121847bbe3a669590d241af2b47c6db38
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jan 17 02:44:57 2008 +0100

    Make numpy.array(sympy.Matrix(...)) work (#609).

commit cda87f26bb28ec451ec61b8cbd4855de02a4f9a7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 17 11:46:29 2008 +0300

    fix abs(0)

    Previously it just crashed with RuntimeError: maximum recursion depth exceeded

commit bbd3c93c24ceaaceb6ce1a2e0c91555a79a96d5a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jan 17 04:17:22 2008 +0100

    Fixed the Rational(1,2)*array([2*x, 0]) and related problems (#629).

commit b7fed48fc866741ed025f0b11ad6181d07754467
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jan 17 03:39:27 2008 +0100

    Converts the sqrt(Function) class to a simple sqrt function (#606).

commit 157dd374e728e37eebef729584cd9e94fad02bc8
Author: Fredrik <fredrik.johansson@gmail.com>
Date:   Thu Jan 17 01:54:10 2008 +0100

    Summation code copied from Sum2 to Sum, with a few changes (#577).

commit 160d80be3a7d59bbf66831a65bc2b012c0b3f4c0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Jan 17 01:39:37 2008 +0100

    'from sympy.interactive import *' implemented (#563)

commit 69f10e1ab2281401c32efcd2253364a97567a0b3
Author: Fredrik <fredrik.johansson@gmail.com>
Date:   Thu Jan 17 01:25:04 2008 +0100

    Changed the call syntax for .series() to include the expansion point.


    It used to be sin(x).series(x, 5), now it is sin(x).series(x, 0, 5).

commit 771573f990dc4bbbeaed96d36696a9e2be2a7fc7
Author: Andrej "qwp0" Tokarčík <androsis@gmail.com>
Date:   Thu Jan 17 01:12:14 2008 +0100

    Python printing implemented (#81)

commit e4d1f0904398ed81a76e5d312105ebd2045dd1a8
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Tue Jan 15 22:44:53 2008 +0100

    Implemented maxima parser

commit e2924288e1bf8eb3934acef2c9dcce108a49e498
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 13 23:14:58 2008 +0100

    Adapts SymPy to work nice with NumPy (#556).

    This is done by removing the __len__ methods and by systematically returning
    NotImplemented for operations, that SymPy don't know how to do, so that NumPy
    can take care of it.

    Thorough tests were written to test (ideally) every possible operation between
    SymPy and NumPy objects.

commit 5c1e712397ebb50e5aa5b5c9b8993c54477e6356
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 13 23:14:56 2008 +0100

    Removes __getitem__ method from Basic and adapts SymPy to work fine (#556).

    Also some tests were written for cases, that were only tested in docstrings.

commit b89a24efab8e4e25aed2ecb567905a1720b4bb62
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 13 23:14:55 2008 +0100

    e.args[:] implemented (#556).

    This only implements the method and a test. In the following patch,  all
    occurences of e[:] are converted to e.args[:].

commit 398f089415767f73d5456fe1396bdb65578c8a9d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jan 14 13:27:23 2008 +0300

    Add: there should be no _eval_power

    This should be in bb8fef4b5bc6

commit f2b85274ac9c6c044323c8d194eb22cdb0c334c2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 01:50:37 2008 +0100

    English in comments was improved.

commit f39343eced8b43b9208e20683134122014c1ce8e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 13 13:43:06 2008 +0100

    Small refactoring of the integration of polynomials.

commit f8ad388c02f8d12e983c2b0583132f5781585128
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Sun Jan 13 03:40:25 2008 +0100

    Two tests added for the issue #579.

commit 934227413f160c53e63c0cb8046ddfe6c50b379f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 13 02:56:13 2008 +0100

    removing old comment

commit f672d96969a0bcdde1e4a63e720c5cf68b225fe8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 13 02:39:13 2008 +0100

    Test that sympify() raises the correct exception on syntax error

commit 99db6905bb706ab4dbd118887983ea7d61e500b3
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Sun Jan 13 02:27:40 2008 +0100

    Don't silence exceptions in sympify().   (#547)

commit 6557672a1b1202fef00e6688c398028177f2345c
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Sun Jan 13 01:31:49 2008 +0100

    Make sympify('lambda x: 2*x') work (#598).

commit 65abfee4897a8d5b45f0b0b60834c8a4049909c4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 22:59:12 2008 +0100

    Doctest in fem_test.py updated

commit f12445ccf4d5bc7800463ddb193a59efcc93a81b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 12 22:21:40 2008 +0100

    Fixed bugs in heurisch(), updated tests

    (1) heurisch(sin(x), x, rewrite=True)
        now works.

    (2) By default factorization over Q is
        done if 'f' has non-symbolic
        coefficients.

    (3) components: Moved out tests from doc.

    (4) One more test (to see if factorization
        is done over proper field).

commit 156b6a2ee5361d9f21d780c18838b4f1be615bff
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 21:43:07 2008 +0100

    A test for the issue #350 written

commit 9b9875ffde28195e74470c2906af4a013896f8a2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 21:27:58 2008 +0100

    A test for the issue #324 written.

commit 50dafe82b72f98986f48ec5ea95d91a8191fee42
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 21:16:59 2008 +0100

    Test written for integrate(1/(x * (1 + log(x)**2))).  (See #510)

commit 6c55d9c7c0f41375d53c3336832f43a0bd1565d1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 12 21:04:16 2008 +0100

    Improved heurisch() speed

commit 186aeda76a435ad2815b8e5d91c67534b8b4193e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 12 20:53:37 2008 +0100

    Make integrate(sin(x**2), x) return Integral instead of None (#587).

commit 7acdf90d5039c04ce7295c48af5bdd3dabfc4eac
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Jan 12 17:53:26 2008 +0100

    Heuristic Risch improved.

    This fixes most issues with heuristic Risch
    algorithm. However there are still simple
    integrals that cannot be computed. This
    will need improvements in other parts
    of SymPy.

    The main contribution of this patch is new
    heuristic degree bound for polynomial solution
    candidate in heurisch(). This enables it to
    compute with fractional powers.

    Renamed risch_norman() to heurisch().

    Fix to #510, #581. Enabled several tests
    in test_risch.py.

commit f78dc83c8022c733c67ba0740947fa8a3c9acc1c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 20:38:28 2008 +0100

    A test written for the issue #593, that was fixed in the previous patch.

commit d46398d19a402fba7b4f6e30fc73d014f4ec383f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 20:32:27 2008 +0100

    Fixes the ((-5)**Rational(1,6)).expand(complex=True) problem (#593).

commit a7ebc64ea06ecd301197abd2ceb5e0268c3d1f55
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 18:54:51 2008 +0100

    Removing pyglet from sympy/plotting/pyglet (#586).

    For some reason, the previous patch didn't remove it... See the
    issue #586 for more information.

commit d983dca1676cb885f6e785d6d9183c9d1f82cd6a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 17:41:37 2008 +0100

    Doctests fixed and regular tests added for them.

commit 93aa40bf57b6ea516d969794e5cbd8618e6bcc7f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 12 17:23:43 2008 +0100

    Tests for the issue #222 (that is already fixed) written.

commit 4656861e82105f7ccd6026df038e38b42441d92e
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Sat Jan 12 16:58:57 2008 +0100

    Refactors sqrt() to just return arg**S.Half (#390, #452).

    This fixes some simplification problems, but especially
    makes the sqrt() function simple again, which is very important.

    Unfortunately, due to some caching problems, test_issue524() in
    test_integrals.py had to be skipped, because it hangs in ./setup.py test (but
    works fine when just the file test_integrals.py is tested)

    Also one limit stopped working:

    limit(x*(sqrt(x**2+1)-x),x,oo)==Rational(1)/2

commit 180e585555c6a48b13e2f695f4786a162296ba2f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 10 00:34:18 2008 +0300

    poly: sympify(Polynomial) is Polynomial

    this is convenient not to change SymPy expressions inside sympify

commit 9853ae0f7973d4cf3ff091a8c4d61cb3b6e8cc7f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 10 00:34:17 2008 +0300

    integrate: tests for #519, #524 and #536

commit 518303d3e7c2ac940ca7e0ef09449f1ac24f458b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Jan 10 00:34:16 2008 +0300

    integrate: fix (a*x+b)^c handler  (#400)

    previously, we were checking Pow.exp (`c`) for .is_number,
    but what we are really intrested in is that `c` is independent of x.

commit 405e9bc75c599d0aafaee9acacec1f873bf851e7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 8 21:26:02 2008 +0100

    year 2008 added to LICENSE

commit 9b8af021f84c331b7695c2452ed6f588a77cea68
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Jan 8 21:21:26 2008 +0100

    removed #!/usr/bin/env python from ast_parser.py

commit 7b59e1e6d262a5cfacc5b074a9ac39d61e78725d
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Tue Jan 8 01:12:25 2008 +0100

    Fixed Real(0)*pi bug

commit fd64abffc7ae0dc7b92428a81f1cdb860e06e1a0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    integrate: refactor to handle separately terms in Add and to use apart()

    Refactored Integral._eval_integral. Now uses apart()
    to integrate rational functions.

    kirr: I've added comments and changed code layout to be simplier. Mateusz - are
    kirr: you ok with this?

commit 77b69e972d16f066f91f1abe738b95daf090c9d1
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    apart(): refactor

    Refactored apart() so that it is faster and can handle
    more classes of expressions (eg. it can thread over
    sums and relational operations).

    New tests and docstrings.

commit 266d8de1aa897f4ba5de97e11e8a0d6c10bae7ed
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    cancel()

    Implemented cancel() function, which is equivalent of
    Mathematica Cancel[] in case of rational functions.

commit 151bfca3dda9cf60622869cb1bc05cee8a010ce0
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    Fixed bug in egcd().

    In fact it is a bug in div() but here was easier to fix. Later we must take
    greater care of polynomials module.

    kirr: what was the bug? could we write a test for it?
    kirr: could we write a docstring for egcd (I don't know what it does)

commit b9e5284d46f40dbc92f64d27f33fc86a415b14d9
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    egcd: move from simplify.rewrite to polynomials.wrappers

commit b102198d811ca4cbf2bf82ac6116acc2a2db3d7e
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    Implemented RootOf class.

    It uses new roots() function which now supports quartic polynomials.

    kirr: shoudn't roots, linear, quadratic, cubic & quartic be merged with
    kirr: sympy.polynomials.roots_ ?

commit cb62cf49ef89c893b4a42b58d7db5bab2bd401b2
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    Fixed imports in numerics module.

commit fb8888bfef7e9ff8bd7e826419cfc0a0021824ff
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    Fixed import in sympy/__init__.py to allow

     from sympy import sin, exp ...

    in all modules.

commit 4fa30c2ff2bde9898085ac840988f00978715d83
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Jan 6 11:21:34 2008 +0100

    Fixed bug in Basic.is_fraction().

commit 2cb18dbb9bc5ef447f4403ab9f721a57ffadd478
Merge: 92a1d4e 14430a0
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jan 7 21:05:01 2008 +0300

    merge

commit 92a1d4eb889700bbf1ea308913db6a5cfb6069dc
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jan 7 19:08:56 2008 +0300

    .hgignore += dist/ build/

    This dirs are created by "setup.py build" and "setup.py sdist" and should not
    be tracked.

commit 30bf77021e3664c3d1f2784f30449c020b44f018
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Mon Jan 7 17:40:02 2008 +0300

    test_numpy: there is no need to play with sys.path

    everything is done in sympy/conftest.py

commit 14430a0361aac49b95e663d585488f73eb2dccbe
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jan 7 14:34:31 2008 +0100

    One more test added for testing a user function creation.

commit b8b6c9a4bf14a5fcdd9f2506f25dbe6deeb73d3e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jan 7 02:41:33 2008 +0100

    Fix series expansion of hyperbolic functions (#555).

commit 1448fadde4c270e86fea53d2af6c8968fdb50213
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jan 7 01:43:39 2008 +0100

    list2numpy() implemented together with tests (#537)

    This tests some interoperability between SymPy and Numpy,
    but more fixes and tests are needed.

commit a38f93bc2d5d6b6843bebe06785518b72c17587b
Author: Bernhard R. Link <brlink@debian.org>
Date:   Mon Jan 7 01:14:40 2008 +0100

    Let isympy print a link to sympy.org (#548).

commit fc0254fd870f1ad2ffc7c6aa5a33b071635f7537
Author: David Marek <h4wk.cz@gmail.com>
Date:   Mon Jan 7 00:57:45 2008 +0100

    Make Derivative(x**2, x) unevaluated by default (#476).

commit 60adf4f659e68b87d04517b5ede243c90aa07ba7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jan 7 00:35:20 2008 +0100

    Lambda support works now (#427)

    Currently only one variable lambdas work. Example:

    In [1]: f=Lambda(x, x**2)

    In [2]: f(4)
    Out[2]: 16

commit 9622af76d5ca20f29e6627ac9d941371179c20fa
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Jan 7 00:02:55 2008 +0100

    Start of the 0.5.12 development cycle

commit ef62f8546437ce98167fffb663ea69d2af09a8cd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 6 23:56:51 2008 +0100

    Added tag sympy-0.5.11 for changeset 7d61e7bcfed9

commit 3bfe510f7980a283caec5d4363a10a1719f50127
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 6 23:56:45 2008 +0100

    0.5.11

commit 15fd9a019ba91f8dd8fda1038b12ceb2bd46db04
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 6 23:54:49 2008 +0100

    Print the result of the Plot command in test_pure_plotting.

    Rationale: pyglet cannot plot in cowbuilder, so we check that everything works
    by making sure the Plot(...) command returns, instead of rising "cannot import
    pyglet" error.

commit 6b53cd5f177ea22b12105f9a265eb79947c6b501
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 6 23:34:43 2008 +0100

    Fix the pyglet installation problem (#552).

    This is fixing the problem with "./setup.py install", that
    didn't include pyglet. It does now.

commit 62a88dda7d62fd81e6cee18ba1c62f57b3fbac9c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Jan 6 23:29:34 2008 +0100

    Pure Python cowbuilder test for plotting added + one more plotting example.

    Pyglet cannot be tested using py.test because it's interactive. Also we need
    to test, that "python setup.py install" works in pure environment. That's the
    purpose of the current script.

commit 9736ffaefdd3ba3921faf9a2eb9ab74007b2209e
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Jan 5 13:14:42 2008 +0300

    var: return symbol, not a tuple for cases like var("x")     (#546)

commit 83595cbb5e835b1e8459ed1f8959c1540ba02b4b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Jan 5 01:36:20 2008 +0100

    pyglet updated to the latest svn

commit 06d6f4c3aa9639f693595fa9bb6ccaf1773cf5b2
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jan 4 15:32:46 2008 +0100

    Jaroslaw added to credits

commit e82f7e7f0d2d01458db4ece61f23c5e62c8694e9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jan 4 15:26:13 2008 +0100

    Start of the 0.5.11 development cycle

commit 860541db20a3b3aaa93c44d54c53ecbeaa35c85b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jan 4 15:21:23 2008 +0100

    Added tag sympy-0.5.10 for changeset beabd2bcdec2

commit 263f0be67909c67d245df19b009426cbcdbcb2cb
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jan 4 15:20:58 2008 +0100

    v0.5.10

commit f986ab3331dc7f8d6a668d9ae6af2c31b373c15a
Author: Jaroslaw Tworek <dev.jrx@gmail.com>
Date:   Fri Jan 4 03:52:30 2008 +0100

    sympify() rewritten to use AST parser (#440)

commit 0353cb87c6b1ae63f679c389bd8e0b26602984d9
Author: David Lawrence <dmlawrence@gmail.com>
Date:   Fri Jan 4 03:06:12 2008 +0100

    Implements simple square roots denesting (#93)

commit 0b2970b39473a9f8002ff9cf25374903f785bf5e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 21:15:38 2008 +0100

    fix integrate bug (#536)

commit a1088cf2dd77ed089fa95e22031f4835f82cf5c3
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jan 4 14:28:20 2008 +0100

    sin(cos(x)).series(x) works now (#540)

commit 61c7632cee384193968bd0175dcc1da5822df7f1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Jan 4 14:25:43 2008 +0100

    .series() doctest improved (#539)

commit 968e6e807f00a6fe91f567ca1a0f6eef7e44bb36
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 20:35:05 2008 +0100

    Make numpy.array(Rational(2)) work

commit 762f3ccfa23dabd7bbb7ae1b8ffe35469fefcfae
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 19:57:32 2008 +0100

    Make array(Symbol('x')) working

commit 6639b5b033e17c060de78672ad2b8e9b94cf6901
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 03:40:57 2008 +0100

    ./setup.py sdist fixed to include mpmath and pyglet

    pyglet is recursively included in MANIFEST.in,
    mpmath doesn't need any sys.path hacks, so it's included
    directly in ./setup.py

commit d1f6a5c6d055b0285be4071a7d4bb14baa44ae5f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 02:46:48 2008 +0100

    pyglet/lib.py reverted to older version to fix a pyglet bug.

commit 7240852870d884691049f2ca338f166db8e3916c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 02:38:43 2008 +0100

    pyglet updated to the latest svn version

commit 79f0364bdc5019632d7bcefa0e55b02885018092
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 02:30:49 2008 +0100

    Move pyglet from thirdparty/pyglet to thirdparty/pyglet/pyglet

    Only sympy/thirdparty/pyglet is put into the search path, to ensure, that all
    other modules in sympy/thirdparty are not included automatically.

commit 7877fc3c43a1dcde1c54976c69062e2ddd0ec521
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 02:23:49 2008 +0100

    mpmath included in thirdparty

commit 039513b87c04eb0fa469dc77fbd3fe065518be9d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Jan 2 02:06:51 2008 +0100

    Pyglet moved from sympy.plotting to sympy.thirdparty.

commit 3acc58a746115a1fade69295a7844496a964c32a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Jan 1 18:29:05 2008 +0300

    preview: depend on pexpect only at runtime (#520)

commit 407bb111ead8dd4ab32977447db13d091a88d3e4
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 30 23:13:36 2007 +0300

    examples: print_pretty -- try to use unicode

commit e989c8902823ab66927271e54928afd43463ad0a
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 30 23:13:35 2007 +0300

    examples: no more sys.path hacks

    let's use iam_sympy_example, so sys.path modifications are all located in one
    place.

    Also, I've made examples be executables.

commit a3f20b1c2171ea50a30c66521c4125de994a59a2
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 30 23:13:34 2007 +0300

    examples: iam_sympy_example.py -- to make life easier for examples

    For examples, I propose we move sys.path hacks into helper module.

    The reason is to avoid uglyness and potential mistakes when playing with
    sys.path, and to keep it in one place.

    So for an example, it should start as:

    #!/usr/bin/env python
    import iam_sympy_example

    ...

commit a53c6594f69051727acc87f2567d13ed2ad675e6
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 30 23:13:32 2007 +0300

    tests: no more sys.path hacks

    They are simply not needed -- in sympy/conftest.py we care to ask py.test to do
    it auto magically. And this code is located in one place, instead of being
    scattered all over the place.

    spot-by: #505

commit 59aa1721d665628bb242573dc1fdd7a400312e95
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 30 18:47:09 2007 +0300

    integrate: handle polynomials accurately

    When converting to polynomial, let's care to supply poly-var so say
    x*sin(y) is still recognized as polynomial.

    #482

    This way integrate(x**100*sin(y), x) is also fast.
    see: #422

commit 8d59b5c9824132d76194a40fe85c150cf366eeb6
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 30 18:17:45 2007 +0300

    Fix integrate() for case where integration vars are ommited

    Also, improve integrate docstring.

commit b56bc00e057effa66d474388f1f53dbf7d5a8ac8
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 30 13:42:36 2007 +0100

    MANIFEST.in refactoring - use recursive-include

commit edafac76be0af9dd5b4845d9bcd964ffbe52de6b
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sun Dec 30 12:26:59 2007 +0100

    Fix for integrate(1/pi * f(x), x)

commit 2441a6ae635a5fc4ca16b377909142b26d5e5c9b
Merge: ca62a9b 0cdfd05
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Dec 29 19:08:34 2007 +0100

    merge

commit ca62a9bb4cf53b8ffc423e7d25805d453dd0fc50
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Dec 29 19:07:50 2007 +0100

    Speed "import sympy" up as in the last release.

commit 0cdfd05f7cdb5e767652b2669e4b1b4d7225102d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 28 02:35:00 2007 +0100

    A test for the issue #469 written.

commit 138cbb0e10bc2b6d77489d39ecf11921715168d5
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Sat Dec 29 18:27:01 2007 +0100

    TeXmacs interface (#469)

    Currently it only does not support plotting directly to a
    TeXmacs document (Plot.saveimage() returns empty image for me).

    To use this copy the contents of data/TeXmacs to the tar-ball to
    ~/.TeXmacs/plugins

    TeXmacs should automatically add SymPy to Insert/Session
    menu. If not, select Other and type sympy.

    tm_sympy imports sympy * by default, creates Greek symbols and a few Latin.
    gamma(x) and zeta(x) are renamed to Gamma(x) and Zeta(x) respectively to avoid
    symbol redefinition.

    Added data/* to manifest so that tm_sympy will be inclued in sdist.

commit 8b5780dc9c3ca695c5e89eeccb0b4c1d51c695d3
Merge: 7a0966d 719e43f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Dec 29 00:57:04 2007 +0100

    merge

commit 7a0966dac2c093865caf50b448f0e842de824679
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 28 01:55:47 2007 +0100

    credits improvements

commit d21d31ba1ea6e1a70131ed73d34b6f68a484ae7b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 28 01:53:53 2007 +0100

    fixed downloads instructions in the README and a typo

commit 23c94c26116d9bd2530dbbc2545c8b9487fbe2a1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 28 01:49:47 2007 +0100

    David added to credits

commit 719e43fb4654117d5362ea9ace51e9fb7929de01
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 28 00:33:04 2007 +0100

    Allow to specify line width in 2D plotting.

    Also the default line width increased from 1.25 to 1.5.

commit 3fa3fe0a3d8c84a0c29ca93073d0f2d15931fa5a
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 28 00:26:28 2007 +0100

    Converted from CRLF to LF as the rest of SymPy

commit 0a7c26b56845cf21f5aea8eb423a2d3138fc6fb7
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Dec 28 02:21:09 2007 +0300

    Kill more bits from ApplyXXX era

    spotted by Goutham on sympy. It even fixes one bug in powsimp related to
    functions.

commit 8271153ec2756ef7fd2981334835103115cb4c5a
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Thu Dec 27 23:43:14 2007 +0100

    LaTeX preview

    Improved 'preview' function it self and its documentation.
    Added also several wrappers (like pngview). This version
    is integrated with new LaTeX printer ('inline' keyword).

    I have rewriten LaTeX code generation almost from
    scratch. Now it supports:

     - almost all functions (zeta missing)
     - multivariable derivatives
     - proper fractions
     - additional symbols
     - proper brackets
     - square roots

      and so on.

    I also added the 'inline' key word to both LatexPrinter
    and latex(). If it is set to True, the printer will
    generate inline code $ $. Otherwise enclose the
    expression in 'equation*' environment.

    Added support for typestting lists, tuples, dicts
    and matrices (using math-mode for all).

    Swiched from as_numer_denom() to fraction() to avoid
    putting expressions like 1/(1+1/x) together.

commit d11f053d0b5b4c8506fb19acb8ad0c70e6b74c1f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 27 10:28:11 2007 +0100

    parsing module added to ./setup.py

commit 156ae692821a21473d3a9dd82b204ab539910672
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 27 01:16:26 2007 +0100

    Parser for simple Mathematica expressions added (David Lawrence).

    This resulted as part of the GHOP:

    http://code.google.com/p/google-highly-open-participation-psf/issues/detail?id=307

    See also #161

commit e27c63506541a9eeb36232f645dbeb9b1c2a9b37
Author: Mateusz Paprocki <mattpap@gmail.com>
Date:   Mon Dec 24 10:00:09 2007 +0100

    Preview support for DVI, PS, PDF files.

    This patch expands abilities of 'view' function and fixes
    several bugs I found in the previous implementation. I have
    renamed it to 'preview' and added support for DVI and PDF
    files. You can select both output format and the desired
    viewer (I use 'gv' by default as it is really small and
    has little dependecies). Look & feel is also improved
    (partialy by using Euler fonts).

    This could be merged with PNG generator as well.

commit 32265035cdff37edd67a3211cbdc3cda08a6b438
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Dec 23 15:50:05 2007 +0100

    Include *.xsl in the distribution (thanks to Mateusz), fix for #445

commit c04e840121b5a6c1c8bd02ad9f23a01c07db6f1d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Dec 22 12:24:29 2007 +0100

    Make sympify("_a") work (#496)

commit ee0691200cc0def16c2602f2548924a6f2b6cbaa
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Dec 22 01:01:36 2007 +0300

    Let's start 0.5.10 development cycle

commit 1dce6bd4c9438938896351d699baa05fb69e641c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Dec 22 01:00:55 2007 +0300

    Added tag sympy-0.5.9 for changeset 4a8f0d11e6ee

commit f0b20273d7f443e688fd715a738181abe6167f2d
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Dec 22 01:00:48 2007 +0300

    v0.5.9

commit 95182c77ee824efc4c827fc3468d0a2577f1a290
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Dec 22 00:23:15 2007 +0300

    Fix sdist

    this should be in 566e7e06b52f

commit 57ad9f72993e5d544f45267484401e3796cc5576
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Fri Dec 21 22:38:34 2007 +0100

    Do ./setup.py sdist before testing in test_pure

commit 1a50475902c89b61cfc396b7ce673c179f4e2785
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Dec 21 22:05:38 2007 +0300

    printing: document how Printer works and how to use it

    #494

commit 2a8aabcc521321b35cfddd20282a1ae7e7a2c8d2
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Dec 21 20:09:45 2007 +0300

    latex: reenable working doctest

commit a275de77dd80cf801aa9de43e6b4703099f1f7e2
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Dec 21 20:09:43 2007 +0300

    pretty: document a bit

commit 22bfbba448d6d4c3432b273cd989bff5c7baa6e3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Dec 21 19:19:06 2007 +0300

    pretty: move subsystem's code into printing/pretty/

    rationale: this structures things

commit ff7f8ccf1c775f4e72a360e5d5aab42b630b1bfc
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 16 23:38:48 2007 +0300

    Matrix: doc bits here and there

commit 8f4d91ba5b85cd23ab37509fdc914791114cb8fd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 16 20:50:13 2007 +0300

    pretty: add support for Matrix

    A bit ugly at present, but this is better than nothing.
    #344

commit 7cc58a070f40a7e7709b555b003d20932dea1c4b
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 16 20:42:07 2007 +0300

    pretty: fix ascii symbology for '[' and ']'

    rationale: previous varian looks really ugly.
    rationale: we'll need this for matrices.

commit 7a136d97375fbd0da1ca60d616c2d4f7a15ee550
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 16 20:42:06 2007 +0300

    Matrix: fix doctests

    Now we've changed how Matrix prints itself, its time to fix related doctests.

commit 10638ad7b34f5b9ff449f8924ef0a8fae5c02517
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 16 20:42:03 2007 +0300

    Matrix: fix __repr__ and __str__ so the printout is aligned

    printing is based on code by Fredrik Johansson
    #344

    ----

    NB: Since Matrix inherits directly from object, for Basic.set_repr_level to
    affect Matrix, I needed to create a proxy between Matrix and Basic.
    #420

commit 7eb8d844f311e804550f4fd5e2ff8725805ebedd
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 16 20:31:58 2007 +0300

    REPR0: apply where appropriate in tests

commit 0d53c64106378888fbe22da30c63b036eb679b7c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Dec 16 20:31:57 2007 +0300

    REPR0 decorator for test

    rationale:
    ----------

    In tests, we need to check the behaviour of real __repr__ oftenly, but we set
    Basic.set_repr_level(1) on sympy import time, so __repr__ goes to __str__,
    which leads to confusion.

    To avoid this in tests, I propose we use REPR0 decorator for functions needing
    repr & str, and just use repr(...) and str(...) there.

commit f8423dde9c95c81e424175e953e5f82443931008
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Dec 14 09:14:00 2007 +0300

    Function: comments on twofold nature of __new__

    + small cleanup

commit b5dc6e839e6907fea0bc42c46e1416deec764be3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Dec 14 09:13:24 2007 +0300

    Function: fix torepr(), WildFunction: fix torepr() and tostr()

    f(x).torepr() previously returned:      "f(Symbol('x'))"
    but the right thing is:                 "Function('f')(Symbol('x'))"

    w.torepr() previously returned:         "WildFunction(Symbol('w'))"
    but the right thing is:                 "WildFunction('w')"

    w.tostr() previously crashed
    but the right thing is:                 "w_"    (according to Wild behaviour)

    ----

    Also, it would be good if repr(f) == "Function('f')" and str(f) == "f", but I
    could not easily find how to do it without class magic, so just let's leave it
    as it is for now.

    fix-for: #487

    Based on patch by Ondrej Certik.

commit 5967542fc38d70ba5da1eda88b4ee3f4b48b3342
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 12 22:46:21 2007 +0100

    f=Function("f") added to isympy

commit e10e967f4fa2377dcb9c684c51486379cc974b49
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 12 22:46:21 2007 +0100

    Differential solvers polished, tests written.

commit 2d9731decc72d751bbf41611ceb6d5651c2d9351
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 12 22:46:21 2007 +0100

    One more test written for Derivative matching.

commit 8bec17d60632d77f86b680770837c860e934ed7f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 12 22:46:21 2007 +0100

    RelMeths.__eq__() simplified

commit 852612225256bda771c0b546f134a99e0630aedd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 12 22:46:21 2007 +0100

    .subs() in Relational implemented, tests written

commit 3939a40224492e2f2c994b333a9a43e44b26d8e9
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Dec 12 22:46:21 2007 +0100

    Docstrings in function.py improved.

commit 07eaa5584597f8af362b9ba47adba97dace5f850
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Dec 11 00:31:06 2007 +0300

    risch: clarify skip reason for original Berstein tests

    They are too slow.

commit 708b193a388753cc273366eeac8a3b94d04613b2
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Dec 11 00:31:05 2007 +0300

    py.test: pass-through test outcome in XFAIL

    rationale: we need this e.g. for py.test's skip to work

commit 8e4c7f478578577410e885f6d0b42e6ceea9436d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 16:30:26 2007 +0100

    version changed to 0.5.8-hg

commit 6e88260621d3a11719e412dd3d06c2950025df30
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 16:30:06 2007 +0100

    Added tag sympy-0.5.8 for changeset b548987ff8b6

commit 2a503e7f37141d6b6577ce9d94df51f7fdb43594
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 14:44:07 2007 +0100

    version updated to 0.5.8

commit dba8eaeb26c9ef563ff54e284ceba650283a79b0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 02:00:55 2007 +0100

    setup.py sdist fixed

commit 6f946df5cf3ec724ded388da60d9ad502caed2ef
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 01:27:39 2007 +0100

    The speed of integration of polynomials improved (10x).

    This is done by trying to convert the integrand to a Polynomial and if we
    succeed, call Polynomail.integrate(), which is very fast.

    The code could still be sped up by some tricks, but this patch is a huge step
    forward.

commit 929cdd3dd27db657dc2525e56f0f20a0d4c026ca
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 00:46:56 2007 +0100

    pyglet updated to 1.0beta2

commit a4dd9ffe0a5921902a020833696e8e71b856e42e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 00:40:06 2007 +0100

    XFAIL the gtk test, so that sympy tests pass even without python-libxml2

commit f326217f963774f662a0a73a98c8905eb255e0dd
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Dec 6 00:08:59 2007 +0100

    README added to examples

commit 2c9556f20f7a9c718909e446ec2f0d0743e62a91
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Nov 29 08:53:32 2007 +0300

    var() from sage implemented.

    Based on patch by Ondrej Certik <ondrej@certik.cz>

    see: #206

commit 8511ea5eacf4af87775512cb0374327b95c1c5e8
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 27 03:43:27 2007 +0100

    test_pure updated to use Mercurial

commit 83d5cb753c679007f2664a15350eee226312da61
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 27 03:34:11 2007 +0100

    commiting the missing test for print_gtk

commit d0fe8bdd99120664f9c95aa1b4ce33fae612753f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 27 02:58:50 2007 +0100

    Import print_gtk by default and a test written for it.

commit 5092b9e03dd55341b50131979abc8d41edf3fca7
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Nov 27 01:38:50 2007 +0100

    refactoring of the polynomials tests

    Because they failed when executed directly. :(

commit b4e32d46e192bdeb82bd3f90de1c96c7e82ed38c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 26 20:36:11 2007 +0100

    Kent's finite elements example added

commit 09f4e54586a901284889c50e3b590502b1bef35b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 25 02:00:59 2007 +0100

    wrote test to show that user defined function works in limits

commit 94330b95a89f8a9bb54e7bcdb44758e19ed5cdd6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 25 01:09:24 2007 +0100

    renamed: nofargs -> nargs

commit e2ea91a24b0832bad6accd3512acbc08ff0d4068
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 25 01:01:56 2007 +0100

    SingleValuedFunction removed, we use Function directly.

    Technically, all code from SingleValuedFunction was moved to Function and all
    occurences of SingleValuedFunction were renamed to Function.

    Also "_eval_apply_power" was completely removed, because it became redundant,
    _eval_power was moved to Basic, both changes were necessary, otherwise tests
    failed (a wrong _eval_power was called).

commit 1aecda3f6d72f51720976f5767ce2c8416426e82
Merge: 98c0de7 c9b7f3c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 25 00:38:37 2007 +0100

    merge

commit c9b7f3c48aea29c5f00d5cf8244df8e567098c88
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Nov 25 01:38:06 2007 +0300

    subs_dict: make it unambigous when arguments overlap

    consider
        e = x*exp(x)

    when we do
        e.subs_dict(x: y, exp(x): y)

    the result depends in which order elementary substitutions are done.

    So we *have* to proceess 'exp(x)' first. This is achieved by topologically
    sorting substitutes by 'in' criteria.


    fix-for: #467

commit a031345fa4ce7af23188c29cea7e717756b4c7f3
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sun Nov 25 00:42:09 2007 +0300

    geometry: use dummy Symbols instead of strings

    Because when we use strings, we are at risk of collision with outside world.
    I've only converted Ellipse and Circle .equation -- don't know, maybe there are
    more places to convert.

    spot-by: #467

commit 98c0de7c9a4267d2ca4e2fdfa0257e4e972a6a4c
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 24 21:03:06 2007 +0100

    Made documentation in isympy more clear.

commit bcbd19243f8361737d6381bd422b62530acae57f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 20:51:47 2007 +0300

    ylm: use assoc_legendre

    like we use legendre for Plm

commit 5b67cd4060dff8d6626ca06d72f37fc0608b2134
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 20:43:37 2007 +0300

    Associated Legendre polynomials.

    We define them through recurrence relation. Maybe it is not the best way to go,
    but at least it does fit to how other polynomials are defined.

    Let's have it consistent?

    ----

    Unfortunately, without simplify I failed to make the result of assoc_legendre
    pretty as commonly shown in the books and wikipedia, and with simplify it is
    pretty, but the performance is bad.

    So, instead of using reccurence formula, I used the direct one. The performance
    still benefits from memoization.

commit ffde97dfc5f39e06f617da55d305d0671803e405
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 20:43:36 2007 +0300

    Associated Recurence Memo

    This is needed for remembering 2-indexed sequence associated to 1-indexed base.

    We'll need this when defining assoc_legendre

commit a29af17138b332db790f52eaba6e113d742d6654
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 20:32:50 2007 +0300

    simplify: export radsimp

commit 7ae2b429f5ab39d277bfce97226b3f15f601f23e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 24 17:20:11 2007 +0100

    All methods from SingleValuedFunction moved to Function.

    No other change made. The idea is to get rid of SingleValuedFunction completely
    (by renaming it to Function) in the next patch.

commit b858a5809419fcd977dd33e3cc7477e329824284
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 24 16:58:54 2007 +0100

    doctest for simplify() added

commit 7216260ccadc17f1686d77e7896ef52e0111885c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 17:43:08 2007 +0300

    ylm: use legendre

    rationale: there is no reason we don't use already present legendre. All tests
    rationale: pass.


    BTW: py.test .../test_spherical_harmonics.py  now runs 2 times faster. This is
    because legendre is done with memoization, and it pays off.

commit df5c2eeded65dcf0e091c307ab3a1a52674e8f46
Merge: 1563f4c 5e1c786
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 24 15:26:06 2007 +0100

    merge

commit 5e1c786079b2432ad0b0e133156aca473559daec
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 17:16:00 2007 +0300

    pretty: draw negative powers in denominator nicely

    e.g.

    y*x**-2 :

        y
        --
         2
        x


    sin(x)**3 / cos(x)**2  :

           3
        sin (x)
        -------
           2
        cos (x)


    ------------------------------

    And previously we did (which is ugly):

    sin(x)**3 / cos(x)**2  :

           -2       3
        cos  (x)*sin (x)

commit c686cbc5ed295f5f2169668ca45634a43ba29e65
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 17:03:37 2007 +0300

    risch: add link to the Poor Man's Integrators and original tests

    It seems our risch_norman is very close to the Poor Man's Integrator (PMINT) as
    written by Emanuel Bronstein. Thus I decided to add link to PMINT and add
    original tests.

    Unfortunately the tests do not pass now, but I think it is nontheless right to
    include them to know where to work in the future.

commit 0822c6ef06f36a94fc6683438ffd02f6e6aaff8c
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Sat Nov 24 14:21:02 2007 +0300

    isympy: fix minor typo

commit 1563f4c8653494047e0ee9a28dd220fc6eb6b939
Author: Goutham <devnull@localhost>
Date:   Sat Nov 24 12:54:48 2007 +0530

    Fixed a small error in residue.py
    removed the function quad_residue()

commit a106a0c3d6d6fd490d4c53f06b6e9ba0a176714d
Merge: 5645a4e 9b7e98e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 24 03:28:42 2007 +0100

    merge

commit 9b7e98ea0bade4d8248d5dac922ca8f6a7cc2e57
Merge: d74d317 5a0151e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 24 02:39:46 2007 +0100

    merge

commit 5a0151e442f2bffc54b33942b9b2f8a19ee08619
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Thu Nov 22 11:55:42 2007 +0100

    Added Goutham to credits

commit 06c5308902d63ea8e468a17405bc66bf7828d7da
Author: Goutham <devnull@localhost>
Date:   Thu Nov 22 01:25:58 2007 +0530

    Added more number theory functions
    Also changed the init.py in the main sympy package to include
    from ntheory import *

commit 5645a4ec69b79512de9244f0f506323d6ebbb68b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Mon Nov 19 08:47:13 2007 +0100

    The way of creating new functions was simplified and tests for it written.

commit d74d31716d13106bc778fd863e7287e6d458bf15
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 18 17:22:19 2007 +0100

    Spherical harmonics (Ylm) and real spherical harmonics (Zlm) implemented.

    * functions Pl, Plm, Plmcos, Ylm, Ylm_c, Zlm added
    * implemented using the convention:
        http://www1.elsevier.com/homepage/saa/eccc3/paper48/eccc3.html

commit 839d0d29663cbe67be5956b58ee684f4cd031da1
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sun Nov 18 14:26:28 2007 +0100

    docstring for Function.canonize() added

commit 5bd96ca126a7baf3a2ca42a06faf0dd2c93d763f
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 17 22:29:51 2007 +0100

    Let's use a better symbol for ImaginaryUnit.

commit d7b35da421017b63b2cf82e69d1962052c1e1421
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 17 22:21:03 2007 +0100

    _eval_apply() converted to canonize()

    Also canonize(self, ...) was converted to canonize(cls, ...), because
    canonize() is a classmethod.

commit fdc86d70f2603dd3104c73a23045fce5fb178454
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 17 00:48:48 2007 +0100

    Setting the version to -hg.

commit 1cd15d202f82798375de9ab7c6a99aa46a0e6e65
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 17 00:43:13 2007 +0100

    Added tag sympy-0.5.7 for changeset 16b03611b402

commit 15730998189176c8e5a31d944a098202969238e6
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 17 00:43:02 2007 +0100

    updating version

commit 703265c19ff0d187343e52823d10b1e21128f71b
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 17 00:36:04 2007 +0100

    SymPy now works nicely with SAGE.

    x == math.sin returns False now
    Symbol == math.sin works
    x.cos() returns an AttributeError
    sympify("  x ") works
    sympify tests moved  to test_sympify.py and improved
    use _sympy_ method in sympify if provided
    _sage_() implemented for exp and log, tests added

commit f91fb4f5a7cdf5369f551018a21a8ce6b9538fb4
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 10 22:53:52 2007 +0000

    TODO info improved

commit 50c2a95bdf1ce2b87dcd8f6aa91436e45e8d9498
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Nov 9 01:35:30 2007 +0300

    polynomials: content() -- partial fix for cases where content is symbolic

    e.g. Polynomial(y*x, var=x) content is y

    This partly fixes #422

    What remains to be done is cases like
    - Poly(sin(y)*x, var=x), and
    - Poly(sqrt(2) + x)

commit c084717e46bc08b5f223db262959b17459923e28
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Nov 9 01:30:42 2007 +0300

    polynomials: as_monic() -- clarify on how leadcoeff can be an expression itself

    + fix spelling in a few places

commit 147c63afc44401ebed03ddc595b47cc7885fd38f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Fri Nov 9 01:24:06 2007 +0300

    risch: clarify comments a bit

    spot-by: #442

commit 43fd62515a3517144f3a1bed6a899d7261713c1d
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Nov 10 12:32:05 2007 +0000

    Fredrik's patch for convergence acceleration.

commit 751c931054ddb14d27dc20e005543c533bbe76b8
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Nov 8 21:46:54 2007 +0300

    .hgignore += *.swp

    rationale: VIM temporaty files are not intresting

commit 9feb70958207b687be0528e4143cb4005981e40f
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Nov 1 13:24:50 2007 +0300

    isympy: try to be more prettier by default
    We use 2D output, and unicode when available.

    fix-for: #425

commit d686515a987953d566c3512b409c9f84dd3096fb
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Thu Nov 1 13:24:14 2007 +0300

    pretty: add missing unicodedata characters in order to be fully functional under python2.4

commit 685fa59dc547c37470848440ce28ba6149232f64
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Oct 31 20:03:49 2007 +0300

    .hgignore += tags

commit f25e757d365ae93bd0bab3aae6e8aa317f9ef308
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Oct 30 02:54:19 2007 +0100

    changed version to -hg

commit d17af2b3a9ab0acb6fa54d197abb974885f5110e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Oct 30 02:47:08 2007 +0100

    Added tag sympy-0.5.6 for changeset 5fb2967dad8b

commit ffe3ee7e7cec4912756c4dc420e46af47554bafe
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Tue Oct 30 02:46:46 2007 +0100

    changing a version

commit d216b783962ada33a49388af39a6bb49438881f0
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Oct 27 15:06:07 2007 +0200

    Improving the fix to 339.

    So that it doesn't use the ugly silent try, except && eval combination.

commit cc275dd65d417c67505e692a3a4f438da4a796e5
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Sat Oct 27 11:32:22 2007 +0200

    Fixes the sympify("exp(x)") problem, issue 439.

commit 98e996ca4b89c6cebcec60f5574621cd8342006e
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 24 21:30:06 2007 +0200

    Implementing _sage_ methods in some of the basic SymPy classes

commit e445147cd048229ad68bec89d336b0cfbef46eb5
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Wed Oct 24 22:19:15 2007 +0400

    Initial .hgignore

commit 50b41043558990af91badd711438b0a265fbba65
Author: Kirill Smelkov <kirr@landau.phys.spbu.ru>
Date:   Tue Oct 23 13:46:44 2007 +0400

    isympy: hook in-tree sympy into python path if running in-tree version of isympy

    fix-for: #436

commit 6dbe908d4049aac6c175e9e6dce9b43e12c12519
Author: Ondrej Certik <ondrej@certik.cz>
Date:   Wed Oct 24 18:26:56 2007 +0200

    Added tag sympy-0.5.5 for changeset 0e440111e2d5

commit 2e2d89f6d2290893ac14bb8ae5d6b08a0febbd86
Author: convert-repo <devnull@localhost>
Date:   Wed Oct 24 07:20:49 2007 +0000

    update tags

commit 99a857f5e03bd161724956f8f56c060911c72ce0
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 20 22:10:01 2007 +0000

    sympy version updated

commit 4a903e3f284b3ffddb40afbcaf4043d545b0950a
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 20 21:46:05 2007 +0000

    making SymPy (pyglet) lintian clean

commit 0e3ac65b61d96365491f689c25b07551b314363f
Author: ondrej.certik <devnull@localhost>
Date:   Wed Oct 17 19:56:00 2007 +0000

    Fixed a bug in Matrix.col

commit ff47d1ccee7c8886296dd88670f2bf8b23616407
Author: ondrej.certik <devnull@localhost>
Date:   Wed Oct 17 15:44:02 2007 +0000

    using explicit import instead of from sympy import *

commit 584832c321e742841519bfff5ff031b605b903c8
Author: ondrej.certik <devnull@localhost>
Date:   Wed Oct 17 15:37:00 2007 +0000

    integrals tests refactored

commit 3e50b7b106399c7d3e8b9f23384ab330ac253913
Author: ondrej.certik <devnull@localhost>
Date:   Wed Oct 17 15:33:02 2007 +0000

    a test for issue 433 committed

commit 5f945c93d19e0cf5c856a4e2c81ebb61e3544e9e
Author: ondrej.certik <devnull@localhost>
Date:   Tue Oct 16 11:24:03 2007 +0000

    fixed a typo

commit 4d0ac6aa344b2d1d4a2c2f4925a90040544892b5
Author: ondrej.certik <devnull@localhost>
Date:   Tue Oct 16 11:24:01 2007 +0000

    updated documentation for limits_series.py

commit 5b7e342a47dea482d7967ca0f6236bf25e7d41dc
Author: ondrej.certik <devnull@localhost>
Date:   Tue Oct 9 11:01:01 2007 +0000

    removing XFAIL on a working test

commit 33cd00244226ede66f84bf836353f96285007750
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 16:23:00 2007 +0000

    commenting the failing test

commit ee8df100b624a46c9ba29bc6b27c74cfa4bef0e5
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 16:12:04 2007 +0000

    409 fixed

commit f397e998179c464b00ebf3b6309d21017893cbef
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 16:05:02 2007 +0000

    don't expand log(x*y)

commit 62b0f5a9209b7fa5f22efc979175d11d0c8dec6a
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 15:56:00 2007 +0000

    not expanding log(x**2) by default

commit 9a9f8a36fc77611fe2d8c553609f0553b5b01671
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 15:31:01 2007 +0000

    documentation in log series expansion improved

commit ac5ea9413be8a06e96c8b2dae8a02c05eb406edb
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 15:30:02 2007 +0000

    documentation in log series expansion improved

commit 41e7d62b26914d76ba0d7466bf71292f88b18ce1
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 15:05:01 2007 +0000

    issue 408 fixed, corresponding limit uncommented

commit 84b816a7ff7ccddc2fc02d51d008437b2f589bd5
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 15:00:05 2007 +0000

    issue 407 fixed, corresponding limit uncommented

commit 6af2c2335176503fdc6721474b9ec470901404f5
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:56:05 2007 +0000

    issue 403 fixed, corresponding limit uncommented

commit 88c14305883300b57a11cd5fe5aadc6039c2f452
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:52:04 2007 +0000

    working tests in demidovich uncommented

commit d8f5dd519a040b795f7ee7d6f06c89e237a65c81
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:50:05 2007 +0000

    test for 404 written

commit 5479b566e205baad8fa3c6e39c4e67bd4cae1204
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:48:01 2007 +0000

    working tests in demidovich uncommented

commit 74f92ef917bf6ee97e8faf2d6d3b76406beff1c9
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:45:05 2007 +0000

    test for cos also written

commit 60a0ce5925d12e5bc34c13693cf68c51b7073c2e
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:42:01 2007 +0000

    issue 402 is working, test committed

commit 2f618d04c0942543dfa1a1ffb8090d679f762924
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:37:02 2007 +0000

    one more limit is working now

commit ebf125b14723ce81d7c887d7f36e8b136c94b9ea
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:35:00 2007 +0000

    test written for 406, that started to work

commit 4170549dbd5ae249b6a039f45fe5eb76c293e20f
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:26:00 2007 +0000

    issue 416 fixed

commit e2261972a97aa65830a2b97c4672022d34fa4e79
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 14:19:02 2007 +0000

    refactoring mul._eval_oseries

commit bc6234b9cb1acadd31d654b40fbed9297e12e270
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 13:34:01 2007 +0000

    don't expand trigs in oseries

commit 2fc26cd41b838118c7b46d37f1dad3918e3a3c23
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 13:24:05 2007 +0000

    tests added for the new functionality in series

commit e4fa6c78e51390a00fbb17696bd6d6c2ced0a4b1
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 13:15:04 2007 +0000

    sin(x+1).series(x, 2) now works. Also documentation improved.

commit 7d30126039c8aefc823d2932d584a6509a2d01e9
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 12:18:05 2007 +0000

    refactoring base.series

commit ff972d6bd582adf3277dd977d83e94550a73be8b
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 01:29:03 2007 +0000

    the new limit can now be used in the series expansion

commit e710119f033d5a9e015b4c9edff256348ba494bf
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 01:21:00 2007 +0000

    order.py and log was refactored

commit 80b370d74e0aceb593106f2621c41677514560ef
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 00:56:01 2007 +0000

    refactoring

commit 686fd56f936d1bae04547e283f08173a9a7a68e9
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 8 00:25:04 2007 +0000

    refactoring for making the limit in Order more robust

commit 13b34b43999b28282b82d31df2ef46700bc9d69e
Author: ondrej.certik <devnull@localhost>
Date:   Sun Oct 7 23:51:05 2007 +0000

    test_order.py was refactored

commit 37b9835d4c71197f0c07f8483b8d0e1773bfe93f
Author: ondrej.certik <devnull@localhost>
Date:   Sun Oct 7 23:03:04 2007 +0000

    Documentation to the

      * Order class
      * sympy module

    improved.

commit 35dec155cdc618fe837b820c1d70b3999df015cd
Author: ondrej.certik <devnull@localhost>
Date:   Sun Oct 7 20:50:04 2007 +0000

    man page updated to reflect the latest changes in isympy

commit b88fce2fb702ba95b3af221534d9c37dfb755eca
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 6 17:10:01 2007 +0000

    log(x**(2+log(2))) simplifies correctly now

commit ffac626ed82568440456efa1402b760149956aec
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 6 11:46:00 2007 +0000

    a comment added to test_series

commit 9d2df75685a0a8175672507daa49e0600e69ab47
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 6 11:44:03 2007 +0000

    make a better bug report when leadterm() fails

commit 5b292f50c9bc9e7b7e244b0c83cc29475e64e906
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 6 11:05:03 2007 +0000

    small cosmetic changes in README

commit 2b1bbc96a19558e799df76553e153bc382b82195
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 6 09:58:02 2007 +0000

    refactoring the code in isympy

commit dd734ebe5c681457ed5dae00048e351d48e23c75
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 6 09:49:04 2007 +0000

    make from __future__ import division work for python console as well

commit 86f6ab4c7ff8788e1bc73187137dbe6802240b21
Author: kirill.smelkov <devnull@localhost>
Date:   Sat Oct 6 08:46:00 2007 +0000

    Function.count_ops: count function application as 1 op  (was 10)

    see: #365

commit 1815ccf8ea8a7d99736d9b15c10d2ddf41162faf
Author: ondrej.certik <devnull@localhost>
Date:   Sat Oct 6 01:57:03 2007 +0000

    test for a series bug 364 added, but XFAILed, because sometimes it works, sometimes doesn't.

commit ef95d618e1fda2dc6b50a0edf343a7b321467527
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Oct 5 20:10:04 2007 +0000

    pprint: add support for multile indexes in unicode mode

commit 7e74ebdf2701f0ab213a6e5ba47b7860fcf90cff
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Oct 5 16:41:04 2007 +0000

    add abc module

commit cf37fbc4761e72fb1af697dbaad49cd7a0df6c7f
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Oct 5 15:45:00 2007 +0000

    fix statistics tests

commit 1310e636ba3673ded7182b9ab6f7bc480f495f19
Author: ondrej.certik <devnull@localhost>
Date:   Fri Oct 5 15:06:01 2007 +0000

    version updated

commit 2f112ee80eadd68eba28224bd7cc4a568ed0cb42
Author: ondrej.certik <devnull@localhost>
Date:   Fri Oct 5 14:58:04 2007 +0000

    fixed setup.py and some doctests

commit ff4f5fcb20f3996a9ab5ceae30e934bf5c726929
Author: ondrej.certik <devnull@localhost>
Date:   Fri Oct 5 14:28:01 2007 +0000

    fixed some more problem in powering integers

commit 16f66b845dc3c720d9967a14f78f203c7be3ac78
Author: ondrej.certik <devnull@localhost>
Date:   Fri Oct 5 14:09:01 2007 +0000

    issue 417 fixed

commit ee3b2121fc9fd518607394d1f087d7c170ef4caa
Author: ondrej.certik <devnull@localhost>
Date:   Fri Oct 5 13:36:02 2007 +0000

    fixed the last bug in solvers

commit e90ee50fddd70380e5a19251169b8106457dacb8
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 20:32:03 2007 +0000

    #385: uncomment passing test

commit 222bcbf08252a992e118023a1c398af5b51f6674
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 20:20:02 2007 +0000

    statistics: push/pop Float precision on tests entry

    This is needed on a whole py.test run where another tests can change working
    precision.

commit afe7b660e56733ffb8ad9c156f70f049151842d0
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 19:47:01 2007 +0000

    test_quad.py: workaround abs / sympy.abs conflict

commit bf4a17e7790a44217033ea3a0cffd31d807ded65
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 19:29:01 2007 +0000

    simplify: put disabled tests under XFAIL

commit 7bff1d452943d266a5ab42c5c02e0a790a13cfc4
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 19:19:04 2007 +0000

    #376: put disabled tests under XFAIL

commit 1afb9f9746aea170e8742d1922cb70294fd1b679
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 18:57:01 2007 +0000

    test_sums_products.py: mark disabled tests as XFAIL

    see: #311

commit d24186c82ca78923528e8163db70ed4e36ce15df
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 18:39:04 2007 +0000

    Convert specfun.factorials to new-style functions

    + enable all tests
    #232

commit 18ce243743cda7db08e0df9d59a80f5ae4620d1a
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 15:29:00 2007 +0000

    Move invtrig tests from test_functions.py to test_trigonometric.py

    And enhance them slightly.

    #225

commit 5e63f0ee4c4e9d48a7058bf1d48b09454242907f
Author: ondrej.certik <devnull@localhost>
Date:   Thu Oct 4 15:26:02 2007 +0000

    second order ODE now works. :)

commit 7dc01b640b424681de43d882ba4f6413cf14b704
Author: ondrej.certik <devnull@localhost>
Date:   Thu Oct 4 15:23:02 2007 +0000

    found and fixed 2 bugs in derivatives substitutions

commit 444da2233a293f87c9f4b4d2fefb8436d8bfaffe
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 15:17:01 2007 +0000

    Some invtrig fixup

    spot-by: #225

commit b5c72fb5579e08db2b18adcfde29891ebb871461
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 14:59:05 2007 +0000

    #216: uncomment disabled tests as XFAIL

commit 9e6a301e706cb1454720a0ee39cf2fa63d9a3fec
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 14:41:02 2007 +0000

    Fix mathml printer after #381

commit e199186d730a2569cf29d82a570cd9e27dccefa4
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 14:28:04 2007 +0000

    Fix latex printer after #381

commit 47f5f9711f02844af6f525d38435ec8ecf999b3f
Author: ondrej.certik <devnull@localhost>
Date:   Thu Oct 4 13:16:01 2007 +0000

    XFAILING a test, that fails, due to a caching bug

commit 91e9f8da89d87959aea73898eff119466f26880f
Author: ondrej.certik <devnull@localhost>
Date:   Thu Oct 4 13:08:05 2007 +0000

    information about a bug 417 updated

commit b27da5c9fcffd20fd6e11ae3bc089ef7c47b92f5
Author: ondrej.certik <devnull@localhost>
Date:   Thu Oct 4 13:04:03 2007 +0000

    uncomenting working tests in test_arit

commit a5a3bf299fcc22ed830aa89b90c2a9c8ec0ee1dd
Author: ondrej.certik <devnull@localhost>
Date:   Thu Oct 4 13:01:02 2007 +0000

    fixed two failing tests

commit 7f66fde75ea94693f466ee8baf63e25c0111cc52
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 12:08:01 2007 +0000

    pretty_symbology: print unicode-related warnings only when unicude is used first time.

    #396

commit e3f15100805c326d4810e6da67479f36f3d26c39
Author: kirill.smelkov <devnull@localhost>
Date:   Thu Oct 4 07:50:05 2007 +0000

    pprint: robustify unicodedata access

    This time tested with both python2.4 & python2.5

commit 8036335798cc7612d559d965ec3bf1a61bb4ef03
Author: ondrej.certik <devnull@localhost>
Date:   Wed Oct 3 17:09:00 2007 +0000

    made test_linear_system() test work

commit 71ebda68a321630a47c985dbf3a4a53fdce530c2
Author: ondrej.certik <devnull@localhost>
Date:   Wed Oct 3 17:08:05 2007 +0000

    made test_linear_system() test work

commit 61614a8ca573f04c7ee532dc158e06f563b4f49b
Author: ondrej.certik <devnull@localhost>
Date:   Wed Oct 3 16:55:04 2007 +0000

    make it work with python2.4

commit 8d8189ddc8ac350d1e2bf9cc8fe7ff1954dde0f1
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Oct 2 16:31:04 2007 +0000

    pprint: rework & add nice unicode output for integrals, fractions, braces, etc...

    This is somewhat a draft.
    Idea: Boris Kocherov <bkocherov@gmail.com>

    To see how it looks run isympy in unicode-capable terminal & type:

    In [1]: pprint_use_unicode(True)

    In [2]: pprint sin(x/(y+1))

    In [3]: pprint Integral(sin(th)/cos(ph), (th,0,pi), (ph, 0, 2*pi))


    see: #396

commit 3ed9b0138d8e8c24806f1ecba88623a6e6a39539
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 19:10:05 2007 +0000

    enabling the working tests for limits_series

commit 5a2895397777857c3a0ecf650fdb2c91b97ffcb6
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 19:00:01 2007 +0000

    table of limits removed

commit 8c56a2eceb9cf72815fa05ea8267e15e84cb5956
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 18:38:02 2007 +0000

    the last bug is triaged

commit 9c20a180515edab5c9ede544f6c82de8310a52a1
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 18:04:01 2007 +0000

    another bug triaged

commit bf3e3c6e93f4504f0a9ea0530a287d6a76482d9d
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 17:14:04 2007 +0000

    added test for the issue 364, bug triaged & reported

commit 211e66dab060623b3369c7bc75a34bb958650458
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 16:56:03 2007 +0000

    all bugs in demidovich triaged and reported

commit efb6237dd728c107d4a869eb9e23a7fbad0dbf5f
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 16:32:03 2007 +0000

    two more bugs triaged

commit 4e9eea5f58f5a96f8d5f96e3679787e95780f57f
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 16:24:05 2007 +0000

    document why the failing limits fail

commit 697e4be14246340d96864e73168ff6ee0bc6a8e3
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 15:34:04 2007 +0000

    tests in demidovich refactored

commit cdb9e1d0fea506c4a67473c38650fb0bd880dcda
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 15:15:03 2007 +0000

    test file swapped

commit 78d269f4fd7f4a3f31b48bc9a09dae2a7da4f652
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 15:14:02 2007 +0000

    moved new limits to limits.py, old limits to limits_series.py, fixed tests and documentation

commit e5b3265fb88bfe445bf43f85098cb285a1dd0463
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 14:50:03 2007 +0000

    Fixed all remaining tests in test_limits2.py :)

commit 3141b16377ef6aeb5bf694a5f95d17b1caebbd44
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 02:34:04 2007 +0000

    print useful information when the series fails

commit 16e2cc2256db2c8f4c6a63cccc50f878e15377c5
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 02:29:05 2007 +0000

    improving docs in test_limit2

commit c74eabf734493da8ac3e5513d97c73a9793cab43
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 02:28:00 2007 +0000

    improving docs in limits2

commit 93e562fbb46c551ade7e58be9b490876b09dc99a
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 02:16:05 2007 +0000

    new limits seems to work

commit 20e76f8b8edeb376ef00519d6d93124458ca6071
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 01:31:04 2007 +0000

    new limits almost work

commit 8c17fbca612880c1ded0d99c97f6de2cdd501d06
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 00:18:01 2007 +0000

    let's use the new limit in mrv

commit d640f0240dbc13d27fd35a744202e27c88426219
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 00:15:05 2007 +0000

    tests refactored, so that more tests pass

commit 9d41d4e670164762acb0259f290679af400d3e4b
Author: ondrej.certik <devnull@localhost>
Date:   Mon Oct 1 00:08:05 2007 +0000

    another test in test_limit2.py passes

commit 5a7cfd4804e22bba329d0fe3b39c16cfe67c38cf
Author: mattpap <devnull@localhost>
Date:   Sun Sep 30 15:46:03 2007 +0000

    Fixed Function.count_ops(), this makes risch_norman() work again. Removed recent hacks from risch.py.

commit 6d5fcde961c232962988ceb818cf0753d9ead8b5
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 23:06:05 2007 +0000

    removing the forgotten print statement

commit e780110df4d65a14d8088b28254c9cad16685f5c
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Sep 29 21:13:01 2007 +0000

    test_integrals: 1/x should integrate to an analytic function

commit 4c6a0221b60b504e1194fc523169ec901e6f9759
Author: kirill.smelkov <devnull@localhost>
Date:   Sat Sep 29 21:04:04 2007 +0000

    risch: hackish, but more-real fix to lots of recent problems

    After Function -> Function2 transition risch coudn't even integrate elementary
    functions.

    The problem seems to be related to the fact that integration variable sometimes
    is the first (maybe just not last) item in terms.

    I simply move it to the end of terms and this tweak appers to solve a lot of
    problems.

    I've also killed explicit integral tables crated by Ondrej -- they are not
    needed now.

    No need for new tests -- existing tests catch the bug.

commit ef0cd39fdb5c8c41e55b6ce0c7d093cc9ea8d243
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Sep 29 19:52:05 2007 +0000

    uncommented half of sums_products, with small changes to get the tests to pass, as a first step to get summation and all products working again

commit b493c5b46cd54a83fff8e2e8523d0853e2ad8aa3
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 19:26:05 2007 +0000

    few more tests added

commit e4e2568dd9d9db8a5dba5dde05cac59946c4dacd
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 18:51:01 2007 +0000

    use new limit in sign

commit b495b8047582990f3e857f444c4cef5cb0a1800a
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 18:49:05 2007 +0000

    debug prints implemented and a few bugs fixed

commit 7bd26327e2846d7ceedeac26242c54515bf6b604
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 18:10:02 2007 +0000

    few more limit tests added

commit 48d73b5a5d20aeedba9f29be816fd885bd31aa4a
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 17:53:03 2007 +0000

    new tests added

commit 95b8386c3627c2154d75ec0e5d5a999dc99c321c
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 17:00:02 2007 +0000

    another test added

commit 56da0d0458e66e97c440689167d95f7a67b8f6e8
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 16:41:05 2007 +0000

    tests for rewrite added

commit 8f9f4cb08a99e4b4787e5713933808904e7de44d
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 15:49:02 2007 +0000

    new limits mrv tests added

commit d553b211613fee60ec416aeb5422ab93bec1717b
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 14:57:05 2007 +0000

    starting to fix limits

commit 79f194dd796aeeb98ad4b6d28243fa5c3ca52537
Author: kirill.smelkov <devnull@localhost>
Date:   Sat Sep 29 06:52:00 2007 +0000

    pprint: trivia fixup after Function2 -> Function transition

commit f9aab93549362a90f2fcfce16888d8d5406f1f4d
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 02:46:03 2007 +0000

    Function2 renamed to Function

commit aadea83c80e6e638e3a58e82b15a306c7c770f13
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 02:36:02 2007 +0000

    another function problem fixed

commit 0d4e805e80782ed9509e5b57aa7fa140430b998a
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 02:30:05 2007 +0000

    fixed unknown function derivatives, 3 tests started to work

commit 09c116776f595171c550278a0d4162619ef314aa
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 01:57:02 2007 +0000

    Apply & company removed for good. :)

commit 407621e91725a62a80ad97c94c826755041e241c
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 01:45:05 2007 +0000

    getting rid of Apply

commit b5791250084f226ceca2c955d69297285ca7a1fe
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 29 01:35:04 2007 +0000

    Getting rid of Apply

commit 0fb67e580ce88a4bde6dca9863d473634b9e0537
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 23:32:00 2007 +0000

    refactoring of Apply

commit 952452990e03f7e3908dce89ce5ddee52fd024ef
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 23:21:04 2007 +0000

    preparing for Apply removal

commit 6665e5ddacdc24d1049698f015b037448621a36b
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 23:14:02 2007 +0000

    preparing for Apply removal

commit bd85623ddcb22f047371ecf996767eb3d3f7fc3d
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 23:04:01 2007 +0000

    getting rid of Function completely. :)

commit d38b117ad20472784b2d717cbfe5b88e4c5a555d
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:52:04 2007 +0000

    polishing function.py, had to fail another 2 tests in pretty printing

commit 3ae64f09dd0e902b8f8ac3d1274a470d8c707045
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:44:01 2007 +0000

    polishing function.py, had to fail another 2 tests in pretty printing

commit 8f9019ceec69c77e6e55d5e82bc75697f2ed7a12
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:33:03 2007 +0000

    polishing function.py, had to fail another test

commit 8f6562f607d6d01a52eb93f039047457e254268b
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:14:01 2007 +0000

    preparing for Function removal

commit 03e664fc6bea178a2c693cf9884956ea4cd50a75
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:13:05 2007 +0000

    preparing for Function removal

commit 496c3238702c850a24757979786b4aa3143bbd5d
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:12:05 2007 +0000

    preparing for Function removal

commit 04c809f1ea03be3bae70be296a58d13783f71ccc
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:11:00 2007 +0000

    renaming Function2 -> Function in test, in preparation for Function removal

commit ef9378e8292f1bc7dc3537b719586d574371bc43
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 22:06:00 2007 +0000

    polishing function.py

commit 5cffe3fd0d122dae95ffe6d2ff50208bbb33c35a
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 21:55:04 2007 +0000

    polishing function.py

commit dcce07d97a72b6d6ddfa9ca48bad23c3447190cb
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 21:25:03 2007 +0000

    polishing function.py

commit 6ed663a0a9c666782ec256fbe467cc9e68881ef7
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 21:01:04 2007 +0000

    polishing function.py

commit 0d18f5dd1498ac4420dfeeea745fdca6708ca290
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 20:55:04 2007 +0000

    polishing function.py

commit 4d730e9d4a7d6f396dfff4621d69e96805305aef
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 20:42:05 2007 +0000

    polishing function.py

commit 9e3639cf7f9ea2343ca8a3235ca41c897e1ba568
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 20:35:04 2007 +0000

    removing S.FD

commit 23ffa3a3c5b0965f3f5cd1fccd95dad33017fec2
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 20:33:02 2007 +0000

    getting rid of the old interface, in steps

commit 5beeb31bf5879409e0aea3845fe90b6f2053752f
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 20:16:04 2007 +0000

    floor and ceiling moved

commit 82d5df65788101483d07d37c833f45066c0091e9
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 20:10:01 2007 +0000

    combinatorials/numbers.py converted

commit 6930ee8507970a35333bb26cad4286384cf0a940
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 19:56:04 2007 +0000

    zeta and eta moved

commit 98131adaa93b9d76e58cb1122854938dfa848416
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 17:58:00 2007 +0000

    sympy version updated and isympy prints more useful information.

commit 69efeddf5d416980b20448836165fb0302445bc6
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 16:32:04 2007 +0000

    polynomials fixed

commit 488f5ca49a636fd962779a648d77e306370edf3c
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 16:25:03 2007 +0000

    [2/2] port factorials to new-style functions

    Fix factorials users.

commit 8893cd3cf2b83753ceebb789f195c66d17c342a0
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 16:21:03 2007 +0000

    [1/2] port factorials to new-style functions

    see: #329

commit 1ab5a83275dd331267b72c839ce8b10c6982c5bf
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 16:19:00 2007 +0000

    Basic._eval_apply_subs should be classmethod

commit a49534b7e693bafa5110d5a66d3dd1becdacd34b
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 15:45:04 2007 +0000

    documenting the problem in sqrt()

commit 013e5ce1e29e326f4cf5db38f6041f3ba7346e99
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 15:33:02 2007 +0000

    the other doctest bug fixed

commit 7c4ee846b2cc1178498fc2423c4b5e128a8e9ce3
Author: ondrej.certik <devnull@localhost>
Date:   Fri Sep 28 15:25:01 2007 +0000

    fixed the doctest bug

commit b19d29b73da4248418cde8ea46597994dbabb188
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 14:55:01 2007 +0000

    Reenable some tests with passing XFAIL

    NB: left is text_exp2 in series/tests/test_series.py
        If it is unmarked -- another tests fail. Probably a caching bug?

commit 641a96594c0319762ee30ad3684db0c027b905ad
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 14:37:03 2007 +0000

    limits: kill @XFAIL on XPASSing tests

commit c14e1ac28114ded52b3ec5e8c860bce3316b6fa2
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 14:22:04 2007 +0000

    [2/2] migrate gamma and friends to be new-style function

    Fix gamma users.

commit 38796d3a013c2647a52c90f50f1a4d74b808ec5f
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 14:21:05 2007 +0000

    [1/2] migrate gamma and friends to be new-style function

    #329

commit a1705d636872e3537ef010ad1e8c5e41834088f7
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 14:20:02 2007 +0000

    SingleValuedFunction -- cosmetics

commit eddcd0bc5610a398261d84a8ea1fd3aa86a279ac
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 28 14:19:05 2007 +0000

    Basic.rewrite -- add support for new-style functions

commit 16f95739a928ec26a77186f023130371527b4603
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 18:23:05 2007 +0000

    single-valued-functions: move generic _eval_apply_evalf to common place

    + temp. abs._eval_apply_evalf

commit e0435125bc9ec341e494753eba373fb698b6061f
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 18:22:01 2007 +0000

    erf: migrate to FunctionClass

commit acb3a38e1e169312ef255ac048e8be92eeeb9621
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 16:27:03 2007 +0000

    Importing Function2 by default

commit 53a543e6282197d27bfa8865ca1c8cfd10660127
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 15:58:00 2007 +0000

    [2/2] functions/hyperbolic.py -- migrate to FunctionClass

    Fix hyperbolic users

commit 3d15a1919d1770bd9890d688dcd714faebc1caa5
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 15:56:05 2007 +0000

    [1/2] functions/hyperbolic.py -- migrate to FunctionClass

    Sinh -> sinh
    Cosh -> cosh
    etc...

commit 70c3728a414c839ecf222b57976cf04d0a1ecc17
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 15:17:00 2007 +0000

    py.test: big do-not-commit warning when testing fails

    + cosmetics

commit a52bba727dd83acc129494e764c64714ff2d4e52
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 14:23:04 2007 +0000

    fix typo

commit 8172bddf58976949ab2d6620620caac458c238e6
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 14:06:01 2007 +0000

    pprint: fix failing test caused by Function2 introduction

    see: #381

commit 2bb314f72ff061742cc938463942676d0b835e63
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 10:37:03 2007 +0000

    [2/2] lets use XFAIL/XPASS in tests

    I decorated all disabled test functions with XFAIL.

    Please note how we have ~20 passing tests that were disabled!

commit b10af2e4353e3c9353a730a2791dc48f6b30b06b
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 25 10:35:04 2007 +0000

    [1/2] lets use XFAIL/XPASS in tests

    It seems we continue breaking things so I have to take immediate action :)

    This patch patches py.test on the fly and adds 2 new outcome types to a test
    result: XFAIL and XPASS

    XFAIL means 'this testcase fails, but we know that.'
    XPASS means 'this testcase is known to fail but unexpectedly passed.'


    rationale: It is *bad* to just comment out tests when we change code.
    rationale: Even when working on design, if you don't want to solve every
    rationale: minor problem please mark tests as XFAIL

    rationale: py.test lacks this functionality and the reason I do it here is
    rationale: that we'll don't need to ask users to upgrade their py.test

commit 5a660841ae81bd1b8727fd18256aefd84c01a5f5
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 03:39:05 2007 +0000

    export FunctionClass

commit a7fa9c20b378f153cbb1f3db066b354321f6faa3
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 03:11:02 2007 +0000

    min and max moved

commit 748c96db7ed03e6bff61c874535dab71f950c843
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 03:05:02 2007 +0000

    Sqrt -> sqrt moved

commit 26b0628943dc0f84e83d51332ba1d0f7f151ec2c
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 02:50:02 2007 +0000

    arg moved

commit 4a5a9d201b410c88b2661fa382914aca393e9ca2
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 02:45:05 2007 +0000

    conjugate moved

commit 29be5f11ee8b364459ddc1e7d98abcebaeccf628
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 02:37:02 2007 +0000

    abs moved

commit 4d01d0d91b1dc8a4ac52288f38748ec73c9889e3
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 02:13:01 2007 +0000

    Im -> im

commit 9a9dc5fcbf7ed9bf2e6da76824139b6cf5c81a52
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 01:58:00 2007 +0000

    Re -> re

commit fb48c365995b7e7f7cb57243dfcd9483a6bec08e
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 01:47:03 2007 +0000

    a little polishing

commit 6ee8b34ee46ee3e05a0be759eeda9a00d2bb38d2
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 25 01:42:03 2007 +0000

    Log -> log

commit 9ae4bfba090acc0df7f3c7f280550030ac805ac9
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 21:27:05 2007 +0000

    Exp -> exp

commit f18d020508b0505112b7a5e2dd8dafba7ff00e27
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 19:52:03 2007 +0000

    polishing trigonometric.py imports

commit bba47e5a7a6db73fe72ab18a0524a08e9035a463
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 19:51:02 2007 +0000

    atan moved

commit e45de3c32fc2cb8705221d8890615ddb064bcfe1
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 19:46:03 2007 +0000

    acos moved

commit 9336cd87db3b8893cbc1df5ea2135baf362ecafa
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 19:38:05 2007 +0000

    ASin -> asin moved

commit 6069755065bd1915fb58301147bd810f72715dad
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 19:33:03 2007 +0000

    Sin -> sin

commit c464d8326755d5946dc0e516d880a8ac1e6806e3
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 15:10:00 2007 +0000

    fixed the problem with components in doctests

commit dc3401a32036f2515bf53333c689afa573695967
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 14:42:04 2007 +0000

    printing for cos(x) restored

commit a23e4c007e653a15b7154c867aeb60e6b98da7a4
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 14:35:00 2007 +0000

    Cos -> cos transition

commit f62d7dd39b8e884b4b42534ba5219edbcd4e663a
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 14:00:02 2007 +0000

    Matrix.shape implemented

commit fd8d0f11bf1da874703cd73e2888b0e7c1da989f
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 13:06:01 2007 +0000

    abs(x).diff() implemented

commit 85a0a6b77fdf3a8c50bb1fa73736bcfb74b965c6
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 12:23:02 2007 +0000

    moved Tan -> tan

commit 849ff52c9712950917b7926e1c7cea07cd28265e
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:50:03 2007 +0000

    replacing ._args by [:] all over sympy

commit cb3591a63e85d19cd6511cccb9725531ace0dfec
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:48:02 2007 +0000

    replacing ._args by [:] all over sympy

commit 4f8e31d13ab501cc1c16f9ffa82b575a53f62a90
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:46:01 2007 +0000

    replacing ._args by [:] all over sympy

commit 151c7ee67e9c8f6d5841ad781ae2bc33c6eb3d7b
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:43:01 2007 +0000

    replacing ._args by [:] all over sympy

commit 2400f85c4dd5610f133abe190c7ac08e076d855b
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:39:01 2007 +0000

    replacing ._args by [:] all over sympy

commit 6b4d1dfb4e26a3fd3555175b138b8880a62ddcc7
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:35:02 2007 +0000

    replacing ._args by [:] all over sympy

commit db0115d936df64e9f59867ce0b5ce58d9d96474d
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:28:03 2007 +0000

    replacing ._args by [:] all over sympy

commit 5115516b76ff1b509c74f9cc9e13811c347e42b5
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 11:02:00 2007 +0000

    replacing ._args by [:] all over sympy

commit 831ac7ae5923110b11233e77d02af7e0e1fcaa55
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 10:57:03 2007 +0000

    replacing ._args by [:] all over sympy

commit b607e0a1fbb08da24d07ed098251355b7e3edbc8
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 10:50:02 2007 +0000

    replacing ._args by [:] all over sympy

commit c633f15adc8a66f497487a45dcd79fe3ce8ad7ca
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 10:46:04 2007 +0000

    replacing ._args by [:] all over sympy

commit 68ce184f44999725b1e5a40ea72696efe5a2e869
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 10:41:04 2007 +0000

    replacing ._args by [:] all over sympy

commit f6208329e3b91f55de8096b7d3902813d52e3113
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:33:03 2007 +0000

    removing args property

commit 47e77575fc11dc750bbb321b37eb527b0e592df2
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:30:04 2007 +0000

    removing .args all overy sympy

commit a956eff6bfe2c1bce4568e0d9b83289cc4c1c0f1
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:26:01 2007 +0000

    removing .args all overy sympy

commit f04b74f0f538e7e9861da30c3a35449353ad782b
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:23:05 2007 +0000

    removing .args all overy sympy

commit 19b442c900055e605e0072b3982f1e325b8319d3
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:22:05 2007 +0000

    removing .args all overy sympy

commit f27ff06391653bdfb8dad221a8d57a1fcdde2d3d
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:19:01 2007 +0000

    removing .args all overy sympy

commit 45e90204e005bab4f5258a1590ed8e9c24f1cdf7
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:16:05 2007 +0000

    removing .args all overy sympy

commit c7e0709c4667ca059b120ebf6605e6a8c46a661a
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 24 00:10:05 2007 +0000

    removing .args all overy sympy

commit 943c00a847cce38f5a6edebd164ba8f756e415b9
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 22:09:01 2007 +0000

    removing .args all overy sympy

commit 5b18ff234ecbf7b74587063086aef89025519e7e
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 22:05:01 2007 +0000

    removing .args all overy sympy

commit 4ebf24621e58c1d9a1439e8526165ec7ae5393fe
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 22:02:00 2007 +0000

    removing .args all overy sympy

commit b2c62495ee8bdf3b3c3e6e6d12a9ba16074f6ca0
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 21:57:00 2007 +0000

    removing args property in Lambda

commit 621bc617fdfe765d4f045fa31d42f8489c6dffd0
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 21:51:05 2007 +0000

    removing .args all overy sympy

commit ea5d0ca0955e99b7717e5e55bcac37cab320d8c1
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 21:51:01 2007 +0000

    removing .args all overy sympy

commit cd3e2ac300f4027690f55e9e61689e037d59ee3c
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 21:37:04 2007 +0000

    removing .args all overy sympy

commit 7982c97be975451706845981f13672edd5b20820
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 21:33:05 2007 +0000

    making .args really obsolete

commit 2683e98148f754c38f97bb2482f9f136279f1d8f
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 21:29:01 2007 +0000

    Fixed remaining problem in doctest, plus test added for it

commit 58af88a1656380a99c9c87a8356766d201649234
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 21:02:01 2007 +0000

    a test for the new [:] committed

commit 96edc3ef197e95c6d44640d3262718d90d456192
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 20:59:05 2007 +0000

    sin(x)[:] now returns (x,) instead of (sin, x)

commit 1966530b4bf84c95df98c22c88e359c9855b2da6
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 18:01:01 2007 +0000

    removing unnecessary code

commit 0598292be62d672eb205241556d0977063e4fd04
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 18:00:01 2007 +0000

    removing .args in cot

commit 7ddf56fcada024f358ba8d639bd5c7128926538c
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 17:51:01 2007 +0000

    Moving from (exp, x) to (x) in exp(x)[:]. As a first step, I fixed the exp(x).func
    property

commit 29ec5e0519e9fa1db3da877171cf69633a5de664
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Sep 23 16:27:03 2007 +0000

    fix for issue 358

commit ddd03494ca525a76b3a83f57df117cc094dde5ec
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 16:16:05 2007 +0000

    committing a huge patch, that moves cot from ApplyCot to the new model. All tests pass

commit 9a80b9cf28f243f5bfa0590be3cb0815952176ea
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 23 16:04:05 2007 +0000

    deleting the sandbox from trunk

commit af356eea4b0203518b984d619ece91fb39a24ad8
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Sep 23 12:43:05 2007 +0000

    sandbox: implemented sin

commit 19114a9c01077486304c9a1214c9e137f4c2bf29
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Sep 23 11:34:05 2007 +0000

    test_str for sandbox

commit b935d5a7d557396b0ea38e22e091a137da898326
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Sep 23 11:28:05 2007 +0000

    sandbox: implement tostr() for nicer printing

commit 47b39bc70abf8ad186d911fa2a9c5079b69e1121
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Sep 22 21:43:01 2007 +0000

    sandbox: split() method

commit d5ebf52cc406db76b67c3e5fad56f591cf51c974
Author: pearu.peterson <devnull@localhost>
Date:   Sat Sep 22 20:40:02 2007 +0000

    sandbox: fixed number of bugs

commit 60bf59b57e808309bc14c078f8a439f917b54822
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 22 14:11:00 2007 +0000

    commenting out other broken tests

commit bef37088352bbb3ecc26a084d04bffec170429a2
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 22 14:08:02 2007 +0000

    commented out the broken test

commit 8e549b22ad91539634a7dac214207f2ab9403ba8
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 22 14:04:00 2007 +0000

    fix the issue 368

commit 9b752f41e7b35c2a6efa37a3384cd4d23fb483ee
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Sep 22 13:35:02 2007 +0000

    copy test_arit.py to sandbox/core/tests

commit 708ab36936aad2f32686c83b4ad938a7c18dd58a
Author: pearu.peterson <devnull@localhost>
Date:   Fri Sep 21 21:29:04 2007 +0000

    sandbox: unified Interval, Float, Fraction, Integer arithmetic methods.

commit faa30f2896fd816d5ce45ff005afb50ac019ef83
Author: pearu.peterson <devnull@localhost>
Date:   Fri Sep 21 11:29:04 2007 +0000

    bug fixes

commit f206f515979e3630666e17a5ae5e7cef593797f2
Author: pearu.peterson <devnull@localhost>
Date:   Fri Sep 21 08:51:03 2007 +0000

    sandbox.core: impl memoizer_Float_new

commit f39b624506c22a38d4c4fe93789b51bc319e0170
Author: pearu.peterson <devnull@localhost>
Date:   Fri Sep 21 08:22:05 2007 +0000

    sandbox.core: code clean up, expose Interval.

commit e29f0046fb98342b38e03066cfb4d5c03ecdcfd0
Author: pearu.peterson <devnull@localhost>
Date:   Fri Sep 21 07:18:01 2007 +0000

    optimized creation of Fraction in sandbox

commit 2452c8c634184e3ab7d6e25788a3a2c5583fe94b
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Sep 20 20:05:02 2007 +0000

    sandbox: interval arithmetic

commit 95a00cb6b561c578c869e6ee4f8bced02d103182
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Sep 20 19:04:05 2007 +0000

    svn: subclass Integer from long, some small fixes to Float

commit 40bdd9f0db05eaf110d842ccf23f730699fc0809
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Sep 20 17:43:05 2007 +0000

    sandbox: partially merged numerics.Float into numerics_float.Float

commit 692bd951ec1f04c3b7146f3baf8a65705b3778fe
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Sep 20 15:21:01 2007 +0000

    fix Matrix.trace()

commit 18b636ab00cfb4fa25b712096df84d99731fd686
Author: pearu.peterson <devnull@localhost>
Date:   Thu Sep 20 12:37:00 2007 +0000

    Impl decimal support to sandbox.core

commit 45d1fa6ddd1290b7c4b5f10d6a7535dc718fa6b8
Author: pearu.peterson <devnull@localhost>
Date:   Thu Sep 20 12:08:02 2007 +0000

    added numerics.float support to sandbox.core

commit 7d4b4259eef970d4c2713b91c71a0b3ab74660d3
Author: pearu.peterson <devnull@localhost>
Date:   Thu Sep 20 09:25:05 2007 +0000

    Impl basic number support in sandbox.core.

commit dbe5e3a6fab87382391e20b6b118d40aad954bca
Author: mattpap <devnull@localhost>
Date:   Wed Sep 19 22:14:01 2007 +0000

    Fixed issue 365.

commit 5d70bed4efbc92136f2976e28965e719ff8e6ead
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 16:55:04 2007 +0000

    Added numerical is_.. properties to sandbox.core

commit 77cca226c6d382db47cc68cf5dcd4728e8a6f6b7
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 14:44:04 2007 +0000

    Impl dummy support to Symbol in sandbox.core

commit 8edb6cc71bfbccdf7c74cebad577de7944aa910c
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 14:14:01 2007 +0000

    Improved equality tests in sandbox.core.

commit 48f01b2c4e910579bc7003c30fbc9ac9377b385d
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 13:25:03 2007 +0000

    Updated docs in sandbox.core

commit c49ffc27ac997dd0a1b87badbfdbe4adf6aff3a7
Author: kirill.smelkov <devnull@localhost>
Date:   Wed Sep 19 13:11:05 2007 +0000

    pprint: pretty function powers

    e.g. pprint(sin(x)**2) ->

       2
    sin (x)

    fix-for: #340

commit 7068fbb6f9531a1eab5df03c4b82a546f19eaf45
Author: kirill.smelkov <devnull@localhost>
Date:   Wed Sep 19 13:09:05 2007 +0000

    refix #337

    If we don't want functions to be parentesized, let's lower FUNC binding instead
    of making a fake ATOM.

    I'll need this for #340

commit 3ea0eff3cb9ca7fa5417ff897d3dd33388b89a62
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 12:44:02 2007 +0000

    Added test for sum(x**i,i=0..200)

commit 0685d1ca930b7728db5cc20150af39a60c005917
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 11:27:00 2007 +0000

    Impl relational classes and compare methods.

commit bc64fac8eb8a322775731d1668b293041828c0c1
Author: kirill.smelkov <devnull@localhost>
Date:   Wed Sep 19 10:44:02 2007 +0000

    pretty print greek letters with indexes (e.g. 'beta1')

commit 445f0d6055b1b98b4e622c58da0beb843951ad9d
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Sep 19 10:20:01 2007 +0000

    sandbox: add function for clearing all cached objects

commit 09ccd6d49261e368dc93eeec5590cceebbada268
Author: kirill.smelkov <devnull@localhost>
Date:   Wed Sep 19 09:57:01 2007 +0000

    pprint: add pprint_use_unicode() to globally set whether to use unicode

commit 39178c292bfd35d88464c85c1f4efcdb3ab363fc
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 09:20:04 2007 +0000

    Clean up sandbox add.py.

commit a5ecb5465fe96b19597827097075cd0f8dc0e04f
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 09:06:04 2007 +0000

    Introduced MutableCompositeDict as a base class to MutableMul/MutableAdd.

commit 4ac2fb43976ddeeb4370ca2be7a5a0ec3aa11e7c
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 19 08:52:04 2007 +0000

    Clean up Mul update, canonical code.

commit 2995f4bc6329f0ad47a5b4625c8dfdbcee20b10c
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Sep 18 21:44:02 2007 +0000

    sandbox: add some docstrings

commit 04db87206c0ca4abc5a39373a59d6d10dd5ad070
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Sep 18 21:02:05 2007 +0000

    sandbox: some bug fixes; create a few basic tests

commit 21a419bc9c5b08cfe893b603bda98f2540efa3ec
Author: pearu.peterson <devnull@localhost>
Date:   Tue Sep 18 19:47:00 2007 +0000

    Introduced canonical method to Add,Mul; more fixes.

commit 4123f533a426b487ecba82d48d4fdb58274ce5de
Author: pearu.peterson <devnull@localhost>
Date:   Tue Sep 18 18:57:02 2007 +0000

    Fixed x*2+x*3.

commit db6590a84071cbbc1befae279acdc5d34cf259e8
Author: pearu.peterson <devnull@localhost>
Date:   Tue Sep 18 14:50:05 2007 +0000

    Impl Mul and Pow.

commit bef057d2d509a80baa050527a0837b06cda7cacb
Author: pearu.peterson <devnull@localhost>
Date:   Tue Sep 18 13:29:01 2007 +0000

    Impl Add.__hash__.

commit b2d581dd5ef0696c3baf12d15691be2466d1a643
Author: pearu.peterson <devnull@localhost>
Date:   Tue Sep 18 13:10:03 2007 +0000

    cont developing sandbox/core

commit 8c4a4378fe0763897c4956c24b7dd75d4dec1140
Author: pearu.peterson <devnull@localhost>
Date:   Tue Sep 18 09:19:02 2007 +0000

    clean up, Basic classes define their own constructors for efficiency and readability

commit 2efb0e5dc9885ca8080f1148253a3695b259a1a0
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 17 23:16:01 2007 +0000

    renaming Functional to ScalarFunction

commit c04c3ffa0f6ffb27e4f775e91ec4649c36b7c494
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 17 22:16:04 2007 +0000

    changed import * to explicit import

commit 22e69ec99ca721e53f24768c9d99f604bbc64704
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 17 22:04:00 2007 +0000

    removing duplicate logos. All of them can be accessed in the materials
    directory.

commit c687f39b13e3707a436bf9498a1abbe39e2d8546
Author: ondrej.certik <devnull@localhost>
Date:   Mon Sep 17 22:00:00 2007 +0000

    updating info about logo files

commit d39a5a1419952eb065a952e3625dfca1a1fadcaa
Author: fredrik.johansson <devnull@localhost>
Date:   Mon Sep 17 15:07:03 2007 +0000

    numerics: slightly faster bitcount(). physics.units: make rational powers expand better

commit 06d526459e538a5ba1d20d6660459c3acd12edbc
Author: pearu.peterson <devnull@localhost>
Date:   Mon Sep 17 09:21:02 2007 +0000

    initial impl of Add as dict subclass

commit 25c4772257bef93bcfe2c42b499de6e0564fcb70
Author: pearu.peterson <devnull@localhost>
Date:   Sun Sep 16 21:47:05 2007 +0000

    Impl. experimental core.

commit a1767876ec6abcd7436e25c8c50ee67ab52c82b0
Author: pearu.peterson <devnull@localhost>
Date:   Sun Sep 16 07:21:00 2007 +0000

    clean up

commit 30fac9675ef374faa846929fa2a5c9f5c3b4de14
Author: pearu.peterson <devnull@localhost>
Date:   Sun Sep 16 07:07:01 2007 +0000

    preliminarly impl of core with functions as classes

commit 360c491453c918908d53053cb23b780cb1d6c8d5
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 14 20:08:04 2007 +0000

    matrix: hacky fix 'x*M' case  (was coerced to Basic.__mul__)
    I think the right fix would be to make Matrix be usual SymPy object.

    fix-for: #354

commit 16983de4f2a99a9ebdb0b670940dc95232797b88
Author: kirill.smelkov <devnull@localhost>
Date:   Fri Sep 14 19:21:05 2007 +0000

    pprint: robustify curses initialization
    curses.setupterm can throw curses.error when e.g. TERM is not set.

    I spot this when doin distributed testing via 'py.test -d' and for me now all
    tests pass.

    see: #242

commit 48fddeaf90f2d58abc6d17e00d0ff729999b3e58
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Sep 12 20:58:03 2007 +0000

    quick fix for issue 328

commit bcbbf6367e990651c7a628ab918401594891efed
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Sep 12 20:47:04 2007 +0000

    +textplot function

commit 7ce472c79374933eebeb1ff66ae6e451823b8f88
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Sep 12 14:11:00 2007 +0000

    support fitting of samples to normal and uniform distributions

commit 2aa7846f28d76abce3a077346681dfb84bfa31fa
Author: pearu.peterson <devnull@localhost>
Date:   Wed Sep 12 07:25:05 2007 +0000

    Fix test_pretty.py when running without -s option.

commit a0736896b99582734d97b0d560ec3d6c4de7ba85
Author: kirill.smelkov <devnull@localhost>
Date:   Wed Sep 12 03:30:03 2007 +0000

    I promise, I'll never commit at night.

commit 8df230678fab98ce937e56f916274e264cbac212
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Sep 11 20:24:01 2007 +0000

    small corrections and additions to units

commit dc7ecd94cd8492de760cc0e02fc7c9a11032ee87
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Sep 11 19:09:03 2007 +0000

    physical units

commit c2f3936c17216c25452ae228d9cb468d2cb984ec
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 11 17:59:02 2007 +0000

    Forgot to add files (Oh, those quilt/svn issues...)

commit 45ce4e8115eb74aeb9221cb2b9d072c1e15e640b
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 11 17:45:02 2007 +0000

    Restore Pauli,Dirac matrices & Pauli algebra from old-core,
    Also fix matrix Dirac conjugation.

    FIXME don't know how to handle -I*Pauli(2)*Pauli(3)

commit c0509a82476ac0e403a9131aeefc4bc91f1e207f
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 11 17:41:05 2007 +0000

    matrix: raise ShapeError when doing dot-product on incompatible arguments

commit d8dc61b3f4ac80514b6faadc63d30a6e426ef62b
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Sep 11 12:28:03 2007 +0000

    first version of statistics module

commit 97d9b139bd7f78783cf4d97f6b8f3be9ebe00946
Author: basti.kr <devnull@localhost>
Date:   Tue Sep 11 09:06:03 2007 +0000

    deleted a print statement i forgot when debugging

commit 2a25ee676c010776c36af4a8430818fb939a14f2
Author: basti.kr <devnull@localhost>
Date:   Tue Sep 11 09:01:05 2007 +0000

    see issue 350

commit 38a2ce03a21fd15cf2dc78933c8fddad491a7bd9
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Sep 10 23:43:04 2007 +0000

    Upgraded bundled pyglet.

commit bd7a5054354223f12f374d4074c3599c31a4bda6
Author: mattpap <devnull@localhost>
Date:   Mon Sep 10 09:03:05 2007 +0000

    Fixed issue 347. Modified Cot.fdiff().

commit def49215db6aedf9b6f67d5a0e7906a8d2fd1ca9
Author: fredrik.johansson <devnull@localhost>
Date:   Mon Sep 10 08:59:05 2007 +0000

    numerics: ~10% speedup at low precision levels by subclassing tuple, small bug fixes and other changes, more comments

commit ed221d814d92cdde2a55ca4f1e3fb4feadae0602
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Sep 9 19:29:02 2007 +0000

    ntheory: implemented a function for computing the number of partitions of an integer using the Hardy-Ramanujan-Rademacher formula

commit caef519f2b595f2438eb8019e14879ebb5365798
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Sep 9 17:53:01 2007 +0000

    add Float benchmark script. also fix a bug in numerics.functions.atan

commit 82ba5fd793df279e9866fb532abdb00a201bd6e4
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 9 17:13:01 2007 +0000

    Fixed Pi -> pi error

commit a049c7741c2d8a2a13793dd056e36971a0e3e480
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Sep 9 16:56:05 2007 +0000

    performance tweaks to the Float class at standard precision levels (arithmetic 5-20% faster, comparisons 3 times faster)

commit 79be938cd31d5777f2b115633aafdec63f4e2b3c
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 8 13:15:01 2007 +0000

    use apt-get non-interactively

commit 31cd5b948b9a32e3733e33224f80ad9acfae0b4d
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 8 12:58:05 2007 +0000

    Commited the 331 issue patch

commit 03e64ff890e854c07fbb94b7155c6079bbf24978
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Sep 8 10:13:03 2007 +0000

    fix inefficiency and bugs in Matrix.__pow__

commit 5c033a10751b30f795015fb28bb69ef1e1eaf247
Author: mattpap <devnull@localhost>
Date:   Thu Sep 6 09:02:04 2007 +0000

    Added apart() (full partial fraction decomposition procedure). Started refactoring of Sum class. Added Basic.is_fraction(). Added symbol specifier to normal() (this will be later merged with ratsimp()).

commit 6a67bfa7ea16141d01c49df78029ed01c8d8f7cd
Author: ondrej.certik <devnull@localhost>
Date:   Thu Sep 6 08:30:05 2007 +0000

    Updated documentation in conftest.py

commit ffba63b2fc063c07e081f4dc955f4007eca37593
Author: inferno1386 <devnull@localhost>
Date:   Wed Sep 5 16:18:04 2007 +0000

    Fixes for issues 321, 336, and 337.

commit 74a7dca3f0afc2e3fade382d4ffd2a845647f08f
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 4 18:39:03 2007 +0000

    pprint: support for nested integrals

    fix-for: #336

commit d753a0d7c70f910e2adde571a14d1701b6d4e3e7
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 4 18:37:04 2007 +0000

    Simplify Integral interface for quering variables & limits a bit.

commit 589e64867319c86fccb078dd4a915eaef713a232
Author: basti.kr <devnull@localhost>
Date:   Tue Sep 4 16:16:01 2007 +0000

    saveimage now possible with key F8.
    Plot[0] accepts also sympy integers.

commit 991738c81cecf8e6e8995b549488582ecaed2139
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 4 13:25:02 2007 +0000

    This patch fixes 'pprint' and 'print_latex' for Integral

    pprint is fixed partially, since it can't handle multidimensional integrals
    print_mathml is currently broken.

    part-fix-for: #333

commit d09b023fd1d356794a0a578b7f40e3b5c1e93bfc
Author: mattpap <devnull@localhost>
Date:   Tue Sep 4 12:13:00 2007 +0000

    Added doit() to Basic. Improved and bug fixed Integral (you can now perform arithmethics with it). Added as_powers_dict() method to core.

commit 347faaa63b1959208ab8769703f1420301e213a5
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 4 12:06:01 2007 +0000

    Correct the way of skipping plotting tests.

    see: #335

commit 6b1fcfa95172a2a027216289b05ca3d3b0cfb69d
Author: kirill.smelkov <devnull@localhost>
Date:   Tue Sep 4 11:43:05 2007 +0000

    Fix my email address (and verify whether I can checkin).

commit ee6fc98182ce009344a286848ef817c9b022fe60
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 4 07:01:04 2007 +0000

    Applying patch for 330

commit 63ef6a8c38840bd4ac32b973949a064e7c0cff30
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 4 06:42:04 2007 +0000

    commenting the tests

commit 2111b602111d7522f3de9f1b823460059b874c6d
Author: ondrej.certik <devnull@localhost>
Date:   Tue Sep 4 06:39:04 2007 +0000

    Failing tests for the true division

commit da6c40b01623af215cb9805af1f6afa3ff315ee8
Author: mattpap <devnull@localhost>
Date:   Mon Sep 3 09:21:02 2007 +0000

    Cleaned up special functions' code and tests (improved polygamma and added Hurwitz zeta function). Added preliminary support for ComplexInfinity.Several minor improvements.

commit db16dbd154b46ed9ded203e3f1450edd491cccc4
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 2 22:19:02 2007 +0000

    Started to port old limits to the new core. See the documentation in
    sympy/series/limits.py

commit b3c14895600c537e7ee183e2b4abc5bd45cfd27b
Author: ondrej.certik <devnull@localhost>
Date:   Sun Sep 2 20:06:05 2007 +0000

    len(x*y) now works

commit 0dcfce3e6a34d2ec6a23602fdf67a6c7277bac4f
Author: inferno1386 <devnull@localhost>
Date:   Sun Sep 2 17:43:00 2007 +0000

    Tests for issue 270 fixes.

commit 98845c16fd9091539e11bdfcd5ae64aaf57bbaeb
Author: inferno1386 <devnull@localhost>
Date:   Sun Sep 2 00:24:02 2007 +0000

    Documentation updated for Basic.set_repr_level()

commit 1b145db7a517ffcaefa79124b4d22f833594edb3
Author: inferno1386 <devnull@localhost>
Date:   Sat Sep 1 22:10:04 2007 +0000

    Fixes for issue 191.

commit be6103ed979b68b029ad87886e65de9696a09983
Author: mattpap <devnull@localhost>
Date:   Sat Sep 1 20:26:05 2007 +0000

    Improved and cleaned up test_doc in setup.py. exp(-x) now prints as exp(-x) rather than misleading 1/exp(x) (this should be left for pretty printing).

commit 880f49ae0ca0a592fe2c048d11987cd21b77dd05
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Sep 1 19:38:02 2007 +0000

    Plot[0] now the first function instead of Plot[1].

commit a9d10d56c9f150f7e1a9be1ab74dd8e8ed5a6a00
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 1 15:59:02 2007 +0000

    make doctests run again

commit b23af971c5184bb381fe4b830adac9272bd4d661
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 1 14:16:01 2007 +0000

    Adding a script for testing sympy in a pure python environment.

commit 1601783c15940486f946fed2df1892af26894502
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Sep 1 12:50:03 2007 +0000

    much faster algorithm for expanding products of sums; resolves issue 302

commit 44be59710891118db66bd08695d65652da1b2295
Author: mattpap <devnull@localhost>
Date:   Sat Sep 1 12:33:05 2007 +0000

    Added erf() function and integration examples for it.

commit 6887acdfa012eb54fd998cdd387abeeabbe290f1
Author: ondrej.certik <devnull@localhost>
Date:   Sat Sep 1 11:07:03 2007 +0000

    Use only 'pi', not 'Pi'

commit 25412c50baa45231ff5d8cebed1c5447aecc216f
Author: mattpap <devnull@localhost>
Date:   Sat Sep 1 08:16:00 2007 +0000

    Improved risch_norman(). Now you can integrate quite big class of trigonometric and hyperbolic functions without need for advanced simplification routines. However in complicated cases still function is rewriten in terms of tan() and tanh() so results are non pretty. Added also support for factorization into linear factors so also inverses can appear in the antiderivative (in terms of complex logarithms, so another simplification routine is needed). Added several new rewrite rules to trigonometric and hyperbolic functions.

commit 637fb096ff1613995b709df2383ea7d640793a40
Author: inferno1386 <devnull@localhost>
Date:   Sat Sep 1 01:15:04 2007 +0000

    Handled ImportError when attempting to import curses

commit 2fc106b2805dfb95d270ca8fd7cad6d7f128a6f7
Author: inferno1386 <devnull@localhost>
Date:   Fri Aug 31 22:45:01 2007 +0000

    - Numerous design changes to the geometry module
    - Fix for issue 133 (see comment 7)
    - Fix for issue 280
    - Updates to trigsimp()

commit d1d5f9d5ba94f705c60bafc975f03020e2284027
Author: brian.jorgensen <devnull@localhost>
Date:   Fri Aug 31 21:21:03 2007 +0000

    Committed basti's patch to managed window allowing the Thread object to accessed after initialization.

commit dccfa366e0f148847e65fb56edb5811494431bd3
Author: mattpap <devnull@localhost>
Date:   Fri Aug 31 08:27:04 2007 +0000

    Implemented Risch-Norman algorithm.

commit e472c0efb36a8fcb58e1edb986db7acf0aa5905c
Author: ondrej.certik <devnull@localhost>
Date:   Fri Aug 31 00:26:00 2007 +0000

    updated the documentation in limits

commit 5eb549c27b016e6731bad3b5b0ad510d76bdba82
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Aug 30 23:05:03 2007 +0000

    Applied another saveimage patch from basti. Adds the ability to saveimage without showing a plot window.

commit d24a75fa2e2cc0522ec18c7276d6f10ec8e6c7ad
Author: ondrej.certik <devnull@localhost>
Date:   Thu Aug 30 21:47:03 2007 +0000

    Use truedivision in isympy

commit 46a12f5c4713ea93876d4a8cf4e40810b624c65a
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Aug 30 17:24:05 2007 +0000

    Applied a patch from basti (basti.kr@gmail.com) which implements Plot.saveimage. Thanks basti!

commit 541284cd405ae5f6259f08d4ecb79dc3d4258f88
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Aug 30 16:54:05 2007 +0000

    Add postdraw and predraw function lists to allow custom rendering augmentations on a per-function basis.

commit 681ad8c28028e348544913fe47ddb63a82299942
Author: ondrej.certik <devnull@localhost>
Date:   Thu Aug 30 06:34:04 2007 +0000

    Making sympy work with true division.

commit 12e2805ccac0be5c1918b6c3519a0953bc05951a
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 28 22:51:03 2007 +0000

    - Numerous fixes to geometry module
    - Fix for issue 295

commit d2628234030b5c290c6fa8fabe18df774681a3fa
Author: Chris.Wu <devnull@localhost>
Date:   Mon Aug 27 16:10:03 2007 +0000

    Updated matrix tests to reflect recent changes to expressions and detect bugs earlier

commit 6fe771391f0fcb7c9b506e72e60ce9518c7e6a96
Author: Chris.Wu <devnull@localhost>
Date:   Sun Aug 26 13:00:01 2007 +0000

    Put in a quick .expand in matrix determinant to address issue #314

commit dffce621efa2ef1c0bed68b3540968b843a8616b
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 24 22:55:00 2007 +0000

    ntheory: implemented divisors() and totient() functions

commit 10258d3abe35e14a6aa2d20786df7b5698252623
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 24 22:27:02 2007 +0000

    fix a bug in factorint

commit 8b109741306b874dff8e3da832ef405c39b7b7eb
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 24 21:11:01 2007 +0000

    merged orthogonal polynomials code and tests. I had to do some renaming that might not be final. also added Hermite polynomials and roots for Chebyshev of both 1st and 2nd kinds

commit 5f6a9d69cbb4ca4d62f0d71a8c3934b4857629fe
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 24 11:55:02 2007 +0000

    fix for issue 320: integrate() syntax

commit ad58b620b28efb4e31b5a64753d26f23fd5682fb
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 24 11:16:05 2007 +0000

    limits: temporary fix for issue 319

commit dda648821fb9526ea7d4f40e0c17bccc057f181b
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 23 11:05:01 2007 +0000

    fix an import error

commit 88a7b2b9499da21ecff203c6495608a4b0d15a62
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 23 09:53:03 2007 +0000

    numerics: implemented secant and bisection algorithms for root-finding

commit 02db1723f37fb816383138b402b26196cc4b9c64
Author: inferno1386 <devnull@localhost>
Date:   Thu Aug 23 00:40:01 2007 +0000

    Fixes for issues 313, 315 and 316.

commit 5617892a0416302cf7f244c76ebf4b068b853bde
Author: lethargo <devnull@localhost>
Date:   Wed Aug 22 14:09:05 2007 +0000

    Polynomials: added new integer factorization and integrated it in factor()

commit 1eb8bc268ff472d0320410ed870638520dc2cb5d
Author: mattpap <devnull@localhost>
Date:   Wed Aug 22 11:07:02 2007 +0000

    Updated functions' tests and moved out from core. exp() will now simplify self in simple cases with imaginary arguments. Basic.as_coefficient accepts now also Mul as argument so you can match expressions like pi*I etc.

commit b6d17aee789d475657e4b692dd9539585ccfc725
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 21 18:53:05 2007 +0000

    Added GTK and pygame printing facilities and updated examples.

commit 922f37b5bc025aaca6db949853819023811ef3bf
Author: ondrej.certik <devnull@localhost>
Date:   Tue Aug 21 16:14:05 2007 +0000

    man page updated

commit 0b2b4643540c0a2c7a7717c8f858cd305b01362d
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 21 10:33:03 2007 +0000

    - Updated examples
    - Refactored printing and introduced latex printer
    - Removed evaluate keyword from Apply, as per issue 274

commit 99d56793906527cffd22a830cb86c418ad3f3761
Author: mattpap <devnull@localhost>
Date:   Tue Aug 21 10:20:05 2007 +0000

    n!, C(n, k), rf(x, k), ff(x, k), gamma(x) use now expand(func=True) rather than rewrite(). This should fix the problem metioned in the mailing list concering hypersimp().

commit 5faa754a391e9b87c23c8844050c14317009ec4f
Author: ondrej.certik <devnull@localhost>
Date:   Tue Aug 21 06:50:03 2007 +0000

    make ./setup.py sdist work again

commit 66e7addf4e1ed973f42156b74fbf01089ebfef54
Author: ondrej.certik <devnull@localhost>
Date:   Tue Aug 21 02:32:02 2007 +0000

    Improving and polishing man page and isympy

commit 0872613e819bacaeb8a1eb8f791e06d0635fe17d
Author: mattpap <devnull@localhost>
Date:   Tue Aug 21 02:00:01 2007 +0000

    Moved all functions to sympy/functions (see issue 310). Cleaned a bit setup.py (no more remove __init__.py when running doctest).

commit 50feb4f2539da30ae696955e97d692728aaa2c46
Author: mattpap <devnull@localhost>
Date:   Mon Aug 20 17:55:04 2007 +0000

    Refactored expand() added 'func' hint, for cases like expanding, lets say, GoldenRatio in 1/2 + 1/2 * sqrt(5). Refactored casoratian() function (added sympification).

commit 58419e6264a2d860475b0eade2bf3aefbeb98a18
Author: ondrej.certik <devnull@localhost>
Date:   Mon Aug 20 17:17:04 2007 +0000

    removing dependency on xslt

commit 48d721126ca186b113e0f71230700e6eca0ce72d
Author: ondrej.certik <devnull@localhost>
Date:   Mon Aug 20 16:53:05 2007 +0000

    fixing some overseen files

commit 07b6e952425e0fb50d37993b30b43815b9233097
Author: ondrej.certik <devnull@localhost>
Date:   Mon Aug 20 16:49:02 2007 +0000

    removing the rest of #!/usr/bin/env python lines

commit a9b7a5789278eb95e8e94961be2540620f6b709f
Author: ondrej.certik <devnull@localhost>
Date:   Mon Aug 20 16:43:01 2007 +0000

    preparing for the 0.5.2 release

commit e22f34bc49dfab82854c82a3187433d79c4a3441
Author: ondrej.certik <devnull@localhost>
Date:   Mon Aug 20 16:42:02 2007 +0000

    delete the /usr/bin/env python line from files, that are not executable, since it causes Debian lintian warnings

commit 90b9903704961572990c94492bfcaadc6072003f
Author: mattpap <devnull@localhost>
Date:   Mon Aug 20 12:10:02 2007 +0000

    Hyper now returns correct basis of homogeneous recurrence. Fixed several other bugs (one to be fixed in inhomogeneous Hyper). Updated docstrings. solve_linear_system() returns now None if no soulutions were found and {} if all symbols can be assigned arbitrary values.

commit fcb6454df40647adf703bc222565e2e827412068
Author: mattpap <devnull@localhost>
Date:   Sun Aug 19 23:51:00 2007 +0000

    Finalized implementation of Hyper algorithm. Added Casoratian determinant. Refactored Product class. Renamed combsimp to hypersimp, added procedure for checking similarity of hypergeom terms. Rising factorial will now rewrite it self to factorial for x=1. A few other small changes.

commit 34c0de3461e138865e65e23c3a5ee86e657d2d77
Author: brian.jorgensen <devnull@localhost>
Date:   Sun Aug 19 20:12:01 2007 +0000

    Added to Plot docstrings.

commit f51f3535a520a0499688b8535628e50e395009ac
Author: inferno1386 <devnull@localhost>
Date:   Sun Aug 19 17:38:02 2007 +0000

    - Added radsimp() to simplify.py to rationalize denominators
    - Fixed geometry module to properly handle remaining tests

commit 4d6185e830102a2ea43158d5351b080e5af1a5a9
Author: lethargo <devnull@localhost>
Date:   Sun Aug 19 10:39:04 2007 +0000

    simplify: reduced cases where polynomial division is used.
    (sorry, typo)

commit 7967582516a70e1b3211ee8f6c442c5f80199436
Author: lethargo <devnull@localhost>
Date:   Sun Aug 19 10:26:04 2007 +0000

    simplify: reduced cases where polynomial division is used.

commit 518e82a763f4c8623bb67ce29e6f7d7c07458188
Author: inferno1386 <devnull@localhost>
Date:   Sun Aug 19 00:22:01 2007 +0000

    Geometry module refactored and documentation enhanced.

commit ce0bdd419e85895b14791e76ad3675657fbf4221
Author: mattpap <devnull@localhost>
Date:   Sat Aug 18 23:24:04 2007 +0000

    Lots of small changes concerning recurrences. Added combinatorial simplification routine.

commit 7e7427adbbc62c655b2fd17243c5fb83c1ad485c
Author: mattpap <devnull@localhost>
Date:   Sat Aug 18 03:02:05 2007 +0000

    Implemented the most efficient algorithms for computing factorial and binomial (using prime factorisation of special class of numbers). Generally refactored both functions and also gamma functions. In few hours I will implement proper combinatorial simplification and then all redundant imports will be removed.

commit ca54fc89b0651616b536e03e02aaa26ad64cf7b0
Author: mattpap <devnull@localhost>
Date:   Fri Aug 17 17:36:05 2007 +0000

    Fixed Pow._eval_expand_complex(). Simplified rewrite() code.

commit ebd450936a8329d02770fcfada2cca89341c8736
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 17 17:32:00 2007 +0000

    numerics: add verbose mode print statements for tanh-sinh quadrature

commit 44df29f6292414d097be606abd093e11533ade39
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 17 17:23:03 2007 +0000

    fix Wallis product evaluation using powsimp

commit 611bf1ab7d268f35660735b2acbb092b04981ad0
Author: inferno1386 <devnull@localhost>
Date:   Fri Aug 17 13:25:02 2007 +0000

    Introduced trigsimp and powsimp and fixed issues 194, 256, 257 and
    283.

commit 23f2e91395c91fb8519d67db37113f8235a68c90
Author: lethargo <devnull@localhost>
Date:   Fri Aug 17 12:46:00 2007 +0000

    Polynomials: Speed improvement with chinese remaindering.

commit e95ed9e9b8af0634e4b6845948f087d307695a41
Author: lethargo <devnull@localhost>
Date:   Fri Aug 17 11:50:01 2007 +0000

    Polynomials: Fixed sign of factor's result.

commit 77a542fe5b069ea27b09b2dce0c91b235015582b
Author: mattpap <devnull@localhost>
Date:   Fri Aug 17 08:37:04 2007 +0000

    Preparation for difference equations solving.

commit 6b6d829d324de7a5e0ca2d614fd21d9aaf0e89fa
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 16 20:45:03 2007 +0000

    numerics: tiny fix to warning message

commit d721d6f69043a6d13c180b8950332d75ae03afd1
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 16 20:37:01 2007 +0000

    numerics: changed nintegrate to print a warning message instead of raising an exception when it fails to converge. fixed a bug in Float.__add__

commit 0fe75a254cf29e6cfd96fdba7306ee574306f623
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 16 13:17:05 2007 +0000

    numerics: implemented adaptive Gauss-Legendre quadrature and a user-friendly nintegrate() function; several small changes and new test cases. temporarily commenting out code for orthogonal polynomial zeros which is causing trouble

commit fed9fb237aa07e661e0bbd50342baeeaa5f4b8df
Author: ondrej.certik <devnull@localhost>
Date:   Wed Aug 15 23:59:00 2007 +0000

    Moving all copyright from files to the README

commit b2f7b8179155e9f8b23676b798a747cebd860bce
Author: lethargo <devnull@localhost>
Date:   Wed Aug 15 21:18:04 2007 +0000

    Polynomials: Added heuristic gcd for univariate integer polynomials.

commit fac9e84be47dbe1211ec54cb4be8d34a7817d0ec
Author: lethargo <devnull@localhost>
Date:   Wed Aug 15 20:05:04 2007 +0000

    Polynomials: Added fast integer polynomial arithmetic, with small primes gcd.

commit 3e60b141b9c558026929d3e3b49de4f1472365b5
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Aug 15 13:47:00 2007 +0000

    numerics: give polyfunc ability to evaluate both the polynomial and its derivative

commit 13ea9d594cff9da7bee48222931b0ff26b976e46
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Aug 15 12:10:04 2007 +0000

    issue 232: fixing factorial tests, merging factorial functions. also merged Factorial with Factorial2 and generalized to multifactorials of arbitrary order

commit ee28165a412ba425eff07c90eddaa8288ec33e37
Author: lethargo <devnull@localhost>
Date:   Wed Aug 15 10:55:02 2007 +0000

    Polynomials: New factorization for square-free polynomials

commit 198713409e79d8ddb01d07a5e3e326d8073b44b6
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Aug 15 09:39:01 2007 +0000

    fixed value at infinity for upper incomplete gamma function

commit 3f2f58da7d6fb3f60f99e1dfb82febaf4f2aa05e
Author: inferno1386 <devnull@localhost>
Date:   Wed Aug 15 01:56:01 2007 +0000

    Fix for error introduced in together() in earlier revision.

commit 6baed412dc74a4c7e41413b282711e07372458fa
Author: lethargo <devnull@localhost>
Date:   Tue Aug 14 22:20:05 2007 +0000

    Polynomials: New classes handling modular integers and polynomials with factorization.

commit 79520a7bd65def34d073bdb5cfe7c9f905b0e884
Author: lethargo <devnull@localhost>
Date:   Tue Aug 14 22:19:04 2007 +0000

    simplify: uncommented failing doctest.

commit 814f01228567427bf310b368bd02db31ed5b659a
Author: lethargo <devnull@localhost>
Date:   Tue Aug 14 21:06:01 2007 +0000

    polynomials: Wrong name for != in Polynomial

commit aade395db4039f1d4afc4d8507b04deac1a438b7
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 14 19:11:04 2007 +0000

    Pretty printing of conjugate and fix for issue 300

commit b6fb7793112978aca58c4d87ea227e420fe40635
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 14 15:44:01 2007 +0000

    Fix for issue 231

commit b3e0ebfda545776b26b805a10f780ec4ada01a42
Author: lethargo <devnull@localhost>
Date:   Tue Aug 14 13:56:02 2007 +0000

    polynomials: Fixed bug with Polynomial(<number>)

commit 09abd9f7542f116c429e719d1088ca2727566f6f
Author: inferno1386 <devnull@localhost>
Date:   Mon Aug 13 19:30:05 2007 +0000

    - Added method to matrices for calculating the wronskian
    - Fixes for issue 275
    - Updated expansion code for trigonometric functions

commit c52943fbdba9d17248f64d19ffcb0ea7951328ce
Author: Chris.Wu <devnull@localhost>
Date:   Mon Aug 13 18:59:00 2007 +0000

    Added fraction-free Lu decomposition with tests

commit 8bb2cb98926198e42af1588e14c84b90dd9a7c18
Author: inferno1386 <devnull@localhost>
Date:   Mon Aug 13 02:37:01 2007 +0000

    - Fixed error with I**Rational(1,2)
    - Fixed problem with applying conjugate to the arguments of Apply instances

commit da056ccc867b5a740d47861b19af24418f36c548
Author: inferno1386 <devnull@localhost>
Date:   Mon Aug 13 01:58:05 2007 +0000

    - Basic.expand() improved to support new hints by using _eval_expand_XXX
    - Added complex expansion of powers

commit 78277971700555ae03019711db11d08f765cf7b5
Author: ondrej.certik <devnull@localhost>
Date:   Sun Aug 12 17:56:01 2007 +0000

    updating version

commit 0e7b508cee12168645a5291c2fd314ce3ecc1c66
Author: inferno1386 <devnull@localhost>
Date:   Sun Aug 12 17:30:04 2007 +0000

    - Fixes for issue 297
    - Geometry module made more "import friendly"
    - Pretty printing of functions slightly modified

commit 59f5e2534cb13554e7293f58d1e82df2d736c22a
Author: ondrej.certik <devnull@localhost>
Date:   Sun Aug 12 08:53:02 2007 +0000

    importing pprint by default

commit 5ca62f48fc46a1ad78c930baf41a8f185853c26e
Author: ondrej.certik <devnull@localhost>
Date:   Sun Aug 12 08:20:01 2007 +0000

    updating README

commit 77a64702d2f356b3800ee077d5b68688bd847b5e
Author: ondrej.certik <devnull@localhost>
Date:   Sun Aug 12 08:13:04 2007 +0000

    make ./setup sdist work again

commit 4133dfcf8292727f216939bdc1ddcc4d9ad68d56
Author: inferno1386 <devnull@localhost>
Date:   Sun Aug 12 03:47:01 2007 +0000

    More limits added to table so that test_demidovich.py passes.

commit 7339f62d194deb309521f7ac61b1c7ad82a940a8
Author: ondrej.certik <devnull@localhost>
Date:   Sat Aug 11 23:57:05 2007 +0000

    adding the diff() function from oldcore, since the tutorial is using it.

commit 730f22f1dfe4bb52d9ca1f04052b87be57bca00d
Author: lethargo <devnull@localhost>
Date:   Sat Aug 11 23:39:01 2007 +0000

    polynomials: use complex expand in roots()

commit ab16c49d109102df5d0c83431ff8778ad2021561
Author: inferno1386 <devnull@localhost>
Date:   Sat Aug 11 22:56:02 2007 +0000

    A LUT was implemented in limits.py so that all limit tests now pass

commit c2391dd3e2715ae7880bc9bf106e315cfc79ae74
Author: ondrej.certik <devnull@localhost>
Date:   Sat Aug 11 21:20:05 2007 +0000

    test for already fixed issue 247 (SAGE ints) implemented

commit e327c2fc67aa0ffd46291c3a715c968082da2ec2
Author: inferno1386 <devnull@localhost>
Date:   Fri Aug 10 03:13:04 2007 +0000

    Minor improvements to integrate() plus tests.

commit 1fc02d9daee0a8ddde83c58b10830b57cd2f41f5
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Aug 9 21:04:02 2007 +0000

    Added zfade4.

commit bf149a3b95fe7aa9e3d05edc515b2ccea39ea4d7
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Aug 9 20:28:03 2007 +0000

    Nice example for multi-step gradients. Support for exp.

commit 27de665e9d513e76f59bca0293706bc7b80e95d2
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Aug 9 19:49:00 2007 +0000

    Small tweak to zfade3 color scheme.

commit 852b48a200c5f20f0bcdfab0663690b4a5fce827
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Aug 9 19:43:03 2007 +0000

    Plotting: multi-step gradients for color schemes.

commit 40b6ad96446850b28808b05adce77a3fb6e44b74
Author: brian.jorgensen <devnull@localhost>
Date:   Wed Aug 8 20:36:00 2007 +0000

    Custom coloring with syntax and behavior described at http://straightupcoding.blogspot.com/2007/07/some-thoughts-on-plot-coloring-with.html (except for multi-step gradients)

commit 8aa1ee5c9fee1b4fa074fc70472ecaef4ced17b7
Author: lethargo <devnull@localhost>
Date:   Wed Aug 8 08:53:00 2007 +0000

    polynomials: added modular polynomial arithmetic and factorization
    added new big prime integer factorization

commit 90f10ce494ec73bca4a2ff21f02104ba12b86a0e
Author: inferno1386 <devnull@localhost>
Date:   Wed Aug 8 04:20:02 2007 +0000

    Fixed issue 291 and sped up log in general for extremely large/small values.

commit 628a9fd3ac583c8928d1109e2d3a416028c008af
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Aug 7 22:53:01 2007 +0000

    Plot view rotation presets and key commands. F1=xy, F2=xz, F3=yz, F4=perspective. Made perspective the default for surfaces.

commit 8bae7dfa7d6c59c4bedbbb2918aae67d78f7532f
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Aug 7 22:12:01 2007 +0000

    Cleanup of axes code.

commit b59ca487b60255380e9bd4bd8abce198b6e2aff6
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Aug 7 21:19:02 2007 +0000

    Made axis labels disappear when looking directly down it. In other words, don't draw the labels if the axis is (nearly) orthogonal to the plane of the screen. Improves readability.

commit 5eea29539966252140f0e63b72e57072b604d116
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Aug 7 19:39:05 2007 +0000

    Reloading of display fonts when plot is closed and reopened.

commit 422635b1b08b215f4a7912c54af492b36e4383d6
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 7 18:59:01 2007 +0000

    Fix for issue 273.

commit 9418b65e7bfb353e8af29ebd78a7b5c8986e6f33
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Aug 7 18:42:04 2007 +0000

    Labels for ordinate axes.

commit 66922248080277a7134779aa28eecb5cd405e507
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Aug 7 09:00:01 2007 +0000

    added some simple rational functions to the integration table

commit 80605526cd161bb49bde6ea51684505367c70ae1
Author: lethargo <devnull@localhost>
Date:   Tue Aug 7 06:49:04 2007 +0000

    polynomials: bug fixed in roots

commit d2a14ed4e56a2df9b7649c02187b9a1a2d876fd1
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 7 05:15:03 2007 +0000

    - Fixes for issues 229 and 211
    - matches() can now match x**a to 1 by setting a to be 0

commit 815d3a0d84822c90e7226c2ce50d616b6285cb18
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Aug 7 04:42:04 2007 +0000

commit 0d06f6ffd03e15c03ccc5d4cc08010b93240be94
Author: inferno1386 <devnull@localhost>
Date:   Tue Aug 7 01:31:02 2007 +0000

    Added pretty printing back into the new core. See issue 53.

commit 29c519ad82a832efb506d2de4454b023af6edb04
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Aug 7 00:17:01 2007 +0000

    Made lambda evaluation the default for plotting (using lambdify). Everything should be much faster now. Use option 'use_sympy_eval' to fallback on sympy subs evaluation.

commit a047c536b78e6b9535e089773989aa587176a942
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 23:06:01 2007 +0000

    Added lambdify command, which takes an expression or vector of expressions along with an ordered list of Symbol arguments and returns a lambda function which uses python math for evaluation.

commit 9e6488e8440606e3d51103b367af2e5b37625f18
Author: inferno1386 <devnull@localhost>
Date:   Mon Aug 6 20:55:05 2007 +0000

    Fix for issue 289.

commit 002cd81d974137493fe90dee8cc030ac17134374
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 16:55:00 2007 +0000

    Removing instrumentation because it causes other doctests to fail (print statements are interpreted as the output of doctests).

commit 190d2cacdb698915eec1c767c87f9cc826f0aab8
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 16:36:03 2007 +0000

    Added separate commented-out test for plotting log.

commit 2e1abb2aa57e079defd3b3108c89ce219c9046d3
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 16:15:04 2007 +0000

commit b29a8a1b0dd4b4055d9e968243debb0f87f2d7da
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 16:06:02 2007 +0000

    Additional instrumentation for debugging.

commit e64fd1d07b3ae7b2d1f54cefee5b8f2f3c4b2f0f
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 15:55:03 2007 +0000

    Added a print message to the calculation thread for temporary diagnostic purposes.

commit f09b2e61498a714b5ffdd155e60d13a634620620
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 15:22:02 2007 +0000

    Forgot to add a file.

commit ca74ee150cd616b7300789ec799ae15e56e90e85
Author: fredrik.johansson <devnull@localhost>
Date:   Mon Aug 6 09:29:05 2007 +0000

    numerics: implemented square root for complex numbers

commit 97f4b28faa7ecdd5207a466cc7205b5647e66c3b
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Aug 6 00:29:02 2007 +0000

    Axes with options. Option invert_mouse_zoom. Axe labels still in progress.

commit 5c1e62a2d05b7979a90f0f518f32dfc0babdc73b
Author: brian.jorgensen <devnull@localhost>
Date:   Sun Aug 5 17:08:03 2007 +0000

    Plotting: recompilation of GL display lists on plot close and reopen.

commit 6d0ee9b32b84f56c6e10760cdfdfbc03e963f1f5
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Aug 5 16:22:02 2007 +0000

    fix bug in factorint

commit 139a4acc021280bfd09ce549b412195ece5def5f
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Aug 5 15:52:04 2007 +0000

    fix an off-by-one bug

commit 1395a951888fc317b356f6d2380d36dcacb4b695
Author: lethargo <devnull@localhost>
Date:   Sun Aug 5 14:08:04 2007 +0000

    number theory: replaced polynomials.gcd with numbers.gcd

commit 163b7f437c127b439316a95d7575e6a7a31480a7
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Aug 5 12:44:01 2007 +0000

    adding basic number theory module (sieving, primality testing, factoring)

commit e0d18ac4163ef5077c4125fee71dfd9ff7f147f1
Author: lethargo <devnull@localhost>
Date:   Sun Aug 5 09:39:01 2007 +0000

    Polynomials: added documentation

commit d26a5c836e5f515fa978876154f965daeff77bae
Author: lethargo <devnull@localhost>
Date:   Sat Aug 4 21:52:04 2007 +0000

    Polynomials: added documentation

commit a35d83c6d9e9f1f93f81b0fb7ec682cefe20a998
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Aug 4 20:41:04 2007 +0000

commit 3169d906cd82d6b2e197b9f319599e2698d2d716
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Aug 4 19:50:00 2007 +0000

    implemented numerical Riemann zeta function for both real and complex numbers

commit ff9fa72ce6f75aca61f8faf054f279ebe968332c
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Aug 4 19:02:03 2007 +0000

    Plotting right-click translation fixed. Also, you can use x or numpad 5 to reset the view.

commit fec4fa09ed7091b8909dcbe64b6e559e9897f610
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Aug 4 18:33:05 2007 +0000

    Plot translation wasn't working like I thought, disabling until it's fixed.

commit b08ef2977eddf4e96200ea3e82840f0b09d275bd
Author: lethargo <devnull@localhost>
Date:   Sat Aug 4 18:11:00 2007 +0000

    Polynomials: added documentation

commit 11db72878179d687500e385daf3666f591cbe3b9
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Aug 4 16:58:00 2007 +0000

    Plotting: more natural right-click translation.

commit 2b2c5f3bba99d74a1731b23955c59a909edcd66c
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Aug 4 16:39:04 2007 +0000

    Plotting: middle click drag zoom.

commit d988ed7afb326e15b09ae0e85bd16cef61ea2bc4
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Aug 4 03:59:01 2007 +0000

    Removed echo of lambda string for cylindrical plot mode.

commit 2d13e6814f8ac80922b231f6c46f88a48966f497
Author: brian.jorgensen <devnull@localhost>
Date:   Sat Aug 4 03:46:02 2007 +0000

    New experimental plotting argument 'use_lambda' for MUCH faster plotting. I plan to make this the default eventually, but right now it doesn't always work due to some Basic->str conversion issues (One that I've run into is 1/2 instead of 1/2.0, etc). See examples/plotting.py, and try running it in an interactive shell.

commit d8efab0027f8d5b483e430b63f5f1c26ccdaf237
Author: brian.jorgensen <devnull@localhost>
Date:   Fri Aug 3 22:56:03 2007 +0000

    Make plotting example show something by default, for non-interactive users.

commit f9bd179ab72d5d1022b86276c66c775c820811dc
Author: brian.jorgensen <devnull@localhost>
Date:   Fri Aug 3 22:50:02 2007 +0000

    Fix doctest failure.

commit 829bc49aa411559af28203b7216be8ea65eb1e9b
Author: brian.jorgensen <devnull@localhost>
Date:   Fri Aug 3 22:33:04 2007 +0000

    Small update to plotting examples.

commit 1d0f629e67cd15448a491cc7838c180d2233e385
Author: brian.jorgensen <devnull@localhost>
Date:   Fri Aug 3 22:22:02 2007 +0000

    Big plotting release. Better automatic interval handling. Faster color calculations. style and color properties added, with support for lambda and sympy expression-based color functions. Improved plotting examples.

commit 0d69f72c4972611b795b090fa8c14e85b9a78ccd
Author: lethargo <devnull@localhost>
Date:   Fri Aug 3 20:28:03 2007 +0000

    Polynomials: added documentation

commit a51dfb0cceec425c5037a9f4013cf1c704e86fcc
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 3 18:18:01 2007 +0000

    implemented numerical incomplete gamma functions and error function for real and complex numbers

commit ebbad71fe52f0be77c3a83f03fcc7d7fc15a1285
Author: lethargo <devnull@localhost>
Date:   Fri Aug 3 15:24:04 2007 +0000

    Polynomials: added documentation

commit 5da15bc78e9a4926998bfea84dd5cdef0bbc6376
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 3 15:18:00 2007 +0000

    support for complex numbers for numerical gamma function and sine

commit 3ee95b9653ac57a9d8eeae8f6436ee9fb3342dba
Author: lethargo <devnull@localhost>
Date:   Fri Aug 3 08:33:04 2007 +0000

    Polynomials roots: fixed bug in cubic solver

commit f4271baf2e62088ea906022528818cfc07b25006
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Aug 3 07:44:01 2007 +0000

    implement numerical root-finding for polynomials

commit b552024894faf5011e1d8535b81b93f4e9bea376
Author: ondrej.certik <devnull@localhost>
Date:   Fri Aug 3 07:24:00 2007 +0000

    Added Kirill to credits

commit 739d021a4014ded41c6905359ddb1e727387d2fe
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 2 11:11:01 2007 +0000

    moved harmonic numbers to combinatorial module and added more documentation

commit 31d239b5c915453119278497f699a102b5af7e59
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 2 10:33:00 2007 +0000

    implemented bell numbers and bell polynomials

commit 8de8c45c75c09961af3a2c655100cbe9142bbda3
Author: fredrik.johansson <devnull@localhost>
Date:   Thu Aug 2 08:57:01 2007 +0000

    merged the two bernoulli number implementations and moved them to a new module for combinatorial functions along with new functions for fibonacci and lucas numbers/polynomials

commit d89aab54f94bb5221e815d7d132c0a89bbfde4f0
Author: pearu.peterson <devnull@localhost>
Date:   Wed Aug 1 17:37:01 2007 +0000

    Fix (Op(f)(x)).subs(f(x),g(x))

commit 7b2378862ae44f00ca3cc91fcf5401da8be8417c
Author: pearu.peterson <devnull@localhost>
Date:   Wed Aug 1 17:13:02 2007 +0000

    Fixed FApply substitution + several minor bugs.

commit 490aab58f8ca8a8cbbe75bc3152ebff9abdfeb12
Author: mattpap <devnull@localhost>
Date:   Wed Aug 1 16:37:01 2007 +0000

    Added Basic.rewrite() function, so now it is possible to rewrite eg. trigonometric functions in terms of exponentials.

commit a1ca4b3ef97ad8cebd37bd11e87274bec9974870
Author: inferno1386 <devnull@localhost>
Date:   Wed Aug 1 15:37:00 2007 +0000

    Fix for issue 284

commit 5b956d6845fde573cd7056e1a428b7c5f4c43066
Author: ondrej.certik <devnull@localhost>
Date:   Wed Aug 1 15:20:02 2007 +0000

    moved the code to the main() function

commit a58f48c37e6ec8d6ebf00722cb45683a1e387842
Author: inferno1386 <devnull@localhost>
Date:   Wed Aug 1 15:04:05 2007 +0000

    - As per issue 278, fixes so dsolve behaves like it did in the old core
    - Functions are no commutative by default to fix the issue in comment 7 of issue 252
    - atoms() now also accepts a tuple for a type so that multiple types can be filtered
    - Multiplcation/addition/exponentiation of arbitrary functions with an undefined
    number of arguments will no longer cause errors

commit 962861d9d17f016657f87127498761be5db9276b
Author: lethargo <devnull@localhost>
Date:   Wed Aug 1 13:41:04 2007 +0000

    Polynomials refactoring:
    unified sqf, factor, roots etc. avoided code duplication
    dual input now, possible.

commit 02070ae29aa593e6683aee5cb8c321cd8591113f
Author: mattpap <devnull@localhost>
Date:   Wed Aug 1 10:41:04 2007 +0000

    Rewritten as_coefficient(). Fixed bug in re() and im().

commit c579d08fe9515807d7c49606d0f3facf58c125ab
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Aug 1 01:49:05 2007 +0000

    reimplemented sums_products.py, placed in /concrete/ (perhaps temporarily); all tests except one run

commit d9d6f26a61f00ec6e263aef2daff1b0f17ce4e71
Author: mattpap <devnull@localhost>
Date:   Tue Jul 31 22:28:05 2007 +0000

    Added re(), im(), arg() functions. Bug fixed floor(), ceiling(). Started rewriting expand(), added support for expand(complex=True) (currently it fails in some cases, must wait for other expand() functionalities). Added Basic.as_real_imag(). Added some docstrings and new tests.

commit c998aabd97a4c48bf7bd0bc369667d37ffae00d4
Author: lethargo <devnull@localhost>
Date:   Tue Jul 31 09:59:03 2007 +0000

    Polynomials refactoring:
    unified div, gcd and lcm. avoided code duplication
    dual input now, possible.

commit 852224ba172ed290c4f6e6ffab1448dc642fc028
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Jul 31 02:37:03 2007 +0000

    fix pidigits.py

commit 9cdade772539f99725f4f14e9f423253937f4972
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Jul 31 02:09:01 2007 +0000

    reinstated support for polygamma functions; some other changes to the specfun module

commit b5f4198a31a3893f09c2879e744e6724a1c1b1a7
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Jul 31 02:00:02 2007 +0000

    Plot repr and str now shows correct function repr.

commit f2df6010fab7282a1becb549a10f3ab40c3c99f1
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Jul 31 01:33:04 2007 +0000

    Fixed plotting test synchronization issue. Also re-enabled all tests.

commit 43b1c57f6601faf688ac0a7bb25d0219c7e383ac
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Jul 31 01:20:03 2007 +0000

    made factorial_simplify work again along with binomial, rising_factorial etc in the factorials module; temporarily renamed some functions to avoid name clashes with the implementations in the core

commit e48ea6ff1c5648697b1af03c8d67f3a21c1203bf
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Jul 31 01:03:01 2007 +0000

    Added default parameters a,b to p[10] (the torus). Added color to p[6] (the flower). Sin and Cos seem to be working in most circumstances but are very slow.

commit a2e3f0c4284cefb1e5dbe75b295c9e01fc97a745
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Jul 31 00:49:01 2007 +0000

    Added a plotting example using style kwarg.

commit 5cbf1ec7cf868f2f6c0dab4100f0486b6417b229
Author: brian.jorgensen <devnull@localhost>
Date:   Tue Jul 31 00:43:05 2007 +0000

    Plotting: split tasks of calculating vertices and vertex colors for faster UI response. Added color and style arguments to functions. See examples.

commit 9ce46482dd0192e0e9d07cf1cff9030459a166c8
Author: ondrej.certik <devnull@localhost>
Date:   Mon Jul 30 21:26:05 2007 +0000

    Uncommenting the remaining tests.

commit 451e1c347b157d2c99a23d276529873547e49790
Author: inferno1386 <devnull@localhost>
Date:   Mon Jul 30 20:38:03 2007 +0000

    Additional fixes for issue 214.

commit 647880d2c40e209c6a4f71114dc5b97720112bfd
Author: brian.jorgensen <devnull@localhost>
Date:   Mon Jul 30 03:54:04 2007 +0000

    Plotting: fixed Plot append, small things.

commit dfe55b87c2954b39ebb6c131f3120cdfa285bdc7
Author: mattpap <devnull@localhost>
Date:   Mon Jul 30 01:20:02 2007 +0000

    Added trigonometric and hyperbolic inverses and refactored other defined functions (simplified evaluation logic, added power series). New functions are work in progress so not all cases are properly tested, yet.

commit 2f88cfe2c7227c104357ab88ec08653b01d27d11
Author: inferno1386 <devnull@localhost>
Date:   Mon Jul 30 01:03:02 2007 +0000

    - Fixed problems with the addition/multiplication of NaN
    - Fixed overflow errors in float_to_decimal of Real class
    - Made WildFunction match more strictly based on the nofargs attribute

commit ee66296103db819f3f8d4270e18587201629dddb
Author: inferno1386 <devnull@localhost>
Date:   Sun Jul 29 20:03:02 2007 +0000

    - Fixes for issue 214
    - Fixed doctests for plotting

commit c9fcb4c0b1ee2b4d3d2dae4a1995bf02fdac9069
Author: brian.jorgensen <devnull@localhost>
Date:   Sun Jul 29 19:00:04 2007 +0000

commit de5c0c9107156a073670d68fcb04e575e08f9b80
Author: brian.jorgensen <devnull@localhost>
Date:   Sun Jul 29 18:56:02 2007 +0000

    Hide ctypes import error until Plot() is called.

commit 7fd1510bbc5b5d31ee5256845761c1cee6a1a8c8
Author: brian.jorgensen <devnull@localhost>
Date:   Sun Jul 29 18:45:01 2007 +0000

    Plotting. Fixes list recompilation on plot close->open.

commit aab1a9978c5d3d19162bb7c7723665ff7d09d811
Author: brian.jorgensen <devnull@localhost>
Date:   Sun Jul 29 18:31:00 2007 +0000

    Rewrite/refactoring of plotting calculation and display code. Several examples and tests (commented out) still don't work because of issue 273.

commit 57df9cd687d6f7dab8a8460d2dc6ed42c09545d1
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Jul 29 15:21:03 2007 +0000

    rudimentary implementation of a function for converting a SymPy expression to a Float or ComplexFloat

commit a8c5195e9e5791d3b2bcc9b03e8d145f8848a9e2
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Jul 29 13:43:00 2007 +0000

    base implementation of a ComplexFloat class and support for complex exp/log

commit d7b36a129957b83efe081b81c67f176919282c99
Author: fredrik.johansson <devnull@localhost>
Date:   Sun Jul 29 13:17:00 2007 +0000

    fix module imports in two of the example scripts (leaving others unchanged as they don't work yet anyway)

commit 0dfd1a4425363a26efd75d6740fda6c0379bee13
Author: mattpap <devnull@localhost>
Date:   Sun Jul 29 12:25:00 2007 +0000

    sympy/modules/* -> sympy/

commit df40a584eb3ec5f50a15c332d010cd4ee9c4016d
Author: mattpap <devnull@localhost>
Date:   Sun Jul 29 11:37:00 2007 +0000

    No more infinite recurrsion for bernoulli numbers (but speed inprovement is needed). Added new tests to test_eval_apply concerning log().

commit 6547b161a3bf6933f9e8b104c77bc64bf6559e25
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 29 10:02:00 2007 +0000

    Adding a test from oldcore for match()

commit b61916a861bc9f3d554ab8faf21e842b2afd4092
Author: inferno1386 <devnull@localhost>
Date:   Sun Jul 29 05:05:01 2007 +0000

    Fixes for issue 215.

commit 6be5d8309485f75ce42c6b66424114ec5d8ed35b
Author: inferno1386 <devnull@localhost>
Date:   Sun Jul 29 00:34:01 2007 +0000

    - Reworked assumptions model slightly to be a little less strict in specifications
    - Code included for issue 264 (commented out)
    - Fixes for issue 266

commit 19f19f6f7c0b99fffc349b73d359c984831e3e3a
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Jul 28 22:21:01 2007 +0000

    tidied numerics gamma function code and fixed precision issue

commit d2815161b48ec427c4fc2e2cf64c7f38c357d9d3
Author: mattpap <devnull@localhost>
Date:   Sat Jul 28 22:21:00 2007 +0000

    Made Bernoulli numbers and polynomials work with new core and moved to integer_sequences.py. Refactored and bug fixed log(). Bug fixed floor() and ceiling(). Changed string representation of rf() and ff(). Added Euler gamma, golden ratio and catalan symbolic numbers and refactored others.

commit 06c9d1b7267872b2fec84c9f1f2a149cc0a1705d
Author: lethargo <devnull@localhost>
Date:   Sat Jul 28 12:39:02 2007 +0000

    Polynomials: added forwarding of attributes to underlying sympy expr

commit c5958b8b5d398a5b205ea33caf797dd183decb0d
Author: lethargo <devnull@localhost>
Date:   Sat Jul 28 12:18:02 2007 +0000

    setup.py: readded working doctests

commit 01fcc54d2b1904c62490d27df38f64f5a303a5a1
Author: lethargo <devnull@localhost>
Date:   Sat Jul 28 12:11:02 2007 +0000

    Polynomials: added methods as_monic etc. to Polynomial
    first steps in refactoring
    fixed issue 262

commit e0b8b14f059650d49a7dfadd4086b25e402589eb
Author: fredrik.johansson <devnull@localhost>
Date:   Sat Jul 28 11:26:05 2007 +0000

    optimized numerics.gamma for rational numbers

commit 81ef8c1cf98bb2d3077aa2ca64496d7215b9ebfc
Author: pearu.peterson <devnull@localhost>
Date:   Sat Jul 28 11:13:02 2007 +0000

    Fix issue 269.

commit a5a6fc9b1798c2949a51d6f513de15c1ea08fc8f
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 28 10:03:04 2007 +0000

    Fix typo

commit 780ca591ad07d4c23613b6ef75176608f192d24f
Author: mattpap <devnull@localhost>
Date:   Sat Jul 28 00:52:00 2007 +0000

    Refactored sin, cos, tan. Added preliminary support for cot, sinh, cosh, tanh, coth. Merged old trigonometric tests with test_eval_apply.py. Added all new functions to ordering list.

commit 3f8aa7a1f9bd21992403ebc9559a4d28da26ed03
Author: ondrej.certik <devnull@localhost>
Date:   Fri Jul 27 18:59:03 2007 +0000

    Fix for the issue 268

commit b43ebb5446fbc53375ee07d0e7a8e721c81e0b60
Author: Chris.Wu <devnull@localhost>
Date:   Fri Jul 27 18:14:01 2007 +0000

    Fixed inconsistencies with vectors being column vectors
    GramSchmidt tests updated in light on this
    __init__ fixed since it didn't import GramSchmidt

commit 7cd58a68f5408245a83b5930797bc08e97e481f4
Author: mattpap <devnull@localhost>
Date:   Fri Jul 27 17:47:02 2007 +0000

    Removed eval() from tests and modules.

commit 773a01cfb0f1b0572906fab006afef92c6de1c27
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Jul 27 10:53:03 2007 +0000

    added numerical gamma function

commit c365e3256efcb631ed12c0c14401b411e6a15aa3
Author: mattpap <devnull@localhost>
Date:   Fri Jul 27 09:40:01 2007 +0000

    Changed repr() to str() in Basic.sympify(). Removed eval() method.

commit eb20f84a19495905bac58eb6570c7c630b521968
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Jul 27 05:47:00 2007 +0000

    added more tests for Float

commit 55ea9a3b237aee69d1c82836f7f01d85fc688317
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Jul 27 05:38:00 2007 +0000

    fixed a couple of problems in the Float code that were revealed when i tried to compute some more difficult integrals

commit 4d8538c3f08d7870aa39e595bf1573130c7bc812
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Jul 27 04:12:00 2007 +0000

    implemented the tanh-sinh algorithm for numerical integration

commit 78528d390d3d611157d14f16b160c2b0210f5aab
Author: inferno1386 <devnull@localhost>
Date:   Fri Jul 27 01:15:03 2007 +0000

    - Fixes for issue 225
    - Updates to Geometry module to work properly with the new core

commit 9765e2987e9795bc63aeb2c80547393f0bf6a669
Author: fredrik.johansson <devnull@localhost>
Date:   Fri Jul 27 00:23:05 2007 +0000

    implemented numerical sin, cos and tan

commit 34ebb5624c89e034518d92ca61953d384469ce48
Author: ondrej.certik <devnull@localhost>
Date:   Fri Jul 27 00:23:00 2007 +0000

    Updating the people list

commit b713fd1720e4e35f85caf19597910842e4bee193
Author: ondrej.certik <devnull@localhost>
Date:   Fri Jul 27 00:13:02 2007 +0000

    adding README

commit cdaeb7aa2c6e28553f6d97606e7cb578bd83fc69
Author: inferno1386 <devnull@localhost>
Date:   Thu Jul 26 21:23:02 2007 +0000

    - Fixes for issue 260
    - Fixed test that failed in test_functions.py when py.test executed below root level

commit 83a8a1406a57b6d1678570eedfd776db23f047a3
Author: brian.jorgensen <devnull@localhost>
Date:   Thu Jul 26 21:03:01 2007 +0000

    Disabled labeled plot axes to see if that is what is killing Ondrej's xserver.

commit bc1ce49e954e55d916d18daba842ac9f078c5eba
Author: pearu.peterson <devnull@localhost>
Date:   Thu Jul 26 20:43:04 2007 +0000

    Fixed issue 254

commit 533d5c8e6eae5bd948b78c7086c13d6e87c9959b
Author: pearu.peterson <devnull@localhost>
Date:   Thu Jul 26 20:34:00 2007 +0000

    Fixed issue 255.

commit 246457836036f0c1ab2470dc4ef8f4de3790c35d
Author: ondrej.certik <devnull@localhost>
Date:   Thu Jul 26 19:48:00 2007 +0000

    polishing of trig functions + disabling a freezing plotting test

commit 0e61d8b88323013e6f2a349f3fdb9df56de39b35
Author: mattpap <devnull@localhost>
Date:   Thu Jul 26 19:20:01 2007 +0000

    Fix to issue 261.

commit 859f3b0f4eb1a9ad3fa5b951aae76e1f5440ebc5
Author: ondrej.certik <devnull@localhost>
Date:   Thu Jul 26 19:04:01 2007 +0000

    uncommenting tests, that work

commit 6efb174edf1e2aa7b2359cc453534df5542a14b1
Author: mattpap <devnull@localhost>
Date:   Thu Jul 26 18:17:05 2007 +0000

    Fixed Basic.__float__ for symbolic arguments.

commit 687a4899ae906bf905199cb4b7f5eacc95ce8bfa
Author: mattpap <devnull@localhost>
Date:   Thu Jul 26 18:09:02 2007 +0000

    Added float() to Basic.

commit 8be863e756327255b7115422e1318cf2bf721c89
Author: ondrej.certik <devnull@localhost>
Date:   Thu Jul 26 17:25:02 2007 +0000

    make ./setup.py sdist work correctly

commit 4ffbc70686f74142184240a863c3200c6a3f0abc
Author: ondrej.certik <devnull@localhost>
Date:   Thu Jul 26 16:41:05 2007 +0000

    added a test for the issue 125

commit f21cf2728e2e5ab1f241df7b1d6f78cabb623d93
Author: inferno1386 <devnull@localhost>
Date:   Thu Jul 26 15:49:01 2007 +0000

    - Modified several files to use xrange instead of range
    - Fixes for issue 253

commit 901ca594aebb05fb5d83b7a1b9d3de130411c6d5
Author: ondrej.certik <devnull@localhost>
Date:   Thu Jul 26 15:30:03 2007 +0000

    fix typo

commit 3a5cdb708aaa29a9bf1f2f0bd5dd0b79dd05a7c4
Author: mattpap <devnull@localhost>
Date:   Thu Jul 26 14:42:03 2007 +0000

    Fixed issue 247.

commit f86ad87a493091360ce67562c8c4e642f20f5c7a
Author: mattpap <devnull@localhost>
Date:   Thu Jul 26 13:05:02 2007 +0000

    Fixed problems with ./setup.py build. Cleaned MANIFEST.in. Added manual from 0.4.3

commit 9515e2c8eb3ce0dfab1e867b585fa1e682384f53
Author: pearu.peterson <devnull@localhost>
Date:   Thu Jul 26 09:44:03 2007 +0000

    removed print statement

commit 1c16b7eb9bb58f4e30ad63d4539bd59867093e63
Author: pearu.peterson <devnull@localhost>
Date:   Thu Jul 26 09:40:00 2007 +0000

    Added precision argument to evalf.

commit 90e769abf2e93e6f9284f1f817a06856f83c4c1d
Author: mattpap <devnull@localhost>
Date:   Thu Jul 26 08:36:03 2007 +0000

    Fixed issue 226. Added Number.{floor, ceiling} functions. Added Real.epsilon_eq.

commit fa4471a3362cd2e4a9ae32b10e20ab84eb62a27f
Author: mattpap <devnull@localhost>
Date:   Thu Jul 26 07:49:05 2007 +0000

    Fix to issues 250, 245, 244. Added floor and ceiling functions. Refactoring: removed commented lines with pdb. Bug fix in Basic.as_indep_terms.

commit 9af4a6d3a32f1e436ae2fad45df7301e0a26314e
Author: inferno1386 <devnull@localhost>
Date:   Wed Jul 25 23:27:01 2007 +0000

    Fixed issues addresses in comment 1 of issue 123.

commit 2d1c67bf829cfeb176bb63cd0d3858c6d83d924c
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 17:59:01 2007 +0000

    use symbols

commit fc75a24d122962f86d065eba5d03eb91a7457b94
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 17:52:05 2007 +0000

    Improved the example

commit c391ba0e1caf14a2f045441cefb87c56e220ad11
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 17:46:02 2007 +0000

    fix the problem with matrices

commit c67ad98c607ed2a14d1e39ead7a5c0c914f283c3
Author: Chris.Wu <devnull@localhost>
Date:   Wed Jul 25 16:57:03 2007 +0000

    cleaning up matrices and added vandermonde matrix example for further study

commit b21a8bb6deb845ccb84dae674688ea4e3bffd640
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 16:31:04 2007 +0000

    Make relativity.py work

commit 136ebcf27ba719f6ffb42356d7bb8b95f7596472
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 15:30:01 2007 +0000

    Applying Ulrich's patches for Issues 248 and 249.

commit 68d204ff663fa9b8556c49a70c35eb819a0aeaa9
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 14:26:00 2007 +0000

    put sympy to the path, so that it can be executed in place

commit 641f632fdf7dc4c5a7ac7e2ba75b0434a55991f8
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Jul 25 14:23:05 2007 +0000

    added pi digits example script

commit e5d584b8a40fbc613e030278a1ecf161c2ae3c58
Author: mattpap <devnull@localhost>
Date:   Wed Jul 25 11:40:03 2007 +0000

    Fixed argument parsing in plotting module.

commit fae157adea5531d5e8c6c0632521ea351d7190c2
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 09:52:02 2007 +0000

    Added tests for fixed issues 159 and 105, so that it never happens again.

commit 10cba3bd752f01a3a346003ec1706826f4b6550c
Author: ondrej.certik <devnull@localhost>
Date:   Wed Jul 25 08:21:00 2007 +0000

    commited a test for the Issue 153

commit e02fbea435527e5e84385d42bf83984c083509bc
Author: inferno1386 <devnull@localhost>
Date:   Wed Jul 25 01:33:02 2007 +0000

    Merged code from old core to speed up evaluation of powers with rational exponents. See issue
    213.

commit b0d09a25c124b9bd63c14ce0f646d35efa6c51e4
Author: fredrik.johansson <devnull@localhost>
Date:   Wed Jul 25 00:27:04 2007 +0000

    adding new version of numerics module

commit 4f07381e34b9ccd18d30a68c7fdcfdcba5447eca
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 23:52:02 2007 +0000

    adding a test for the Issue 162

commit 8d8572636bee60632ee6b2670025d385c6ee15eb
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 23:47:03 2007 +0000

    import the standard "limit" command

commit cdc6cddfad8af1d4d11f39ba617f2d6f1385f339
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 23:30:05 2007 +0000

    make integrals work with evaluate=False, and all tests pass now

commit 593140ba04e09e3a5b8584caae31d6561bb707d6
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 22:54:04 2007 +0000

    import integrals from core and implemented evaluate=True

commit 2bd145124c6a3eb864eafdac9a220291f24531fe
Author: fredrik.johansson <devnull@localhost>
Date:   Tue Jul 24 22:10:00 2007 +0000

    restore detailed docstring for Rational

commit 56270024708d0960be31e6691f66a490982fc5e4
Author: inferno1386 <devnull@localhost>
Date:   Tue Jul 24 22:06:02 2007 +0000

    Fixes for issue 240.

commit cc7d0ca8b1984fc4399e13afa38f7ca374cb1155
Author: mattpap <devnull@localhost>
Date:   Tue Jul 24 21:49:05 2007 +0000

    Improved symbols()

commit e2f9361672fa5f32bc4e95a792888356d098e59e
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 20:47:01 2007 +0000

    The Factorial in the core commented out

commit 4c645371226a6aab0839cff34bfe4da534fc8108
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 20:32:03 2007 +0000

    added files from the oldcore

commit 17aa81d7808b3a43dca83692dc418308f6e06440
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 20:30:03 2007 +0000

    create trunk again

commit 6ab1bc6e76e6e25c7f4a0713136f056ff83cdfc9
Author: mattpap <devnull@localhost>
Date:   Tue Jul 24 20:00:05 2007 +0000

    Made geometry module working. Added preliminary support for trig inveses. Removed compatibility code from numbers.py. Fixed imports in specfun module.

commit 294ec0012df516c3e9b3842c1df0c1a78f20d79c
Author: inferno1386 <devnull@localhost>
Date:   Tue Jul 24 17:57:05 2007 +0000

    Added tests for plotting module.

commit 4f4aca38b0416c8a7ec2491f737e7f966c158176
Author: inferno1386 <devnull@localhost>
Date:   Tue Jul 24 17:26:05 2007 +0000

    Added plotting module.

commit eba88db77703cad8f90697a64d9c724a3304e039
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 15:22:03 2007 +0000

    Fix doctests in the integral module

commit 148867e5b60602b8164301d5af3d22ff93227420
Author: ondrej.certik <devnull@localhost>
Date:   Tue Jul 24 15:04:03 2007 +0000

    fix setup.py, so that doctests are run

commit 61fc45e2b654a7a2a7281fa200642adb1139e8bc
Author: inferno1386 <devnull@localhost>
Date:   Mon Jul 23 21:58:01 2007 +0000

    - Added integration and tests for integration
    - Updated functions in specfun module to properly work with the new core

commit 97ceafcd07704e77a744aea9c57b6dbff07b61b3
Author: mattpap <devnull@localhost>
Date:   Mon Jul 23 14:31:01 2007 +0000

    Added solvers and simplify modules.

commit ae383d32d6c413be65701d37d3a8c9a5ee8942b0
Author: pearu.peterson <devnull@localhost>
Date:   Mon Jul 23 11:39:00 2007 +0000

    Fix Mul(4) to return Basic object.

commit 557b152716b80e8034ab6491d36cb7d9b0d27c02
Author: pearu.peterson <devnull@localhost>
Date:   Mon Jul 23 10:25:03 2007 +0000

    Fix issue 224

commit 9d1ff9ce7744b8dc551bd88bcebbc797dc23a97e
Author: pearu.peterson <devnull@localhost>
Date:   Mon Jul 23 09:28:01 2007 +0000

    Reimpl Memoizer. Detect infinite recursion in computing oseries.

commit 2957293b347ee4b47994c341d33e1aa89134c197
Author: pearu.peterson <devnull@localhost>
Date:   Mon Jul 23 09:26:03 2007 +0000

    workaround comparing objects when creating Equality fails

commit 6a6baa40752c531f3fa65bbd792766684b8c275e
Author: pearu.peterson <devnull@localhost>
Date:   Mon Jul 23 09:25:03 2007 +0000

    Detect infinite recursion in mrv_inflimit

commit b2d93849bb1fd462b26369b069dc0400ace078db
Author: pearu.peterson <devnull@localhost>
Date:   Mon Jul 23 09:24:03 2007 +0000

    Fix oo+I

commit e48316c280a70a476402a042ab176737df2204e2
Author: mattpap <devnull@localhost>
Date:   Mon Jul 23 08:15:04 2007 +0000

    Fixed is_polynomial()

commit 2cf1c722ace239591df5b923bfd4b834c3c28d68
Author: mattpap <devnull@localhost>
Date:   Mon Jul 23 01:04:01 2007 +0000

    Removed ispoly(), added more tests to is_polynomial().

commit 056626f8bd57307975cef98eca221927a68e9bf9
Author: mattpap <devnull@localhost>
Date:   Mon Jul 23 00:50:00 2007 +0000

    Added is_polynomial(x, y, ...) replacement for ispoly()

commit b8dacaf445aabb9b3c647a2d0f39750c473d0975
Author: inferno1386 <devnull@localhost>
Date:   Mon Jul 23 00:14:03 2007 +0000

    Added test_demidovich to series module.

commit ef6793165bf46132f144450c0694fab99fc5ceec
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:53:05 2007 +0000

    more things from specfun adapted

commit ed8b8f3ff805ddf7ea36720da9877b9b7c3e0335
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:43:05 2007 +0000

    more tests uncommented and reported.

commit 2411bb6c01a23a4c4e7a689119a610b74ddba43a
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:30:04 2007 +0000

    more tests uncommented

commit 573f14e53cec8f44c24605fc455bc038ecdfbd64
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:29:04 2007 +0000

    tests fixed

commit 29470d52028efb4a8e840a5cf4eef168ad7efbae
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:28:01 2007 +0000

    more tests fixed

commit 11414c5f5c684d6b2652587f86354306c9d1c061
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:24:05 2007 +0000

    a few more test uncommented

commit 3fdbaab66929a0d55b2f20a3ffdcdc13ddb86fda
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:04:02 2007 +0000

    more tests moved (commented them out for the moment, going to fix/create Issues
    now)

commit f94c974a4284cf9bc1a6e5e23a42243efe862b5e
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 23:02:00 2007 +0000

    more tests for factorials moved and adapted

commit 5a110e7e803d452b3ded696fe8d54a84ab3f0ace
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 22:49:01 2007 +0000

    Factorial is working now

commit 9a4929385a775e263754d10f9b7a36ba2b702d1f
Author: inferno1386 <devnull@localhost>
Date:   Sun Jul 22 21:58:02 2007 +0000

    New tests added.

commit de307e60b421794cfc851940a0738c327f996111
Author: inferno1386 <devnull@localhost>
Date:   Sun Jul 22 19:08:04 2007 +0000

    test_series.py and test_functions.py added, along with minor changes to existing tests.

commit e2887509ea248bc92ea375e3efbdca9fd4b3bb6b
Author: inferno1386 <devnull@localhost>
Date:   Sun Jul 22 16:04:03 2007 +0000

    Fixes for issue 213.

commit 9cb5febe32a61beac5af85a0957da858fe2168f8
Author: lethargo <devnull@localhost>
Date:   Sun Jul 22 13:50:01 2007 +0000

    Polynomials: import clean up, added coeff_list and poly to Polynomial

commit 5009295c6f76e95e13780361bc3e88d639463cdb
Author: mattpap <devnull@localhost>
Date:   Sun Jul 22 12:30:04 2007 +0000

    Merged matrices. Bug fix in resultant() (made it working for 'sparse' polynomials. Bug fix in coeff_list() (rewritten unification of monomials).

commit d6127fba2c1cee412713c031bdb531b2b4e68a82
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 10:58:03 2007 +0000

    First commit of specfun, tests don't run yet.

commit 1c0b8f93b5653dd5680c8cbed4e49174c479691b
Author: ondrej.certik <devnull@localhost>
Date:   Sun Jul 22 10:20:01 2007 +0000

    Commented out the failing tests, created Issues for them.

commit f86c9f8fa6813354e360063e60a839e1070edda9
Author: inferno1386 <devnull@localhost>
Date:   Sun Jul 22 01:49:00 2007 +0000

    Additional tests added for core.

commit 396f9e3708db83a8704033fe73293322687d6f60
Author: inferno1386 <devnull@localhost>
Date:   Sat Jul 21 23:12:03 2007 +0000

    Two new tests added for core, along with additional tests for test_assumptions.py.

commit 756f4003fd1b76559178ce8ee8d6da5592830d41
Author: pearu.peterson <devnull@localhost>
Date:   Sat Jul 21 22:46:05 2007 +0000

    Fixed issue 209.

commit 121e22ee4ccb46079864d30bda140fffd1622fdf
Author: lethargo <devnull@localhost>
Date:   Sat Jul 21 22:02:04 2007 +0000

    Added polynomials module, everything works except:
    resultant() (dependend on matrices)
    Ideal (issue with operator overloading)

commit 4b33f494da035b833155df0547e0ac7ef23db596
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 21:44:01 2007 +0000

    updated the version in isympy as well

commit 57d3da9593dcd2a8f3f8989ac601cf553abaf378
Author: mattpap <devnull@localhost>
Date:   Sat Jul 21 21:42:05 2007 +0000

    Fix to issue 207 - printing

commit bc693c94fcc7ccd06e283c08012937c5732c0da3
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 21:33:02 2007 +0000

    Use the version 0.5.0 when we merge it.

commit 394e1156dc6c5cb81386b48375973225aa9a497f
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 21:10:01 2007 +0000

    fixed failing doctests

commit 83691d67d6a35f1a9994b2319e92d4ce577698b1
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 21:05:00 2007 +0000

    Polishing of doctests code

commit 5ac1a43b239b73e02af7c29bb2a878b08f0b8de4
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 21:03:03 2007 +0000

    make ./setup.py test_doc work

commit 999d02f5b5ac49e8b4ca489d2adc307d2626ab2e
Author: inferno1386 <devnull@localhost>
Date:   Sat Jul 21 20:56:04 2007 +0000

    Updates to fix doctests.

commit d76c261225658d60074e819fa7d25883020bb84a
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 20:40:03 2007 +0000

    fixed the order tests

commit c4fa6133d801068fe5cd889d9e20f45fe0965979
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 20:32:03 2007 +0000

    commented out the failing limits tests for the time being

commit 4eb62df6b9710a693295bb221422dc672e8ec64b
Author: ondrej.certik <devnull@localhost>
Date:   Sat Jul 21 20:26:03 2007 +0000

    Make py.test work out of the box

commit dfc19f5189b169699dc8a38f05dae2a49e755f0c
Author: mattpap <devnull@localhost>
Date:   Sat Jul 21 10:15:00 2007 +0000

    Fixed bug in Rational._eval_power and added preliminary tests for this type of functionality. Previously failed in eg. Rational(1, 5)**Rational(7, 2). Refactored bug fix in Mul.flatten (generalization).

commit ceeb9134308ffa43cae62410cbffb4a8ac04b35b
Author: inferno1386 <devnull@localhost>
Date:   Sat Jul 21 03:26:02 2007 +0000

    Added missing mrv function.

commit c68be7c7739e5af0e63cb32eb2689457b8a4b5df
Author: inferno1386 <devnull@localhost>
Date:   Sat Jul 21 03:09:00 2007 +0000

    - Restructuring for issue 193 (limit.py and order.py moved to sympy/modules/series)
    - Fixed bugs with test cases

commit 8031ac899efb95f79f01e3f0f3f3f21563e4efb6
Author: inferno1386 <devnull@localhost>
Date:   Sat Jul 21 02:37:03 2007 +0000

    Updated code to pass tests in test_assumptions.py.

commit 9f93ce9a1bb247d3b1d05f3f825abc39ed304709
Author: mattpap <devnull@localhost>
Date:   Fri Jul 20 23:14:03 2007 +0000

    Fixed bug in Mul.flatten (see sympy-group in topic 'Moving to new core'

commit b870454c73ef33592703f01c481d5de09cf08953
Author: inferno1386 <devnull@localhost>
Date:   Fri Jul 20 16:20:00 2007 +0000

    Fixes for issue 192.

commit 99b21ff58ad2e2ba83172512d7f513a7c37e50c3
Author: mattpap <devnull@localhost>
Date:   Thu Jul 19 21:07:03 2007 +0000

    Created sympy-merge branch with basic structure of directories, core sources (with compatibility code removed) and refactored utils.py. Also changed sympy/__init__.py.

